%section% := value

numbertype :=
    new Number(+value:valtype+)
    new Number(+common:int+)
    new Number("+common:int+")
    Number(+value:valtype+)
    Number(+common:int+)
    Number("+common:int+")
    Number.EPSILON
    Number.MAX_SAFE_INTEGER
    Number.MAX_VALUE
    Number.MIN_SAFE_INTEGER
    Number.MIN_VALUE
    Number.NaN
    Number.NEGATIVE_INFINITY
    Number.POSITIVE_INFINITY

statement :=
    Number.isNaN(+value:valtype+)
    Number.isFinite(+value:valtype+)
    Number.isInteger(+value:valtype+)
    Number.isSafeInteger(+value:valtype+)
    Number.parseFloat(+value:valtype+)
    Number.parseInt(+value:valtype+)
    !number!.toExponential()
    !number!.toExponential(+common:byte_int+)
    !number!.toFixed()
    !number!.toFixed(+common:byte_int+)
    !number!.toLocaleString()
    !number!.toPrecision()
    !number!.toPrecision(+common:byte_int+)
    !number!.toString()
    !number!.toString(+common:byte_int+)
    !number!.toString(%range%(0-36))
    !number!.valueOf()
