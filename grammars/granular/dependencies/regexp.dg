%section% := value

patternchar :=
    +common:character+
    .
    \d
    \D
    \w
    \W
    \s
    \S
    \t
    \r
    \v
    \f
    [\b]
    \0
    \c%range%(A-Z)
    \x+common:hex++common:hex+
    \u+common:hex++common:hex++common:hex++common:hex+
    \\
    [a-z]
    [^abc]
    |
    ^
    $
    \b
    \B
    \+common:int+
    (?:+pattern+)
    +pattern+*
    +pattern++
    +pattern+?
    +pattern+{+common:int+}
    +pattern+{+common:int+,}
    +pattern+{+common:int+,+common:int+}
    +pattern+(?=+pattern+)
    +pattern+(?!+pattern+)

pattern :=
    %repeat%(+patternchar+, "")

flagchar :=
    g
    i
    m
    s
    u
    y


flags :=
    %unique%(+flagchar+)

statement :=
    !regexp!.flags = "+flags+"
    !regexp!.flags
    !regexp!.global = +common:bool+
    !regexp!.global
    !regexp!.ignoreCase = +common:bool+
    !regexp!.ignoreCase
    !regexp!.multiline = +common:bool+
    !regexp!.multiline
    !regexp!.sticky = +common:bool+
    !regexp!.sticky
    !regexp!.unicode = +common:bool+
    !regexp!.unicode
    !regexp!.exec("+common:text+")
    !regexp!.test("+common:text+")
    RegExp.prototype[Symbol.match]("+common:text+")
    RegExp.prototype[Symbol.search]("+common:text+")
    RegExp.prototype[Symbol.split]("+common:text+")
    !regexp!.toString()
    !regexp!.lastIndex
    !regexp!.compile()
    "+common:text+".split(!regexp!)
    "+common:text+".split(!regexp!, +common:int+)

regexptype :=
    new RegExp("+pattern+", "+flags+")
    new RegExp("+pattern+")
    RegExp("+pattern+", "+flags+")
    RegExp("+pattern+")

%section% := variable

regexp :=
    var @regexp@ = +regexptype+;
