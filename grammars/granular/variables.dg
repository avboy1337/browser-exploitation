regexptype :=
    new RegExp("+regexp:pattern+", "+regexp:flags+")
    new RegExp("+regexp:pattern+")
    RegExp("+regexp:pattern+", "+regexp:flags+")
    RegExp("+regexp:pattern+")

arrtype :=
    [%repeat%(+value:valtype+, ",")]
    [%repeat%(+common:decimal_number+, ",")]
    new Array(+common:short_int+)

bool :=
    true
    false
    Boolean(+value:valtype+)
    new Boolean(+value:valtype+)

arraybuffertype :=
    new ArrayBuffer(+common:positive_integer+)

typedarraytype :=
    new +buffer:typedarraykind+(+buffer:typedarrayarg+)

dataviewtype :=
    (new DataView(+dataview:dataviewbuffer+))
    (new DataView(+dataview:dataviewbuffer+, +common:int+))
    (new DataView(+dataview:dataviewbuffer+, +common:int+, +common:int+)

datetype :=
   Date()
   Date.parse("+common:text+")
   new Date()
   new Date(+common:int+)
   new Date(+common:int+, +common:int+)
   new Date(+common:int+, +common:int+, +common:int+)
   new Date(+common:int+, +common:int+, +common:int+, +common:int+)
   new Date(+common:int+, +common:int+, +common:int+, +common:int+, +common:int+)
   new Date(+common:int+, +common:int+, +common:int+, +common:int+, +common:int+, +common:int+)
   new Date.UTC()
   new Date.UTC(+common:int+)
   new Date.UTC(+common:int+, +common:int+)
   new Date.UTC(+common:int+, +common:int+, +common:int+)
   new Date.UTC(+common:int+, +common:int+, +common:int+, +common:int+)
   new Date.UTC(+common:int+, +common:int+, +common:int+, +common:int+, +common:int+)
   new Date.UTC(+common:int+, +common:int+, +common:int+, +common:int+, +common:int+, +common:int+)

obj :=
    {%repeat%(+object:name_value_pair+, ",")}

maptype :=
    new Map(+map:map_arg+)

numbertype :=
    new Number(+value:valtype+)
    new Number(+common:int+)
    new Number("+common:int+")
    Number(+value:valtype+)
    Number(+common:int+)
    Number("+common:int+")
    Number.EPSILON
    Number.MAX_SAFE_INTEGER
    Number.MAX_VALUE
    Number.MIN_SAFE_INTEGER
    Number.MIN_VALUE
    Number.NaN
    Number.NEGATIVE_INFINITY
    Number.POSITIVE_INFINITY

settype :=
    new Set(+set:set_arg+)

stringtype :=
   "+common:text+"
    new String("+common:text+")

symboltype :=
   Symbol.iterator
   Symbol.match
   Symbol.replace
   Symbol.search
   Symbol.split
   Symbol.hasInstance
   Symbol.isConcatSpreadable
   Symbol.unscopables
   Symbol.species
   Symbol.toPrimitive
   Symbol.toStringTag

valtype :=
    +value:nulls+
    +common:int+
    +common:decimal_number+
    +common:short_int+
    +common:intoverflow+
    +common:byte+
    +common:object+
    +common:bool+
    "+common:text+"
    +array:arrtype+
    +object:objtype+
    +symbol:symboltype+

weakmaptype :=
    (new WeakMap(+weakmap:weakmaparg+))

weaksettype :=
    (new WeakSet(+weakset:weaksetarg+))
