// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
//FS.createPreloadedFile('/', 'liblib.so', "http://localhost:8080/side.wasm", true, true);
var Module = {
    dynamicLibraries: ['side.wasm'],
  };

  // Module["readBinary"] = function readBinary(filename) {
  //   var ret = Module["read"](filename, true);
  //   if (!ret.buffer) {
  //    ret = new Uint8Array(ret);
  //   }
  //   assert(ret.buffer);
  //   return ret;
  //  };

var postTestMessage = function(message)  {
      console.log('msg:' + message);
  }

  Module.onRuntimeInitialized = () => {
    Module._start();
  }


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('not compiled for this environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
  "f64-rem": function(x, y) {
      return x % y;
  },
  "debugger": function() {
      debugger;
  }
  ,
  "f64-to-int": function(x) {
      return x | 0;
  },
  "i32s-div": function(x, y) {
      return ((x | 0) / (y | 0)) | 0;
  },
  "i32u-div": function(x, y) {
      return ((x >>> 0) / (y >>> 0)) >>> 0;
  },
  "i32s-rem": function(x, y) {
      return ((x | 0) % (y | 0)) | 0;
  },
  "i32u-rem": function(x, y) {
      return ((x >>> 0) % (y >>> 0)) >>> 0;
  }
};

var loadedDynamicLibraries = [];

function loadDynamicLibrary(lib) {
  var libModule;
  var bin;
  if (lib.buffer) {
    // we were provided the binary, in a typed array
    bin = lib;
  } else {
    // load the binary synchronously
    bin = Module['readBinary'](lib);
  }
  libModule = loadWebAssemblyModule(bin);
  // add symbols into global namespace TODO: weak linking etc.
  for (var sym in libModule) {
    if (!Module.hasOwnProperty(sym)) {
      Module[sym] = libModule[sym];
    }
  }
  loadedDynamicLibraries.push(libModule);
}

// Loads a side module from binary data
function loadWebAssemblyModule(binary) {
  var int32View = new Uint32Array(new Uint8Array(binary.subarray(0, 24)).buffer);
  assert(int32View[0] == 0x6d736100, 'need to see wasm magic number'); // \0wasm
  // we should see the dylink section right after the magic number and wasm version
  assert(binary[8] === 0, 'need the dylink section to be first')
  var next = 9;
  function getLEB() {
    var ret = 0;
    var mul = 1;
    while (1) {
      var byte = binary[next++];
      ret += ((byte & 0x7f) * mul);
      mul *= 0x80;
      if (!(byte & 0x80)) break;
    }
    return ret;
  }
  var sectionSize = getLEB();
  assert(binary[next] === 6);                 next++; // size of "dylink" string
  assert(binary[next] === 'd'.charCodeAt(0)); next++;
  assert(binary[next] === 'y'.charCodeAt(0)); next++;
  assert(binary[next] === 'l'.charCodeAt(0)); next++;
  assert(binary[next] === 'i'.charCodeAt(0)); next++;
  assert(binary[next] === 'n'.charCodeAt(0)); next++;
  assert(binary[next] === 'k'.charCodeAt(0)); next++;
  var memorySize = getLEB();
  var memoryAlign = getLEB();
  var tableSize = getLEB();
  var tableAlign = getLEB();
  // alignments are powers of 2
  memoryAlign = Math.pow(2, memoryAlign);
  tableAlign = Math.pow(2, tableAlign);
  // finalize alignments and verify them
  memoryAlign = Math.max(memoryAlign, STACK_ALIGN); // we at least need stack alignment
  assert(tableAlign === 1);
  // prepare memory
  var memoryStart = alignMemory(getMemory(memorySize + memoryAlign), memoryAlign); // TODO: add to cleanups
  // The static area consists of explicitly initialized data, followed by zero-initialized data.
  // The latter may need zeroing out if the MAIN_MODULE has already used this memory area before
  // dlopen'ing the SIDE_MODULE.  Since we don't know the size of the explicitly initialized data
  // here, we just zero the whole thing, which is suboptimal, but should at least resolve bugs
  // from uninitialized memory.
  for (var i = memoryStart; i < memoryStart + memorySize; ++i) HEAP8[i] = 0;
  // prepare env imports
  var env = Module['asmLibraryArg'];
  // TODO: use only memoryBase and tableBase, need to update asm.js backend
  var table = Module['wasmTable'];
  var oldTableSize = table.length;
  env['memoryBase'] = env['gb'] = memoryStart;
  env['tableBase'] = env['fb'] = oldTableSize;
  var originalTable = table;
  table.grow(tableSize);
  assert(table === originalTable);
  // zero-initialize memory and table TODO: in some cases we can tell it is already zero initialized
  for (var i = env['memoryBase']; i < env['memoryBase'] + memorySize; i++) {
    HEAP8[i] = 0;
  }
  for (var i = env['tableBase']; i < env['tableBase'] + tableSize; i++) {
    table.set(i, null);
  }
  // copy currently exported symbols so the new module can import them
  for (var x in Module) {
    if (!(x in env)) {
      env[x] = Module[x];
    }
  }
   // wasm dynamic libraries are pure wasm, so they cannot assist in
  // their own loading. When side module A wants to import something
  // provided by a side module B that is loaded later, we need to
  // add a layer of indirection, but worse, we can't even tell what
  // to add the indirection for, without inspecting what A's imports
  // are. To do that here, we use a JS proxy (another option would
  // be to inspect the binary directly).
  var proxyHandler = {
    'get': function(obj, prop) {
      if (prop in obj) {
        return obj[prop]; // already present
      }
      if (prop.startsWith('g$')) {
        // a global. the g$ function returns the global address.
        var name = prop.substr(2); // without g$ prefix
        return env[prop] = function() {
          return Module[name];
        };
      }
      // if not a global, then a function - call it indirectly
      return env[prop] = function() {
        return Module[prop].apply(null, arguments);
      };
    }
  };

  var info = {
    global: {
      'NaN': NaN,
      'Infinity': Infinity,
    },
    'global.Math': Math,
    env: new Proxy(env, proxyHandler),
    'asm2wasm': asm2wasmImports
  };
  // create a module from the instance
  var instance = new WebAssembly.Instance(new WebAssembly.Module(binary), info);
  var exports = {};
  for (var e in instance.exports) {
    var value = instance.exports[e];
    if (typeof value === 'object') {
      // a breaking change in the wasm spec, globals are now objects
      // https://github.com/WebAssembly/mutable-global/issues/1
      value = value.value;
    }
    if (typeof value === 'number') {
      // relocate it - modules export the absolute value, they can't relocate before they export
      // it may be a function pointer
      if (e.substr(0, 3) == 'fp$' && typeof instance.exports[e.substr(3)] === 'function') {
        value = value + env['tableBase'];
      } else {
        value = value + env['memoryBase'];
      }
    }
    exports[e] = value;
  }
  // initialize the module
  var init = exports['__post_instantiate'];
  if (init) {
    if (runtimeInitialized) {
      init();
    } else {
      // we aren't ready to run compiled code yet
      __ATINIT__.push(init);
    }
  }
  return exports;
}

function getFunctionTables(module) {
  if (!module) module = Module;
  var tables = {};
  for (var t in module) {
    if (/^FUNCTION_TABLE_.*/.test(t)) {
      var table = module[t];
      if (typeof table === 'object') tables[t.substr('FUNCTION_TABLE_'.length)] = table;
    }
  }
  return tables;
}

function alignFunctionTables(module) {
  var tables = getFunctionTables(module);
  var maxx = 0;
  for (var sig in tables) {
    maxx = Math.max(maxx, tables[sig].length);
  }
  assert(maxx >= 0);
  for (var sig in tables) {
    var table = tables[sig];
    while (table.length < maxx) table.push(0);
  }
  return maxx;
}

// register functions from a new module being loaded
function registerFunctions(sigs, newModule) {
  sigs.forEach(function(sig) {
    if (!Module['FUNCTION_TABLE_' + sig]) {
      Module['FUNCTION_TABLE_' + sig] = [];
    }
  });
  var oldMaxx = alignFunctionTables(); // align the new tables we may have just added
  var newMaxx = alignFunctionTables(newModule);
  var maxx = oldMaxx + newMaxx;
  sigs.forEach(function(sig) {
    var newTable = newModule['FUNCTION_TABLE_' + sig];
    var oldTable = Module['FUNCTION_TABLE_' + sig];
    assert(newTable !== oldTable);
    assert(oldTable.length === oldMaxx);
    for (var i = 0; i < newTable.length; i++) {
      oldTable.push(newTable[i]);
    }
    assert(oldTable.length === maxx);
  });
  assert(maxx === alignFunctionTables()); // align the ones we didn't touch
}
// export this so side modules can use it
Module['registerFunctions'] = registerFunctions;

var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  // we can simply append to the wasm table
  var table = Module['wasmTable'];
  var ret = table.length;
  table.grow(1);
  table.set(ret, func);
  return ret;
}

function removeFunction(index) {
  alignFunctionTables(); // XXX we should rely on this being an invariant
  var tables = getFunctionTables();
  for (var sig in tables) {
    tables[sig][index] = null;
  }
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

// tempRet0 is normally handled in the module. but in relocatable code,
// we need to share a single one among all the modules, so they all call
// out.
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;

GLOBAL_BASE = alignMemory(GLOBAL_BASE, 8);


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      // ..., but after that, add smaller increments towards 2GB, which we cannot reach
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
    }
  }


  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();



  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data




addOnPreRun(function() {
  function loadDynamicLibraries(libs) {
    if (libs) {
      libs.forEach(function(lib) {
        loadDynamicLibrary(lib);
      });
    }
    if (Module['asm']['runPostSets']) {
      Module['asm']['runPostSets']();
    }
  }
  // if we can load dynamic libraries synchronously, do so, otherwise, preload
  if (Module['dynamicLibraries'] && Module['dynamicLibraries'].length > 0 && !Module['readBinary']) {
    // we can't read binary data synchronously, so preload
    addRunDependency('preload_dynamicLibraries');
    var binaries = [];
    Module['dynamicLibraries'].forEach(function(lib) {
      fetch(lib, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + lib + "'";
        }
        return response['arrayBuffer']();
      }).then(function(buffer) {
        var binary = new Uint8Array(buffer);
        binaries.push(binary);
        if (binaries.length === Module['dynamicLibraries'].length) {
          // we got them all, wonderful
          loadDynamicLibraries(binaries);
          removeRunDependency('preload_dynamicLibraries');
        }
      });
    });
    return;
  }
  loadDynamicLibraries(Module['dynamicLibraries']);
});


var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'index.wast';
  var wasmBinaryFile = 'index.wasm';
  var asmjsCodeFile = 'index.asm.js';

  if (typeof Module['locateFile'] === 'function') {
    if (!isDataURI(wasmTextFile)) {
      wasmTextFile = Module['locateFile'](wasmTextFile);
    }
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    }
    if (!isDataURI(asmjsCodeFile)) {
      asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
    }
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': { // special asm2wasm imports
      "f64-rem": function(x, y) {
        return x % y;
      },
      "debugger": function() {
        debugger;
      }
      ,
      "f64-to-int": function(x) {
        return x | 0;
      },
      "i32s-div": function(x, y) {
        return ((x | 0) / (y | 0)) | 0;
      },
      "i32u-div": function(x, y) {
        return ((x >>> 0) / (y >>> 0)) >>> 0;
      },
      "i32s-rem": function(x, y) {
        return ((x | 0) % (y | 0)) | 0;
      },
      "i32u-rem": function(x, y) {
        return ((x >>> 0) % (y >>> 0)) >>> 0;
      }
    },
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    var instance;
    try {
      instance = new WebAssembly.Instance(new WebAssembly.Module(getBinary()), info)
    } catch (e) {
      Module['printErr']('failed to compile wasm module: ' + e);
      if (e.toString().indexOf('imported Memory with incompatible size') >= 0) {
        Module['printErr']('Memory size incompatibility issues may be due to changing TOTAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set TOTAL_MEMORY at runtime to something smaller than it was at compile time).');
      }
      return false;
    }
    receiveInstance(instance);
    return exports;
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    assert(exports, 'no binaryen method succeeded.');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 204112;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });







var STATIC_BUMP = 204112;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  Module["_emscripten_set_main_loop_timing"] = _emscripten_set_main_loop_timing;
  
  function _emscripten_get_now() { abort() }
  Module["_emscripten_get_now"] = _emscripten_get_now;function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }
  Module["_emscripten_set_main_loop"] = _emscripten_set_main_loop;var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  Module["Browser"] = Browser;

  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  Module["__ZSt18uncaught_exceptionv"] = __ZSt18uncaught_exceptionv;

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }
  Module["___assert_fail"] = ___assert_fail;

  function ___block_all_sigs() {
  return Module['___block_all_sigs'].apply(null, arguments);
  }

  
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  Module["_emscripten_get_now_is_monotonic"] = _emscripten_get_now_is_monotonic;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  Module["ERRNO_CODES"] = ERRNO_CODES;
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  Module["___setErrNo"] = ___setErrNo;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  Module["_clock_gettime"] = _clock_gettime;function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }
  Module["___clock_gettime"] = ___clock_gettime;

  function ___clone() {
  return Module['___clone'].apply(null, arguments);
  }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  Module["___cxa_allocate_exception"] = ___cxa_allocate_exception;

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  Module["EXCEPTIONS"] = EXCEPTIONS;function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }
  Module["___cxa_begin_catch"] = ___cxa_begin_catch;

  function ___cxa_current_primary_exception() {
      var ret = EXCEPTIONS.caught[EXCEPTIONS.caught.length-1] || 0;
      if (ret) EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ret));
      return ret;
    }
  Module["___cxa_current_primary_exception"] = ___cxa_current_primary_exception;

  function ___cxa_decrement_exception_refcount(ptr) {
      EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
    }
  Module["___cxa_decrement_exception_refcount"] = ___cxa_decrement_exception_refcount;

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }
  Module["___cxa_free_exception"] = ___cxa_free_exception;function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
  Module["___cxa_end_catch"] = ___cxa_end_catch;

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_2"] = ___cxa_find_matching_catch_2;

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_3"] = ___cxa_find_matching_catch_3;


  function ___cxa_increment_exception_refcount(ptr) {
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
    }
  Module["___cxa_increment_exception_refcount"] = ___cxa_increment_exception_refcount;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  Module["___cxa_pure_virtual"] = ___cxa_pure_virtual;

  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      ptr = EXCEPTIONS.deAdjust(ptr);
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }
  Module["___cxa_rethrow"] = ___cxa_rethrow;

  function ___cxa_rethrow_primary_exception(ptr) {
      if (!ptr) return;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.infos[ptr].rethrown = true;
      ___cxa_rethrow();
    }
  Module["___cxa_rethrow_primary_exception"] = ___cxa_rethrow_primary_exception;

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }
  Module["___resumeException"] = ___resumeException;function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }
  Module["___cxa_find_matching_catch"] = ___cxa_find_matching_catch;function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }
  Module["___cxa_throw"] = ___cxa_throw;

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32;  

  function ___gxx_personality_v0() {
    }
  Module["___gxx_personality_v0"] = ___gxx_personality_v0;

  function ___lock() {}
  Module["___lock"] = ___lock;

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  Module["___map_file"] = ___map_file;

  function ___muldc3() {
  return Module['___muldc3'].apply(null, arguments);
  }

  
    

  function ___mulsc3() {
  return Module['___mulsc3'].apply(null, arguments);
  }

  function ___restore_sigs() {
  return Module['___restore_sigs'].apply(null, arguments);
  }


  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH"] = PATH;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  Module["IDBFS"] = IDBFS;
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  Module["NODEFS"] = NODEFS;
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  Module["WORKERFS"] = WORKERFS;
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  Module["_stdin"] = _stdin;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  Module["_stdout"] = _stdout;
  
  var _stderr=STATICTOP; STATICTOP += 16;;
  Module["_stderr"] = _stderr;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___syscall1(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // exit
      var status = SYSCALLS.get();
      Module['exit'](status);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall1"] = ___syscall1;

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall10"] = ___syscall10;

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
            data = buffer.slice(offset, offset + length);
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  Module["SOCKFS"] = SOCKFS;
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  Module["__inet_pton4_raw"] = __inet_pton4_raw;
  
  function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }
  Module["__inet_pton6_raw"] = __inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  Module["DNS"] = DNS;
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  Module["Sockets"] = Sockets;
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  Module["__inet_ntop4_raw"] = __inet_ntop4_raw;
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  Module["__inet_ntop6_raw"] = __inet_ntop6_raw;function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  Module["__read_sockaddr"] = __read_sockaddr;
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }
  Module["__write_sockaddr"] = __write_sockaddr;function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall102"] = ___syscall102;

  function ___syscall114(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // wait4
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall114"] = ___syscall114;

  function ___syscall118(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall118"] = ___syscall118;

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall12"] = ___syscall12;

  function ___syscall121(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setdomainname
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall121"] = ___syscall121;

  function ___syscall122(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // uname
      var buf = SYSCALLS.get();
      if (!buf) return -ERRNO_CODES.EFAULT
      var layout = {"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};
      function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      }
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall122"] = ___syscall122;

  function ___syscall125(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mprotect
      return 0; // let's not and say we did
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall125"] = ___syscall125;

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};
  Module["PROCINFO"] = PROCINFO;function ___syscall132(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall132"] = ___syscall132;

  function ___syscall133(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchdir
      var stream = SYSCALLS.getStreamFromFD();
      FS.chdir(stream.path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall133"] = ___syscall133;

  function ___syscall14(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall14"] = ___syscall14;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall140"] = ___syscall140;

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall142"] = ___syscall142;

  function ___syscall144(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // msync
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get();
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      SYSCALLS.doMsync(addr, FS.getStream(info.fd), len, info.flags);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall144"] = ___syscall144;

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall145"] = ___syscall145;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall146"] = ___syscall146;

  function ___syscall147(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getsid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.sid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall147"] = ___syscall147;

  function ___syscall148(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fdatasync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall148"] = ___syscall148;

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall15"] = ___syscall15;

  
  function ___syscall153(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munlockall
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall153"] = ___syscall153;function ___syscall150() {
  return ___syscall153.apply(null, arguments)
  }
  Module["___syscall150"] = ___syscall150;

  function ___syscall151() {
  return ___syscall153.apply(null, arguments)
  }
  Module["___syscall151"] = ___syscall151;

  function ___syscall152() {
  return ___syscall153.apply(null, arguments)
  }
  Module["___syscall152"] = ___syscall152;


  function ___syscall163(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mremap
      return -ERRNO_CODES.ENOMEM; // never succeed
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall163"] = ___syscall163;

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall168"] = ___syscall168;

  function ___syscall180(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pread64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.read(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall180"] = ___syscall180;

  function ___syscall181(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwrite64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.write(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall181"] = ___syscall181;

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall183"] = ___syscall183;

  function ___syscall191(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ugetrlimit
      var resource = SYSCALLS.get(), rlim = SYSCALLS.get();
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall191"] = ___syscall191;

  function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mmap2
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), prot = SYSCALLS.get(), flags = SYSCALLS.get(), fd = SYSCALLS.get(), off = SYSCALLS.get()
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
      if (fd === -1) {
        ptr = _memalign(PAGE_SIZE, len);
        if (!ptr) return -ERRNO_CODES.ENOMEM;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -ERRNO_CODES.EBADF;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall192"] = ___syscall192;

  function ___syscall193(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // truncate64
      var path = SYSCALLS.getStr(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.truncate(path, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall193"] = ___syscall193;

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall194"] = ___syscall194;

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall195"] = ___syscall195;

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall196"] = ___syscall196;

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall197"] = ___syscall197;

  function ___syscall198(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // lchown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group); // XXX we ignore the 'l' aspect, and do the same as chown
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall198"] = ___syscall198;

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall202"] = ___syscall202;function ___syscall199() {
  return ___syscall202.apply(null, arguments)
  }
  Module["___syscall199"] = ___syscall199;

  function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall20"] = ___syscall20;

  function ___syscall200() {
  return ___syscall202.apply(null, arguments)
  }
  Module["___syscall200"] = ___syscall200;

  function ___syscall201() {
  return ___syscall202.apply(null, arguments)
  }
  Module["___syscall201"] = ___syscall201;


  
  function ___syscall214(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setgid32
      var uid = SYSCALLS.get();
      if (uid !== 0) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall214"] = ___syscall214;function ___syscall203() {
  return ___syscall214.apply(null, arguments)
  }
  Module["___syscall203"] = ___syscall203;

  function ___syscall204() {
  return ___syscall214.apply(null, arguments)
  }
  Module["___syscall204"] = ___syscall204;

  function ___syscall205(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgroups32
      var size = SYSCALLS.get(), list = SYSCALLS.get();
      if (size < 1) return -ERRNO_CODES.EINVAL;
      HEAP32[((list)>>2)]=0;
      return 1;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall205"] = ___syscall205;

  function ___syscall207(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchown32
      var fd = SYSCALLS.get(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.fchown(fd, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall207"] = ___syscall207;

  
  function ___syscall211(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getresgid32
      var ruid = SYSCALLS.get(), euid = SYSCALLS.get(), suid = SYSCALLS.get();
      HEAP32[((ruid)>>2)]=0;
      HEAP32[((euid)>>2)]=0;
      HEAP32[((suid)>>2)]=0;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall211"] = ___syscall211;function ___syscall209() {
  return ___syscall211.apply(null, arguments)
  }
  Module["___syscall209"] = ___syscall209;


  function ___syscall212(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall212"] = ___syscall212;

  function ___syscall218(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mincore
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall218"] = ___syscall218;

  function ___syscall219(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // madvise
      return 0; // advice is welcome, but ignored
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall219"] = ___syscall219;

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall220"] = ___syscall220;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall221"] = ___syscall221;

  function ___syscall268(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // statfs64
      var path = SYSCALLS.getStr(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      assert(size === 64);
      // NOTE: None of the constants here are true. We're just returning safe and
      //       sane values.
      HEAP32[(((buf)+(4))>>2)]=4096;
      HEAP32[(((buf)+(40))>>2)]=4096;
      HEAP32[(((buf)+(8))>>2)]=1000000;
      HEAP32[(((buf)+(12))>>2)]=500000;
      HEAP32[(((buf)+(16))>>2)]=500000;
      HEAP32[(((buf)+(20))>>2)]=FS.nextInode;
      HEAP32[(((buf)+(24))>>2)]=1000000;
      HEAP32[(((buf)+(28))>>2)]=42;
      HEAP32[(((buf)+(44))>>2)]=2;  // ST_NOSUID
      HEAP32[(((buf)+(36))>>2)]=255;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall268"] = ___syscall268;

  function ___syscall269(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatfs64
      var stream = SYSCALLS.getStreamFromFD(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      return ___syscall([268, 0, size, buf], 0);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall269"] = ___syscall269;

  function ___syscall272(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fadvise64_64
      return 0; // your advice is important to us (but we can't use it)
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall272"] = ___syscall272;

  function ___syscall29(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pause
      return -ERRNO_CODES.EINTR; // we can't pause
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall29"] = ___syscall29;

  function ___syscall295(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // openat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall295"] = ___syscall295;

  function ___syscall296(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdirat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall296"] = ___syscall296;

  function ___syscall297(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall297"] = ___syscall297;

  function ___syscall298(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchownat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall298"] = ___syscall298;

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall3"] = ___syscall3;

  function ___syscall300(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatat64
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), flags = SYSCALLS.get();
      var nofollow = flags & 256;
      flags = flags & (~256);
      assert(!flags, flags);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall300"] = ___syscall300;

  function ___syscall301(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      if (flags === 0) {
        FS.unlink(path);
      } else if (flags === 512) {
        FS.rmdir(path);
      } else {
        abort('Invalid flags passed to unlinkat');
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall301"] = ___syscall301;

  function ___syscall302(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // renameat
      var olddirfd = SYSCALLS.get(), oldpath = SYSCALLS.getStr(), newdirfd = SYSCALLS.get(), newpath = SYSCALLS.getStr();
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall302"] = ___syscall302;

  function ___syscall303(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // linkat
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall303"] = ___syscall303;

  function ___syscall304(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlinkat
      var target = SYSCALLS.get(), newdirfd = SYSCALLS.get(), linkpath = SYSCALLS.get();
      linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall304"] = ___syscall304;

  function ___syscall305(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall305"] = ___syscall305;

  function ___syscall306(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall306"] = ___syscall306;

  function ___syscall307(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // faccessat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), amode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall307"] = ___syscall307;

  function ___syscall308(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pselect
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall308"] = ___syscall308;

  function ___syscall320(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // utimensat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), times = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      var seconds = HEAP32[((times)>>2)];
      var nanoseconds = HEAP32[(((times)+(4))>>2)];
      var atime = (seconds*1000) + (nanoseconds/(1000*1000));
      times += 8;
      seconds = HEAP32[((times)>>2)];
      nanoseconds = HEAP32[(((times)+(4))>>2)];
      var mtime = (seconds*1000) + (nanoseconds/(1000*1000));
      FS.utime(path, atime, mtime);
      return 0;  
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall320"] = ___syscall320;

  function ___syscall324(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fallocate
      var stream = SYSCALLS.getStreamFromFD(), mode = SYSCALLS.get(), offset = SYSCALLS.get64(), len = SYSCALLS.get64();
      assert(mode === 0);
      FS.allocate(stream, offset, len);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall324"] = ___syscall324;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall33"] = ___syscall33;

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall330"] = ___syscall330;

  function ___syscall331(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe2
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall331"] = ___syscall331;

  function ___syscall333(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // preadv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall333"] = ___syscall333;

  function ___syscall334(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwritev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall334"] = ___syscall334;

  function ___syscall337(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // recvmmsg
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall337"] = ___syscall337;

  function ___syscall34(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // nice
      var inc = SYSCALLS.get();
      return -ERRNO_CODES.EPERM; // no meaning to nice for our single-process environment
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall34"] = ___syscall34;

  function ___syscall340(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // prlimit64
      var pid = SYSCALLS.get(), resource = SYSCALLS.get(), new_limit = SYSCALLS.get(), old_limit = SYSCALLS.get();
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall340"] = ___syscall340;

  function ___syscall345(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sendmmsg
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall345"] = ___syscall345;

  function ___syscall36(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sync
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall36"] = ___syscall36;

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall38"] = ___syscall38;

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall39"] = ___syscall39;

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall4"] = ___syscall4;

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall40"] = ___syscall40;

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall41"] = ___syscall41;

  
  var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function (mount) {
        // Do not pollute the real root directory or its child nodes with pipes
        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createPipe:function () {
        var pipe = {
          buckets: []
        };
  
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0
        });
  
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
  
        rNode.pipe = pipe;
        wNode.pipe = pipe;
  
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: FS.modeStringToFlags('r'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        rNode.stream = readableStream;
  
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: FS.modeStringToFlags('w'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        wNode.stream = writableStream;
  
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd
        };
      },stream_ops:{poll:function (stream) {
          var pipe = stream.node.pipe;
  
          if ((stream.flags & 2097155) === 1) {
            return (256 | 4);
          } else {
            if (pipe.buckets.length > 0) {
              for (var i = 0; i < pipe.buckets.length; i++) {
                var bucket = pipe.buckets[i];
                if (bucket.offset - bucket.roffset > 0) {
                  return (64 | 1);
                }
              }
            }
          }
  
          return 0;
        },ioctl:function (stream, request, varargs) {
          return ERRNO_CODES.EINVAL;
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            // Behave as if the read end is always non-blocking
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          var toRead = Math.min(currentLength, length);
  
          var totalRead = toRead;
          var toRemove = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
  
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
  
          if (toRemove && toRemove == pipe.buckets.length) {
            // Do not generate excessive garbage in use cases such as
            // write several bytes, read everything, write several bytes, read everything...
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
  
          pipe.buckets.splice(0, toRemove);
  
          return totalRead;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
  
          var currBucket = null;
  
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
  
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
  
          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
  
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
  
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
  
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
  
          return dataLen;
        },close:function (stream) {
          var pipe = stream.node.pipe;
          pipe.buckets = null;
        }},nextname:function () {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return 'pipe[' + (PIPEFS.nextname.current++) + ']';
      }};
  Module["PIPEFS"] = PIPEFS;function ___syscall42(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe
      var fdPtr = SYSCALLS.get();
  
      if (fdPtr == 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EFAULT);
      }
  
      var res = PIPEFS.createPipe();
  
      HEAP32[((fdPtr)>>2)]=res.readable_fd;
      HEAP32[(((fdPtr)+(4))>>2)]=res.writable_fd;
  
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall42"] = ___syscall42;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall5"] = ___syscall5;

  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall51"] = ___syscall51;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall54"] = ___syscall54;

  function ___syscall57(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpgid
      var pid = SYSCALLS.get(), pgid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      if (pgid && pgid !== PROCINFO.pgid) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall57"] = ___syscall57;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall6"] = ___syscall6;

  function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall60"] = ___syscall60;

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall63"] = ___syscall63;

  function ___syscall64(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getppid
      return PROCINFO.ppid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall64"] = ___syscall64;

  function ___syscall66(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setsid
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall66"] = ___syscall66;

  function ___syscall75(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setrlimit
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall75"] = ___syscall75;

  function ___syscall77(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getrusage
      var who = SYSCALLS.get(), usage = SYSCALLS.get();
      _memset(usage, 0, 136);
      HEAP32[((usage)>>2)]=1; // fake some values
      HEAP32[(((usage)+(4))>>2)]=2;
      HEAP32[(((usage)+(8))>>2)]=3;
      HEAP32[(((usage)+(12))>>2)]=4;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall77"] = ___syscall77;

  function ___syscall83(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlink
      var target = SYSCALLS.getStr(), linkpath = SYSCALLS.getStr();
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall83"] = ___syscall83;

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall85"] = ___syscall85;

  function ___syscall9(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // link
      var oldpath = SYSCALLS.get(), newpath = SYSCALLS.get();
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall9"] = ___syscall9;

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall91"] = ___syscall91;

  function ___syscall94(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmod
      var fd = SYSCALLS.get(), mode = SYSCALLS.get();
      FS.fchmod(fd, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall94"] = ___syscall94;

  function ___syscall96(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpriority
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall96"] = ___syscall96;

  function ___syscall97(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpriority
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall97"] = ___syscall97;

   

  function ___unlock() {}
  Module["___unlock"] = ___unlock;

  function ___wait() {}
  Module["___wait"] = ___wait;

  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }
  Module["__exit"] = __exit;

  function _abort() {
      Module['abort']();
    }
  Module["_abort"] = _abort;

   

   

   


  function _endgrent() {
  return Module['_endgrent'].apply(null, arguments);
  }

  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }
  Module["_execl"] = _execl;

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }
  Module["_fork"] = _fork;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;
  Module["_environ"] = _environ;var ___environ=_environ;
  Module["___environ"] = ___environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }
  Module["___buildEnvironment"] = ___buildEnvironment;var ENV={};
  Module["ENV"] = ENV;function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }
  Module["_getenv"] = _getenv;

  function _getgrent() {
  return Module['_getgrent'].apply(null, arguments);
  }

  function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
      var info = __read_sockaddr(sa, salen);
      if (info.errno) {
        return -6;
      }
      var port = info.port;
      var addr = info.addr;
  
      var overflowed = false;
  
      if (node && nodelen) {
        var lookup;
        if ((flags & 1) || !(lookup = DNS.lookup_addr(addr))) {
          if (flags & 8) {
            return -2;
          }
        } else {
          addr = lookup;
        }
        var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);
  
        if (numBytesWrittenExclNull+1 >= nodelen) {
          overflowed = true;
        }
      }
  
      if (serv && servlen) {
        port = '' + port;
        var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);
  
        if (numBytesWrittenExclNull+1 >= servlen) {
          overflowed = true;
        }
      }
  
      if (overflowed) {
        // Note: even when we overflow, getnameinfo() is specced to write out the truncated results.
        return -12;
      }
  
      return 0;
    }
  Module["_getnameinfo"] = _getnameinfo;

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  Module["___tm_timezone"] = ___tm_timezone;function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }
  Module["_gmtime_r"] = _gmtime_r;



  function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(Pointer_stringify(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }
  Module["_inet_addr"] = _inet_addr;

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  Module["_kill"] = _kill;

   

   

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;
  Module["_llvm_nacl_atomic_cmpxchg_i32"] = _llvm_nacl_atomic_cmpxchg_i32;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }
  Module["_llvm_stackrestore"] = _llvm_stackrestore;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }
  Module["_llvm_stacksave"] = _llvm_stacksave;

  function _llvm_trap() {
      abort('trap!');
    }
  Module["_llvm_trap"] = _llvm_trap;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big; 

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }
  Module["_nanosleep"] = _nanosleep;

  function _posix_spawn() {
  return _fork.apply(null, arguments)
  }
  Module["_posix_spawn"] = _posix_spawn;

  function _posix_spawn_file_actions_adddup2() {
  return Module['_posix_spawn_file_actions_adddup2'].apply(null, arguments);
  }

  function _posix_spawn_file_actions_destroy() {
  return Module['_posix_spawn_file_actions_destroy'].apply(null, arguments);
  }

  function _posix_spawn_file_actions_init() {
  return Module['_posix_spawn_file_actions_init'].apply(null, arguments);
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_pop"] = _pthread_cleanup_pop;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Module['dynCall_vi'](routine, arg) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_push"] = _pthread_cleanup_push;

   

  function _pthread_cond_destroy() { return 0; }
  Module["_pthread_cond_destroy"] = _pthread_cond_destroy;

  function _pthread_cond_signal() { return 0; }
  Module["_pthread_cond_signal"] = _pthread_cond_signal;

  function _pthread_cond_timedwait() { return 0; }
  Module["_pthread_cond_timedwait"] = _pthread_cond_timedwait;

  function _pthread_cond_wait() { return 0; }
  Module["_pthread_cond_wait"] = _pthread_cond_wait;

  function _pthread_detach() {}
  Module["_pthread_detach"] = _pthread_detach;

  function _pthread_equal(x, y) { return x == y }
  Module["_pthread_equal"] = _pthread_equal;

  
  var PTHREAD_SPECIFIC={};
  Module["PTHREAD_SPECIFIC"] = PTHREAD_SPECIFIC;function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }
  Module["_pthread_getspecific"] = _pthread_getspecific;

  function _pthread_join() {}
  Module["_pthread_join"] = _pthread_join;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  Module["PTHREAD_SPECIFIC_NEXT_KEY"] = PTHREAD_SPECIFIC_NEXT_KEY;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }
  Module["_pthread_key_create"] = _pthread_key_create;

  function _pthread_mutex_destroy() {}
  Module["_pthread_mutex_destroy"] = _pthread_mutex_destroy;

  function _pthread_mutex_init() {}
  Module["_pthread_mutex_init"] = _pthread_mutex_init;

   

   

   

  function _pthread_mutexattr_destroy() {}
  Module["_pthread_mutexattr_destroy"] = _pthread_mutexattr_destroy;

  function _pthread_mutexattr_init() {}
  Module["_pthread_mutexattr_init"] = _pthread_mutexattr_init;

  function _pthread_mutexattr_settype() {}
  Module["_pthread_mutexattr_settype"] = _pthread_mutexattr_settype;

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }
  Module["_pthread_once"] = _pthread_once;

  function _pthread_setcancelstate() { return 0; }
  Module["_pthread_setcancelstate"] = _pthread_setcancelstate;

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }
  Module["_pthread_setspecific"] = _pthread_setspecific;

  function _pthread_sigmask() {
  return Module['_pthread_sigmask'].apply(null, arguments);
  }

  function _res_query() {
  return Module['_res_query'].apply(null, arguments);
  }

  
    


   

   

  function _sched_yield() {
      return 0;
    }
  Module["_sched_yield"] = _sched_yield;

  function _setgrent() {
  return Module['_setgrent'].apply(null, arguments);
  }

  
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2*1024*1024*1024 - 65536;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  Module["_sysconf"] = _sysconf;function _setgroups(ngroups, gidset) {
      // int setgroups(int ngroups, const gid_t *gidset);
      // https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man2/setgroups.2.html
      if (ngroups < 1 || ngroups > _sysconf(3)) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        // We have just one process/user/group, so it makes no sense to set groups.
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
    }
  Module["_setgroups"] = _setgroups;

  function _setitimer() {
      throw 'setitimer() is not implemented yet';
    }
  Module["_setitimer"] = _setitimer;

  function _sigfillset(set) {
      HEAP32[((set)>>2)]=-1>>>0;
      return 0;
    }
  Module["_sigfillset"] = _sigfillset;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  Module["__isLeapYear"] = __isLeapYear;
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  Module["__arraySum"] = __arraySum;
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_LEAP"] = __MONTH_DAYS_LEAP;
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_REGULAR"] = __MONTH_DAYS_REGULAR;function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  Module["__addDays"] = __addDays;function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  Module["_strftime"] = _strftime;

  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
  Module["_strftime_l"] = _strftime_l;


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
  Module["_time"] = _time;

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }
  Module["_wait"] = _wait;function _waitpid() {
  return _wait.apply(null, arguments)
  }
  Module["_waitpid"] = _waitpid;





  var __impure_ptr=STATICTOP; STATICTOP += 16;;
  Module["__impure_ptr"] = __impure_ptr;

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
  Module["___dso_handle"] = ___dso_handle;



  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  Module["_utime"] = _utime;


  function _utimes(path, times) {
      var time;
      if (times) {
        var offset = 8 + 0;
        time = HEAP32[(((times)+(offset))>>2)] * 1000;
        offset = 8 + 4;
        time += HEAP32[(((times)+(offset))>>2)] / 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  Module["_utimes"] = _utimes;

  function _flock(fd, operation) {
      // int flock(int fd, int operation);
      // Pretend to succeed
      return 0;
    }
  Module["_flock"] = _flock;


  function _chroot(path) {
      // int chroot(const char *path);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chroot.html
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
  Module["_chroot"] = _chroot;


  function _fpathconf(fildes, name) {
      // long fpathconf(int fildes, int name);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/encrypt.html
      // NOTE: The first parameter is ignored, so pathconf == fpathconf.
      // The constants here aren't real values. Just mimicking glibc.
      switch (name) {
        case 0:
          return 32000;
        case 1:
        case 2:
        case 3:
          return 255;
        case 4:
        case 5:
        case 16:
        case 17:
        case 18:
          return 4096;
        case 6:
        case 7:
        case 20:
          return 1;
        case 8:
          return 0;
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 19:
          return -1;
        case 13:
          return 64;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  Module["_fpathconf"] = _fpathconf;

  function _pathconf() {
  return _fpathconf.apply(null, arguments)
  }
  Module["_pathconf"] = _pathconf;


  function _confstr(name, buf, len) {
      // size_t confstr(int name, char *buf, size_t len);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/confstr.html
      var value;
      switch (name) {
        case 0:
          value = ENV['PATH'] || '/';
          break;
        case 1:
          // Mimicking glibc.
          value = 'POSIX_V6_ILP32_OFF32\nPOSIX_V6_ILP32_OFFBIG';
          break;
        case 2:
          // This JS implementation was tested against this glibc version.
          value = 'glibc 2.14';
          break;
        case 3:
          // We don't support pthreads.
          value = '';
          break;
        case 1118:
        case 1122:
        case 1124:
        case 1125:
        case 1126:
        case 1128:
        case 1129:
        case 1130:
          value = '';
          break;
        case 1116:
        case 1117:
        case 1121:
          value = '-m32';
          break;
        case 1120:
          value = '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return 0;
      }
      if (len == 0 || buf == 0) {
        return value.length + 1;
      } else {
        var length = Math.min(len, value.length);
        for (var i = 0; i < length; i++) {
          HEAP8[(((buf)+(i))>>0)]=value.charCodeAt(i);
        }
        if (len > length) HEAP8[(((buf)+(i++))>>0)]=0;
        return i;
      }
    }
  Module["_confstr"] = _confstr;


  function _execle() {
  return _execl.apply(null, arguments)
  }
  Module["_execle"] = _execle;

  function _execlp() {
  return _execl.apply(null, arguments)
  }
  Module["_execlp"] = _execlp;

  function _execv() {
  return _execl.apply(null, arguments)
  }
  Module["_execv"] = _execv;

  function _execve() {
  return _execl.apply(null, arguments)
  }
  Module["_execve"] = _execve;

  function _execvp() {
  return _execl.apply(null, arguments)
  }
  Module["_execvp"] = _execvp;

  function ___execvpe() {
  return _execl.apply(null, arguments)
  }
  Module["___execvpe"] = ___execvpe;

  function _fexecve() {
  return _execl.apply(null, arguments)
  }
  Module["_fexecve"] = _fexecve;



  function _vfork() {
  return _fork.apply(null, arguments)
  }
  Module["_vfork"] = _vfork;


  function _posix_spawnp() {
  return _fork.apply(null, arguments)
  }
  Module["_posix_spawnp"] = _posix_spawnp;


  function _getpagesize() {
      // int getpagesize(void);
      return PAGE_SIZE;
    }
  Module["_getpagesize"] = _getpagesize;




   

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }
  Module["_system"] = _system;



  var _abs=Math_abs;
  Module["_abs"] = _abs;


  function _exit(status) {
      __exit(status);
    }
  Module["_exit"] = _exit;

  function __Exit(status) {
      __exit(status);
    }
  Module["__Exit"] = __Exit;



  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  Module["_atexit"] = _atexit;

  function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }
  Module["___cxa_atexit"] = ___cxa_atexit;

  function ___cxa_thread_atexit() {
  return _atexit.apply(null, arguments)
  }
  Module["___cxa_thread_atexit"] = ___cxa_thread_atexit;

  function ___cxa_thread_atexit_impl() {
  return _atexit.apply(null, arguments)
  }
  Module["___cxa_thread_atexit_impl"] = ___cxa_thread_atexit_impl;









  function _clearenv() {
      // int clearenv (void);
      // http://www.gnu.org/s/hello/manual/libc/Environment-Access.html#index-clearenv-3107
      ENV = {};
      ___buildEnvironment(ENV);
      return 0;
    }
  Module["_clearenv"] = _clearenv;


  function _setenv(envname, envval, overwrite) {
      // int setenv(const char *envname, const char *envval, int overwrite);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/setenv.html
      if (envname === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = Pointer_stringify(envname);
      var val = Pointer_stringify(envval);
      if (name === '' || name.indexOf('=') !== -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      if (ENV.hasOwnProperty(name) && !overwrite) return 0;
      ENV[name] = val;
      ___buildEnvironment(ENV);
      return 0;
    }
  Module["_setenv"] = _setenv;


  function _unsetenv(name) {
      // int unsetenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/unsetenv.html
      if (name === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      name = Pointer_stringify(name);
      if (name === '' || name.indexOf('=') !== -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      if (ENV.hasOwnProperty(name)) {
        delete ENV[name];
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  Module["_unsetenv"] = _unsetenv;


  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  Module["_putenv"] = _putenv;

  function _getloadavg(loadavg, nelem) {
      // int getloadavg(double loadavg[], int nelem);
      // http://linux.die.net/man/3/getloadavg
      var limit = Math.min(nelem, 3);
      var doubleSize = 8;
      for (var i = 0; i < limit; i++) {
        HEAPF64[(((loadavg)+(i * doubleSize))>>3)]=0.1;
      }
      return limit;
    }
  Module["_getloadavg"] = _getloadavg;

  function _arc4random() {
  return _rand.apply(null, arguments)
  }
  Module["_arc4random"] = _arc4random;



  var _llvm_memcpy_i32=_memcpy;
  Module["_llvm_memcpy_i32"] = _llvm_memcpy_i32;

  var _llvm_memcpy_i64=_memcpy;
  Module["_llvm_memcpy_i64"] = _llvm_memcpy_i64;

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  Module["_llvm_memcpy_p0i8_p0i8_i32"] = _llvm_memcpy_p0i8_p0i8_i32;

  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;
  Module["_llvm_memcpy_p0i8_p0i8_i64"] = _llvm_memcpy_p0i8_p0i8_i64;


  var _llvm_memmove_i32=_memmove;
  Module["_llvm_memmove_i32"] = _llvm_memmove_i32;

  var _llvm_memmove_i64=_memmove;
  Module["_llvm_memmove_i64"] = _llvm_memmove_i64;

  var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  Module["_llvm_memmove_p0i8_p0i8_i32"] = _llvm_memmove_p0i8_p0i8_i32;

  var _llvm_memmove_p0i8_p0i8_i64=_memmove;
  Module["_llvm_memmove_p0i8_p0i8_i64"] = _llvm_memmove_p0i8_p0i8_i64;


  var _llvm_memset_i32=_memset;
  Module["_llvm_memset_i32"] = _llvm_memset_i32;

  var _llvm_memset_p0i8_i32=_memset;
  Module["_llvm_memset_p0i8_i32"] = _llvm_memset_p0i8_i32;

  var _llvm_memset_p0i8_i64=_memset;
  Module["_llvm_memset_p0i8_i64"] = _llvm_memset_p0i8_i64;

  function ___builtin_prefetch(){}
  Module["___builtin_prefetch"] = ___builtin_prefetch;

  function _llvm_va_end() {}
  Module["_llvm_va_end"] = _llvm_va_end;

  function _llvm_va_copy(ppdest, ppsrc) {
      // copy the list start
      HEAP8[((ppdest)>>0)]=HEAP8[((ppsrc)>>0)];HEAP8[(((ppdest)+(1))>>0)]=HEAP8[(((ppsrc)+(1))>>0)];HEAP8[(((ppdest)+(2))>>0)]=HEAP8[(((ppsrc)+(2))>>0)];HEAP8[(((ppdest)+(3))>>0)]=HEAP8[(((ppsrc)+(3))>>0)];
      
      // copy the list's current offset (will be advanced with each call to va_arg)
      HEAP8[((ppdest+4)>>0)]=HEAP8[((ppsrc+4)>>0)];HEAP8[(((ppdest+4)+(1))>>0)]=HEAP8[(((ppsrc+4)+(1))>>0)];HEAP8[(((ppdest+4)+(2))>>0)]=HEAP8[(((ppsrc+4)+(2))>>0)];HEAP8[(((ppdest+4)+(3))>>0)]=HEAP8[(((ppsrc+4)+(3))>>0)];
    }
  Module["_llvm_va_copy"] = _llvm_va_copy;



  function _llvm_bswap_i64(l, h) {
      var retl = _llvm_bswap_i32(h)>>>0;
      var reth = _llvm_bswap_i32(l)>>>0;
      return ((setTempRet0(reth),retl)|0);
    }
  Module["_llvm_bswap_i64"] = _llvm_bswap_i64;

   

   

   


  function _llvm_cttz_i64(l, h) {
      var ret = _llvm_cttz_i32(l);
      if (ret == 32) ret += _llvm_cttz_i32(h);
      return ((setTempRet0(0),ret)|0);
    }
  Module["_llvm_cttz_i64"] = _llvm_cttz_i64;

   

   


  function _llvm_prefetch(){}
  Module["_llvm_prefetch"] = _llvm_prefetch;


  function ___assert_func(filename, line, func, condition) {
      abort('Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }
  Module["___assert_func"] = ___assert_func;








  function _llvm_eh_exception() {
      return EXCEPTIONS.last;
    }
  Module["_llvm_eh_exception"] = _llvm_eh_exception;

  var _llvm_eh_selector__jsargs=true;
  Module["_llvm_eh_selector__jsargs"] = _llvm_eh_selector__jsargs;

  function _llvm_eh_selector(unused_exception_value, personality/*, varargs*/) {
      var type = EXCEPTIONS.last;
      for (var i = 2; i < arguments.length; i++) {
        if (arguments[i] ==  type) return type;
      }
      return 0;
    }
  Module["_llvm_eh_selector"] = _llvm_eh_selector;

  function _llvm_eh_typeid_for(type) {
      return type;
    }
  Module["_llvm_eh_typeid_for"] = _llvm_eh_typeid_for;



  function ___cxa_get_exception_ptr(ptr) {
      // TODO: use info.adjusted?
      return ptr;
    }
  Module["___cxa_get_exception_ptr"] = ___cxa_get_exception_ptr;


  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  Module["___cxa_uncaught_exception"] = ___cxa_uncaught_exception;

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  Module["___cxa_call_unexpected"] = ___cxa_call_unexpected;



  function _terminate() {
  return ___cxa_call_unexpected.apply(null, arguments)
  }
  Module["_terminate"] = _terminate;


  function ___gcc_personality_v0() {
    }
  Module["___gcc_personality_v0"] = ___gcc_personality_v0;






  function _llvm_flt_rounds() {
      return -1; // 'indeterminable' for FLT_ROUNDS
    }
  Module["_llvm_flt_rounds"] = _llvm_flt_rounds;

  function _llvm_objectsize_i32() { return -1 }
  Module["_llvm_objectsize_i32"] = _llvm_objectsize_i32;

   

  function _llvm_mono_load_i8_p0i8(ptr) {
      return HEAP8[((ptr)>>0)];
    }
  Module["_llvm_mono_load_i8_p0i8"] = _llvm_mono_load_i8_p0i8;

  function _llvm_mono_store_i8_p0i8(value, ptr) {
      HEAP8[((ptr)>>0)]=value;
    }
  Module["_llvm_mono_store_i8_p0i8"] = _llvm_mono_store_i8_p0i8;

  function _llvm_mono_load_i16_p0i16(ptr) {
      return HEAP16[((ptr)>>1)];
    }
  Module["_llvm_mono_load_i16_p0i16"] = _llvm_mono_load_i16_p0i16;

  function _llvm_mono_store_i16_p0i16(value, ptr) {
      HEAP16[((ptr)>>1)]=value;
    }
  Module["_llvm_mono_store_i16_p0i16"] = _llvm_mono_store_i16_p0i16;

  function _llvm_mono_load_i32_p0i32(ptr) {
      return HEAP32[((ptr)>>2)];
    }
  Module["_llvm_mono_load_i32_p0i32"] = _llvm_mono_load_i32_p0i32;

  function _llvm_mono_store_i32_p0i32(value, ptr) {
      HEAP32[((ptr)>>2)]=value;
    }
  Module["_llvm_mono_store_i32_p0i32"] = _llvm_mono_store_i32_p0i32;




























  var _sqrt=Math_sqrt;
  Module["_sqrt"] = _sqrt;

  var _sqrtf=Math_sqrt;
  Module["_sqrtf"] = _sqrtf;

  var _sqrtl=Math_sqrt;
  Module["_sqrtl"] = _sqrtl;

  var _fabs=Math_abs;
  Module["_fabs"] = _fabs;

  var _fabsf=Math_abs;
  Module["_fabsf"] = _fabsf;

  var _fabsl=Math_abs;
  Module["_fabsl"] = _fabsl;

  var _llvm_fabs_f32=Math_abs;
  Module["_llvm_fabs_f32"] = _llvm_fabs_f32;

  var _llvm_fabs_f64=Math_abs;
  Module["_llvm_fabs_f64"] = _llvm_fabs_f64;

  var _ceil=Math_ceil;
  Module["_ceil"] = _ceil;

  var _ceilf=Math_ceil;
  Module["_ceilf"] = _ceilf;

  var _ceill=Math_ceil;
  Module["_ceill"] = _ceill;

  var _floor=Math_floor;
  Module["_floor"] = _floor;

  var _floorf=Math_floor;
  Module["_floorf"] = _floorf;

  var _floorl=Math_floor;
  Module["_floorl"] = _floorl;




  var _llvm_sqrt_f32=Math_sqrt;
  Module["_llvm_sqrt_f32"] = _llvm_sqrt_f32;

  var _llvm_sqrt_f64=Math_sqrt;
  Module["_llvm_sqrt_f64"] = _llvm_sqrt_f64;

  var _llvm_pow_f32=Math_pow;
  Module["_llvm_pow_f32"] = _llvm_pow_f32;

  var _llvm_pow_f64=Math_pow;
  Module["_llvm_pow_f64"] = _llvm_pow_f64;

  var _llvm_powi_f32=Math_pow;
  Module["_llvm_powi_f32"] = _llvm_powi_f32;

  var _llvm_powi_f64=Math_pow;
  Module["_llvm_powi_f64"] = _llvm_powi_f64;

  var _llvm_log_f32=Math_log;
  Module["_llvm_log_f32"] = _llvm_log_f32;

  var _llvm_log_f64=Math_log;
  Module["_llvm_log_f64"] = _llvm_log_f64;

  var _llvm_exp_f32=Math_exp;
  Module["_llvm_exp_f32"] = _llvm_exp_f32;

  var _llvm_exp_f64=Math_exp;
  Module["_llvm_exp_f64"] = _llvm_exp_f64;

  var _llvm_cos_f32=Math_cos;
  Module["_llvm_cos_f32"] = _llvm_cos_f32;

  var _llvm_cos_f64=Math_cos;
  Module["_llvm_cos_f64"] = _llvm_cos_f64;

  var _llvm_sin_f32=Math_sin;
  Module["_llvm_sin_f32"] = _llvm_sin_f32;

  var _llvm_sin_f64=Math_sin;
  Module["_llvm_sin_f64"] = _llvm_sin_f64;

  var _llvm_trunc_f32=Math_trunc;
  Module["_llvm_trunc_f32"] = _llvm_trunc_f32;

  var _llvm_trunc_f64=Math_trunc;
  Module["_llvm_trunc_f64"] = _llvm_trunc_f64;

  var _llvm_ceil_f32=Math_ceil;
  Module["_llvm_ceil_f32"] = _llvm_ceil_f32;

  var _llvm_ceil_f64=Math_ceil;
  Module["_llvm_ceil_f64"] = _llvm_ceil_f64;

  var _llvm_floor_f32=Math_floor;
  Module["_llvm_floor_f32"] = _llvm_floor_f32;

  var _llvm_floor_f64=Math_floor;
  Module["_llvm_floor_f64"] = _llvm_floor_f64;

  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }
  Module["_llvm_exp2_f32"] = _llvm_exp2_f32;

  function _llvm_exp2_f64() {
  return _llvm_exp2_f32.apply(null, arguments)
  }
  Module["_llvm_exp2_f64"] = _llvm_exp2_f64;

  function _llvm_log2_f32(x) {
      return Math.log(x) / Math.LN2; // TODO: Math.log2, when browser support is there
    }
  Module["_llvm_log2_f32"] = _llvm_log2_f32;

  function _llvm_log2_f64() {
  return _llvm_log2_f32.apply(null, arguments)
  }
  Module["_llvm_log2_f64"] = _llvm_log2_f64;

  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }
  Module["_llvm_log10_f32"] = _llvm_log10_f32;

  function _llvm_log10_f64() {
  return _llvm_log10_f32.apply(null, arguments)
  }
  Module["_llvm_log10_f64"] = _llvm_log10_f64;

  function _llvm_copysign_f32(x, y) {
      return y < 0 || (y === 0 && 1/y < 0) ? -Math_abs(x) : Math_abs(x);
    }
  Module["_llvm_copysign_f32"] = _llvm_copysign_f32;

  function _llvm_copysign_f64(x, y) {
      return y < 0 || (y === 0 && 1/y < 0) ? -Math_abs(x) : Math_abs(x);
    }
  Module["_llvm_copysign_f64"] = _llvm_copysign_f64;



   

   


   

   

   

   

   

   

   

   

  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }
  Module["__reallyNegative"] = __reallyNegative;

  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};
  Module["DLFCN"] = DLFCN;


  function _dlopen(filename, flag) {
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      var searchpaths = [];
      if (filename === 0) {
        filename = '__self__';
      } else {
        var strfilename = Pointer_stringify(filename);
        var isValidFile = function (filename) {
          var target = FS.findObject(filename);
          return target && !target.isFolder && !target.isDevice;
        };
  
        if (isValidFile(strfilename)) {
          filename = strfilename;
        } else {
          if (ENV['LD_LIBRARY_PATH']) {
            searchpaths = ENV['LD_LIBRARY_PATH'].split(':');
          }
  
          for (var ident in searchpaths) {
            var searchfile = PATH.join2(searchpaths[ident],strfilename);
            if (isValidFile(searchfile)) {
              filename = searchfile;
              break;
            }
          }
        }
      }
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        }
        FS.forceLoadFile(target);
  
        var lib_module;
        try {
          // the shared library is a shared wasm library (see tools/shared.py WebAssembly.make_shared_library)
          var lib_data = FS.readFile(filename, { encoding: 'binary' });
          if (!(lib_data instanceof Uint8Array)) lib_data = new Uint8Array(lib_data);
          //Module.printErr('libfile ' + filename + ' size: ' + lib_data.length);
          lib_module = loadWebAssemblyModule(lib_data);
        } catch (e) {
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename + '\n' + e;
          console.log(DLFCN.errorMsg);
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              // When RTLD_GLOBAL is enable, the symbols defined by this shared object will be made
              // available for symbol resolution of subsequently loaded shared objects.
              //
              // We should copy the symbols (which include methods and variables) from SIDE_MODULE to MAIN_MODULE.
              //
              // Module of SIDE_MODULE has not only the symbols (which should be copied)
              // but also others (print*, asmGlobal*, FUNCTION_TABLE_**, NAMED_GLOBALS, and so on).
              //
              // When the symbol (which should be copied) is method, Module._* 's type becomes function.
              // When the symbol (which should be copied) is variable, Module._* 's type becomes number.
              //
              // Except for the symbol prefix (_), there is no difference in the symbols (which should be copied) and others.
              // So this just copies over compiled symbols (which start with _).
              if (ident[0] == '_') {
                Module[ident] = lib_module[ident];
              }
            }
          }
        }
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }
  Module["_dlopen"] = _dlopen;


  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }
  Module["_dlclose"] = _dlclose;


  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
      console.log('dlsym: symbol:' + symbol);
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        console.log(DLFCN.errorMsg);
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          console.log(DLFCN.errorMsg);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result === 'function') {
  // #if EMULATE_FUNCTION_POINTER_CASTS
  //           // for wasm with emulated function pointers, the i64 ABI is used for all
  //           // function calls, so we can't just call addFunction on something JS
  //           // can call (which does not use that ABI), as the function pointer would
  //           // not be usable from wasm. instead, the wasm has exported function pointers
  //           // for everything we need, with prefix fp$, use those
  //           result = lib.module['fp$' + symbol];
  //           if (typeof result === 'object') {
  //             // a breaking change in the wasm spec, globals are now objects
  //             // https://github.com/WebAssembly/mutable-global/issues/1
  //             result = result.value;
  //           }
  // #if ASSERTIONS
  //           assert(typeof result === 'number', 'could not find function pointer for ' + symbol);
  // #endif // ASSERTIONS
  //           return result;
  // #endif // EMULATE_FUNCTION_POINTER_CASTS
            // convert the exported function into a function pointer using our generic
            // JS mechanism.
            console.log('dlsym: +addFunction:' + result);
            return addFunction(result);
          }
          return result;
        }
      }
    }
  Module["_dlsym"] = _dlsym;


  function _dlerror() {
      // char *dlerror(void);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
      if (DLFCN.errorMsg === null) {
        return 0;
      } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, 'i8', ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error;
      }
    }
  Module["_dlerror"] = _dlerror;


  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((info)>>2)]=fname;
      HEAP32[(((info)+(4))>>2)]=0;
      HEAP32[(((info)+(8))>>2)]=0;
      HEAP32[(((info)+(12))>>2)]=0;
      return 1;
    }
  Module["_dladdr"] = _dladdr;

  function _getpwuid(uid) {
      return 0; // NULL
    }
  Module["_getpwuid"] = _getpwuid;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }
  Module["_clock"] = _clock;


  function _difftime(time1, time0) {
      return time1 - time0;
    }
  Module["_difftime"] = _difftime;

  var ___tm_current=STATICTOP; STATICTOP += 48;;
  Module["___tm_current"] = ___tm_current;


  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  Module["___tm_formatted"] = ___tm_formatted;

  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }
  Module["_tzset"] = _tzset;function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }
  Module["_mktime"] = _mktime;

  function _timelocal() {
  return _mktime.apply(null, arguments)
  }
  Module["_timelocal"] = _timelocal;

  function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }
  Module["_gmtime"] = _gmtime;


  function _timegm(tmPtr) {
      _tzset();
      var time = Date.UTC(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
      var date = new Date(time);
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }
  Module["_timegm"] = _timegm;

  
  function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  Module["_localtime_r"] = _localtime_r;function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  Module["_localtime"] = _localtime;


  
  function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }
  Module["_asctime_r"] = _asctime_r;function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }
  Module["_asctime"] = _asctime;


  
  function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }
  Module["_ctime_r"] = _ctime_r;function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }
  Module["_ctime"] = _ctime;


  function _dysize(year) {
      var leap = ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)));
      return leap ? 366 : 365;
    }
  Module["_dysize"] = _dysize;



  function _stime(when) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  Module["_stime"] = _stime;









  function _strptime(buf, format, tm) {
      // char *strptime(const char *restrict buf, const char *restrict format, struct tm *restrict tm);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html
      var pattern = Pointer_stringify(format);
  
      // escape special characters
      // TODO: not sure we really need to escape all of these in JS regexps
      var SPECIAL_CHARS = '\\!@#$^&*()+=-[]/{}|:<>?,.';
      for (var i=0, ii=SPECIAL_CHARS.length; i<ii; ++i) {
        pattern = pattern.replace(new RegExp('\\'+SPECIAL_CHARS[i], 'g'), '\\'+SPECIAL_CHARS[i]);
      }
  
      // reduce number of matchers
      var EQUIVALENT_MATCHERS = {
        '%A':  '%a',
        '%B':  '%b',
        '%c':  '%x\\s+%X',
        '%D':  '%m\\/%d\\/%y',
        '%e':  '%d',
        '%F':  '%Y-%m-%d',
        '%h':  '%b',
        '%R':  '%H\\:%M',
        '%r':  '%I\\:%M\\:%S\\s%p',
        '%T':  '%H\\:%M\\:%S',
        '%x':  '%m\\/%d\\/(?:%y|%Y)',
        '%X':  '%H\\:%M\\:%S'
      };
      for (var matcher in EQUIVALENT_MATCHERS) {
        pattern = pattern.replace(matcher, EQUIVALENT_MATCHERS[matcher]);
      }
      
      // TODO: take care of locale
  
      var DATE_PATTERNS = {
        /* weeday name */     '%a': '(?:Sun(?:day)?)|(?:Mon(?:day)?)|(?:Tue(?:sday)?)|(?:Wed(?:nesday)?)|(?:Thu(?:rsday)?)|(?:Fri(?:day)?)|(?:Sat(?:urday)?)',
        /* month name */      '%b': '(?:Jan(?:uary)?)|(?:Feb(?:ruary)?)|(?:Mar(?:ch)?)|(?:Apr(?:il)?)|May|(?:Jun(?:e)?)|(?:Jul(?:y)?)|(?:Aug(?:ust)?)|(?:Sep(?:tember)?)|(?:Oct(?:ober)?)|(?:Nov(?:ember)?)|(?:Dec(?:ember)?)',
        /* century */         '%C': '\\d\\d',
        /* day of month */    '%d': '0[1-9]|[1-9](?!\\d)|1\\d|2\\d|30|31',
        /* hour (24hr) */     '%H': '\\d(?!\\d)|[0,1]\\d|20|21|22|23',
        /* hour (12hr) */     '%I': '\\d(?!\\d)|0\\d|10|11|12',
        /* day of year */     '%j': '00[1-9]|0?[1-9](?!\\d)|0?[1-9]\\d(?!\\d)|[1,2]\\d\\d|3[0-6]\\d',
        /* month */           '%m': '0[1-9]|[1-9](?!\\d)|10|11|12',
        /* minutes */         '%M': '0\\d|\\d(?!\\d)|[1-5]\\d',
        /* whitespace */      '%n': '\\s',
        /* AM/PM */           '%p': 'AM|am|PM|pm|A\\.M\\.|a\\.m\\.|P\\.M\\.|p\\.m\\.',
        /* seconds */         '%S': '0\\d|\\d(?!\\d)|[1-5]\\d|60',
        /* week number */     '%U': '0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53',
        /* week number */     '%W': '0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53',
        /* weekday number */  '%w': '[0-6]',
        /* 2-digit year */    '%y': '\\d\\d',
        /* 4-digit year */    '%Y': '\\d\\d\\d\\d',
        /* % */               '%%': '%',
        /* whitespace */      '%t': '\\s',
      };
  
      var MONTH_NUMBERS = {JAN: 0, FEB: 1, MAR: 2, APR: 3, MAY: 4, JUN: 5, JUL: 6, AUG: 7, SEP: 8, OCT: 9, NOV: 10, DEC: 11};
      var DAY_NUMBERS_SUN_FIRST = {SUN: 0, MON: 1, TUE: 2, WED: 3, THU: 4, FRI: 5, SAT: 6};
      var DAY_NUMBERS_MON_FIRST = {MON: 0, TUE: 1, WED: 2, THU: 3, FRI: 4, SAT: 5, SUN: 6};
  
      for (var datePattern in DATE_PATTERNS) {
        pattern = pattern.replace(datePattern, '('+datePattern+DATE_PATTERNS[datePattern]+')');    
      }
  
      // take care of capturing groups
      var capture = [];
      for (var i=pattern.indexOf('%'); i>=0; i=pattern.indexOf('%')) {
        capture.push(pattern[i+1]);
        pattern = pattern.replace(new RegExp('\\%'+pattern[i+1], 'g'), '');
      }
  
      var matches = new RegExp('^'+pattern, "i").exec(Pointer_stringify(buf))
      // Module['print'](Pointer_stringify(buf)+ ' is matched by '+((new RegExp('^'+pattern)).source)+' into: '+JSON.stringify(matches));
  
      function initDate() {
        function fixup(value, min, max) {
          return (typeof value !== 'number' || isNaN(value)) ? min : (value>=min ? (value<=max ? value: max): min);
        };
        return {
          year: fixup(HEAP32[(((tm)+(20))>>2)] + 1900 , 1970, 9999),
          month: fixup(HEAP32[(((tm)+(16))>>2)], 0, 11),
          day: fixup(HEAP32[(((tm)+(12))>>2)], 1, 31),
          hour: fixup(HEAP32[(((tm)+(8))>>2)], 0, 23),
          min: fixup(HEAP32[(((tm)+(4))>>2)], 0, 59),
          sec: fixup(HEAP32[((tm)>>2)], 0, 59)
        };
      };
  
      if (matches) {
        var date = initDate();
        var value;
  
        function getMatch(symbol) {
          var pos = capture.indexOf(symbol);
          // check if symbol appears in regexp
          if (pos >= 0) {
            // return matched value or null (falsy!) for non-matches
            return matches[pos+1];
          }
          return;
        }
  
        // seconds
        if ((value=getMatch('S'))) {
          date.sec = parseInt(value);
        }
  
        // minutes
        if ((value=getMatch('M'))) {
          date.min = parseInt(value);
        }
  
        // hours
        if ((value=getMatch('H'))) {
          // 24h clock
          date.hour = parseInt(value);
        } else if ((value = getMatch('I'))) {
          // AM/PM clock
          var hour = parseInt(value);
          if ((value=getMatch('p'))) {
            hour += value.toUpperCase()[0] === 'P' ? 12 : 0;
          }
          date.hour = hour;
        }
  
        // year
        if ((value=getMatch('Y'))) {
          // parse from four-digit year
          date.year = parseInt(value);
        } else if ((value=getMatch('y'))) {
          // parse from two-digit year...
          var year = parseInt(value);
          if ((value=getMatch('C'))) {
            // ...and century
            year += parseInt(value)*100;
          } else {
            // ...and rule-of-thumb
            year += year<69 ? 2000 : 1900;
          }
          date.year = year;
        }
  
        // month
        if ((value=getMatch('m'))) {
          // parse from month number
          date.month = parseInt(value)-1;
        } else if ((value=getMatch('b'))) {
          // parse from month name
          date.month = MONTH_NUMBERS[value.substring(0,3).toUpperCase()] || 0;
          // TODO: derive month from day in year+year, week number+day of week+year 
        }
  
        // day
        if ((value=getMatch('d'))) {
          // get day of month directly
          date.day = parseInt(value);
        } else if ((value=getMatch('j'))) {
          // get day of month from day of year ...
          var day = parseInt(value);
          var leapYear = __isLeapYear(date.year);
          for (var month=0; month<12; ++month) {
            var daysUntilMonth = __arraySum(leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, month-1);
            if (day<=daysUntilMonth+(leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[month]) {
              date.day = day-daysUntilMonth;
            }
          }
        } else if ((value=getMatch('a'))) {
          // get day of month from weekday ...
          var weekDay = value.substring(0,3).toUpperCase();
          if ((value=getMatch('U'))) {
            // ... and week number (Sunday being first day of week)
            // Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. 
            // All days in a new year preceding the first Sunday are considered to be in week 0.
            var weekDayNumber = DAY_NUMBERS_SUN_FIRST[weekDay];
            var weekNumber = parseInt(value);
  
            // January 1st 
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay() === 0) {
              // Jan 1st is a Sunday, and, hence in the 1st CW
              endDate = __addDays(janFirst, weekDayNumber+7*(weekNumber-1));
            } else {
              // Jan 1st is not a Sunday, and, hence still in the 0th CW
              endDate = __addDays(janFirst, 7-janFirst.getDay()+weekDayNumber+7*(weekNumber-1));
            }
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          } else if ((value=getMatch('W'))) {
            // ... and week number (Monday being first day of week)
            // Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. 
            // All days in a new year preceding the first Monday are considered to be in week 0.
            var weekDayNumber = DAY_NUMBERS_MON_FIRST[weekDay];
            var weekNumber = parseInt(value);
  
            // January 1st 
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay()===1) {
              // Jan 1st is a Monday, and, hence in the 1st CW
               endDate = __addDays(janFirst, weekDayNumber+7*(weekNumber-1));
            } else {
              // Jan 1st is not a Monday, and, hence still in the 0th CW
              endDate = __addDays(janFirst, 7-janFirst.getDay()+1+weekDayNumber+7*(weekNumber-1));
            }
  
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          }
        }
  
        /*
        tm_sec  int seconds after the minute  0-61*
        tm_min  int minutes after the hour  0-59
        tm_hour int hours since midnight  0-23
        tm_mday int day of the month  1-31
        tm_mon  int months since January  0-11
        tm_year int years since 1900  
        tm_wday int days since Sunday 0-6
        tm_yday int days since January 1  0-365
        tm_isdst  int Daylight Saving Time flag 
        */
  
        var fullDate = new Date(date.year, date.month, date.day, date.hour, date.min, date.sec, 0);
        HEAP32[((tm)>>2)]=fullDate.getSeconds();
        HEAP32[(((tm)+(4))>>2)]=fullDate.getMinutes();
        HEAP32[(((tm)+(8))>>2)]=fullDate.getHours();
        HEAP32[(((tm)+(12))>>2)]=fullDate.getDate();
        HEAP32[(((tm)+(16))>>2)]=fullDate.getMonth();
        HEAP32[(((tm)+(20))>>2)]=fullDate.getFullYear()-1900;
        HEAP32[(((tm)+(24))>>2)]=fullDate.getDay();
        HEAP32[(((tm)+(28))>>2)]=__arraySum(__isLeapYear(fullDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, fullDate.getMonth()-1)+fullDate.getDate()-1;
        HEAP32[(((tm)+(32))>>2)]=0;
  
        // we need to convert the matched sequence into an integer array to take care of UTF-8 characters > 0x7F
        // TODO: not sure that intArrayFromString handles all unicode characters correctly
        return buf+intArrayFromString(matches[0]).length-1;
      } 
  
      return 0;
    }
  Module["_strptime"] = _strptime;

  function _strptime_l(buf, format, tm) {
      return _strptime(buf, format, tm); // no locale support yet
    }
  Module["_strptime_l"] = _strptime_l;

  function _getdate(string) {
      // struct tm *getdate(const char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getdate.html
      // TODO: Implement.
      return 0;
    }
  Module["_getdate"] = _getdate;



  function _clock_settime(clk_id, tp) {
      // int clock_settime(clockid_t clk_id, const struct timespec *tp);
      // Nothing.
      ___setErrNo(clk_id === 0 ? ERRNO_CODES.EPERM
                                                               : ERRNO_CODES.EINVAL);
      return -1;
    }
  Module["_clock_settime"] = _clock_settime;

  
  function _emscripten_get_now_res() { // return resolution of get_now, in nanoseconds
      if (ENVIRONMENT_IS_NODE) {
        return 1; // nanoseconds
      } else if (typeof dateNow !== 'undefined' ||
                 ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now'])) {
        return 1000; // microseconds (1/1000 of a millisecond)
      } else {
        return 1000*1000; // milliseconds
      }
    }
  Module["_emscripten_get_now_res"] = _emscripten_get_now_res;function _clock_getres(clk_id, res) {
      // int clock_getres(clockid_t clk_id, struct timespec *res);
      var nsec;
      if (clk_id === 0) {
        nsec = 1000 * 1000; // educated guess that it's milliseconds
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        nsec = _emscripten_get_now_res();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((res)>>2)]=(nsec/1000000000)|0;
      HEAP32[(((res)+(4))>>2)]=nsec // resolution is nanoseconds
      return 0;
    }
  Module["_clock_getres"] = _clock_getres;

  function _clock_getcpuclockid(pid, clk_id) {
      if (pid < 0) return ERRNO_CODES.ESRCH;
      if (pid !== 0 && pid !== PROCINFO.pid) return ERRNO_CODES.ENOSYS;
      if (clk_id) HEAP32[((clk_id)>>2)]=2;
      return 0;
    }
  Module["_clock_getcpuclockid"] = _clock_getcpuclockid;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }
  Module["_gettimeofday"] = _gettimeofday;

  function _ftime(p) {
      var millis = Date.now();
      HEAP32[((p)>>2)]=(millis/1000)|0;
      HEAP16[(((p)+(4))>>1)]=millis % 1000;
      HEAP16[(((p)+(6))>>1)]=0; // Obsolete field
      HEAP16[(((p)+(8))>>1)]=0; // Obsolete field
      return 0;
    }
  Module["_ftime"] = _ftime;

  function _times(buffer) {
      // clock_t times(struct tms *buffer);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/times.html
      // NOTE: This is fake, since we can't calculate real CPU time usage in JS.
      if (buffer !== 0) {
        _memset(buffer, 0, 16);
      }
      return 0;
    }
  Module["_times"] = _times;

  function _makedev(maj, min) {
      return ((maj) << 8 | (min));
    }
  Module["_makedev"] = _makedev;

  function _gnu_dev_makedev() {
  return _makedev.apply(null, arguments)
  }
  Module["_gnu_dev_makedev"] = _gnu_dev_makedev;

  function _major(dev) {
      return ((dev) >> 8);
    }
  Module["_major"] = _major;

  function _gnu_dev_major() {
  return _major.apply(null, arguments)
  }
  Module["_gnu_dev_major"] = _gnu_dev_major;

  function _minor(dev) {
      return ((dev) & 0xff);
    }
  Module["_minor"] = _minor;

  function _gnu_dev_minor() {
  return _minor.apply(null, arguments)
  }
  Module["_gnu_dev_minor"] = _gnu_dev_minor;

   

   

  function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }
  Module["_longjmp"] = _longjmp;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }
  Module["_emscripten_longjmp"] = _emscripten_longjmp;


  function _waitid() {
  return _wait.apply(null, arguments)
  }
  Module["_waitid"] = _waitid;


  function _wait3() {
  return _wait.apply(null, arguments)
  }
  Module["_wait3"] = _wait3;

  function _wait4() {
  return _wait.apply(null, arguments)
  }
  Module["_wait4"] = _wait4;






  var _in6addr_any=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
  Module["_in6addr_any"] = _in6addr_any;

  var _in6addr_loopback=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_STATIC);
  Module["_in6addr_loopback"] = _in6addr_loopback;




  function __inet_pton6(src, dst) {
      var ints = __inet_pton6_raw(Pointer_stringify(src));
      if (ints === null) {
        return 0;
      }
      for (var i = 0; i < 4; i++) {
        HEAP32[(((dst)+(i*4))>>2)]=ints[i];
      }
      return 1;
    }
  Module["__inet_pton6"] = __inet_pton6;






  
  function _gethostbyname(name) {
      name = Pointer_stringify(name);
  
      // generate hostent
      var ret = _malloc(20); // XXX possibly leaked, as are others here
      var nameBuf = _malloc(name.length+1);
      stringToUTF8(name, nameBuf, name.length+1);
      HEAP32[((ret)>>2)]=nameBuf;
      var aliasesBuf = _malloc(4);
      HEAP32[((aliasesBuf)>>2)]=0;
      HEAP32[(((ret)+(4))>>2)]=aliasesBuf;
      var afinet = 2;
      HEAP32[(((ret)+(8))>>2)]=afinet;
      HEAP32[(((ret)+(12))>>2)]=4;
      var addrListBuf = _malloc(12);
      HEAP32[((addrListBuf)>>2)]=addrListBuf+8;
      HEAP32[(((addrListBuf)+(4))>>2)]=0;
      HEAP32[(((addrListBuf)+(8))>>2)]=__inet_pton4_raw(DNS.lookup_name(name));
      HEAP32[(((ret)+(16))>>2)]=addrListBuf;
      return ret;
    }
  Module["_gethostbyname"] = _gethostbyname;function _gethostbyaddr(addr, addrlen, type) {
      if (type !== 2) {
        ___setErrNo(ERRNO_CODES.EAFNOSUPPORT);
        // TODO: set h_errno
        return null;
      }
      addr = HEAP32[((addr)>>2)]; // addr is in_addr
      var host = __inet_ntop4_raw(addr);
      var lookup = DNS.lookup_addr(host);
      if (lookup) {
        host = lookup;
      }
      var hostp = allocate(intArrayFromString(host), 'i8', ALLOC_STACK);
      return _gethostbyname(hostp);
    }
  Module["_gethostbyaddr"] = _gethostbyaddr;




  function _gethostbyname_r(name, ret, buf, buflen, out, err) {
      var data = _gethostbyname(name);
      _memcpy(ret, data, 20);
      _free(data);
      HEAP32[((err)>>2)]=0;
      HEAP32[((out)>>2)]=ret;
      return 0;
    }
  Module["_gethostbyname_r"] = _gethostbyname_r;


  function _getaddrinfo(node, service, hint, out) {
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        HEAP32[(((ai)+(24))>>2)]=canon;
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }
  Module["_getaddrinfo"] = _getaddrinfo;


  var GAI_ERRNO_MESSAGES={};
  Module["GAI_ERRNO_MESSAGES"] = GAI_ERRNO_MESSAGES;

  function _gai_strerror(val) {
      var buflen = 256;
  
      // On first call to gai_strerror we initialise the buffer and populate the error messages.
      if (!_gai_strerror.buffer) {
          _gai_strerror.buffer = _malloc(buflen);
  
          GAI_ERRNO_MESSAGES['0'] = 'Success';
          GAI_ERRNO_MESSAGES['' + -1] = 'Invalid value for \'ai_flags\' field';
          GAI_ERRNO_MESSAGES['' + -2] = 'NAME or SERVICE is unknown';
          GAI_ERRNO_MESSAGES['' + -3] = 'Temporary failure in name resolution';
          GAI_ERRNO_MESSAGES['' + -4] = 'Non-recoverable failure in name res';
          GAI_ERRNO_MESSAGES['' + -6] = '\'ai_family\' not supported';
          GAI_ERRNO_MESSAGES['' + -7] = '\'ai_socktype\' not supported';
          GAI_ERRNO_MESSAGES['' + -8] = 'SERVICE not supported for \'ai_socktype\'';
          GAI_ERRNO_MESSAGES['' + -10] = 'Memory allocation failure';
          GAI_ERRNO_MESSAGES['' + -11] = 'System error returned in \'errno\'';
          GAI_ERRNO_MESSAGES['' + -12] = 'Argument buffer overflow';
      }
  
      var msg = 'Unknown error';
  
      if (val in GAI_ERRNO_MESSAGES) {
        if (GAI_ERRNO_MESSAGES[val].length > buflen - 1) {
          msg = 'Message too long'; // EMSGSIZE message. This should never occur given the GAI_ERRNO_MESSAGES above. 
        } else {
          msg = GAI_ERRNO_MESSAGES[val];
        }
      }
  
      writeAsciiToMemory(msg, _gai_strerror.buffer);
      return _gai_strerror.buffer;
    }
  Module["_gai_strerror"] = _gai_strerror;

  var Protocols={list:[],map:{}};
  Module["Protocols"] = Protocols;

  function _setprotoent(stayopen) {
      // void setprotoent(int stayopen);
  
      // Allocate and populate a protoent structure given a name, protocol number and array of aliases
      function allocprotoent(name, proto, aliases) {
        // write name into buffer
        var nameBuf = _malloc(name.length + 1);
        writeAsciiToMemory(name, nameBuf);
  
        // write aliases into buffer
        var j = 0;
        var length = aliases.length;
        var aliasListBuf = _malloc((length + 1) * 4); // Use length + 1 so we have space for the terminating NULL ptr.
  
        for (var i = 0; i < length; i++, j += 4) {
          var alias = aliases[i];
          var aliasBuf = _malloc(alias.length + 1);
          writeAsciiToMemory(alias, aliasBuf);
          HEAP32[(((aliasListBuf)+(j))>>2)]=aliasBuf;
        }
        HEAP32[(((aliasListBuf)+(j))>>2)]=0; // Terminating NULL pointer.
  
        // generate protoent
        var pe = _malloc(12);
        HEAP32[((pe)>>2)]=nameBuf;
        HEAP32[(((pe)+(4))>>2)]=aliasListBuf;
        HEAP32[(((pe)+(8))>>2)]=proto;
        return pe;
      };
  
      // Populate the protocol 'database'. The entries are limited to tcp and udp, though it is fairly trivial
      // to add extra entries from /etc/protocols if desired - though not sure if that'd actually be useful.
      var list = Protocols.list;
      var map  = Protocols.map;
      if (list.length === 0) {
          var entry = allocprotoent('tcp', 6, ['TCP']);
          list.push(entry);
          map['tcp'] = map['6'] = entry;
          entry = allocprotoent('udp', 17, ['UDP']);
          list.push(entry);
          map['udp'] = map['17'] = entry;
      }
  
      _setprotoent.index = 0;
    }
  Module["_setprotoent"] = _setprotoent;

  function _endprotoent() {
      // void endprotoent(void);
      // We're not using a real protocol database so we don't do a real close.
    }
  Module["_endprotoent"] = _endprotoent;

  function _getprotoent(number) {
      // struct protoent *getprotoent(void);
      // reads the  next  entry  from  the  protocols 'database' or return NULL if 'eof'
      if (_setprotoent.index === Protocols.list.length) {
        return 0; 
      } else {
        var result = Protocols.list[_setprotoent.index++];
        return result;
      }
    }
  Module["_getprotoent"] = _getprotoent;

  function _getprotobyname(name) {
      // struct protoent *getprotobyname(const char *);
      name = Pointer_stringify(name);
      _setprotoent(true);
      var result = Protocols.map[name];
      return result;
    }
  Module["_getprotobyname"] = _getprotobyname;

  function _getprotobynumber(number) {
      // struct protoent *getprotobynumber(int proto);
      _setprotoent(true);
      var result = Protocols.map[number];
      return result;
    }
  Module["_getprotobynumber"] = _getprotobynumber;


  function _getpwnam() { throw 'getpwnam: TODO' }
  Module["_getpwnam"] = _getpwnam;

  function _setpwent() { throw 'setpwent: TODO' }
  Module["_setpwent"] = _setpwent;

  function _getpwent() { throw 'getpwent: TODO' }
  Module["_getpwent"] = _getpwent;

  function _endpwent() { throw 'endpwent: TODO' }
  Module["_endpwent"] = _endpwent;

  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }
  Module["_emscripten_run_script"] = _emscripten_run_script;

  function _emscripten_run_script_int(ptr) {
      return eval(Pointer_stringify(ptr))|0;
    }
  Module["_emscripten_run_script_int"] = _emscripten_run_script_int;

  function _emscripten_run_script_string(ptr) {
      var s = eval(Pointer_stringify(ptr)) + '';
      var me = _emscripten_run_script_string;
      var len = lengthBytesUTF8(s);
      if (!me.bufferSize || me.bufferSize < len+1) {
        if (me.bufferSize) _free(me.buffer);
        me.bufferSize = len+1;
        me.buffer = _malloc(me.bufferSize);
      }
      stringToUTF8(s, me.buffer, me.bufferSize);
      return me.buffer;
    }
  Module["_emscripten_run_script_string"] = _emscripten_run_script_string;

  function _emscripten_random() {
      return Math.random();
    }
  Module["_emscripten_random"] = _emscripten_random;




  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for (var i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }
  Module["__emscripten_traverse_stack"] = __emscripten_traverse_stack;

  function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      var lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for (var l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }
  Module["_emscripten_get_callstack_js"] = _emscripten_get_callstack_js;

  function _emscripten_get_callstack(flags, str, maxbytes) {
      var callstack = _emscripten_get_callstack_js(flags);
      // User can query the required amount of bytes to hold the callstack.
      if (!str || maxbytes <= 0) {
        return lengthBytesUTF8(callstack)+1;
      }
      // Output callstack string as C string to HEAP.
      var bytesWrittenExcludingNull = stringToUTF8(callstack, str, maxbytes);
  
      // Return number of bytes written, including null.
      return bytesWrittenExcludingNull+1;
    }
  Module["_emscripten_get_callstack"] = _emscripten_get_callstack;

  function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
      } else {
        Module.print(str);
      }
    }
  Module["_emscripten_log_js"] = _emscripten_log_js;

  
  function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = varargs;
      // This must be called before reading a double or i64 vararg. It will bump the pointer properly.
      // It also does an assert on i32 values, so it's nice to call it before all varargs calls.
      function prepVararg(ptr, type) {
        if (type === 'double' || type === 'i64') {
          // move so the load is aligned
          if (ptr & 7) {
            assert((ptr & 7) === 4);
            ptr += 4;
          }
        } else {
          assert((ptr & 3) === 0);
        }
        return ptr;
      }
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = prepVararg(argIndex, type);
        if (type === 'double') {
          ret = HEAPF64[((argIndex)>>3)];
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[((argIndex)>>2)],
                 HEAP32[(((argIndex)+(4))>>2)]];
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((argIndex)>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && typeof i64Math === 'object') argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && typeof i64Math === 'object') argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && typeof i64Math === 'object') {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  Module["__formatString"] = __formatString;function _emscripten_log(flags, varargs) {
      // Extract the (optionally-existing) printf format specifier field from varargs.
      var format = HEAP32[((varargs)>>2)];
      varargs += 4;
      var str = '';
      if (format) {
        var result = __formatString(format, varargs);
        for(var i = 0 ; i < result.length; ++i) {
          str += String.fromCharCode(result[i]);
        }
      }
      _emscripten_log_js(flags, str);
    }
  Module["_emscripten_log"] = _emscripten_log;

  function _emscripten_get_compiler_setting(name) {
      name = Pointer_stringify(name);
  
      var ret = getCompilerSetting(name);
      if (typeof ret === 'number') return ret;
  
      if (!_emscripten_get_compiler_setting.cache) _emscripten_get_compiler_setting.cache = {};
      var cache = _emscripten_get_compiler_setting.cache;
      var fullname = name + '__str';
      var fullret = cache[fullname];
      if (fullret) return fullret;
      return cache[fullname] = allocate(intArrayFromString(ret + ''), 'i8', ALLOC_NORMAL);
    }
  Module["_emscripten_get_compiler_setting"] = _emscripten_get_compiler_setting;

  function _emscripten_debugger() {
      debugger;
    }
  Module["_emscripten_debugger"] = _emscripten_debugger;

  function _emscripten_print_double(x, to, max) {
      var str = x + '';
      if (to) return stringToUTF8(str, to, max);
      else return lengthBytesUTF8(str);
    }
  Module["_emscripten_print_double"] = _emscripten_print_double;










  function ___ubsan_handle_float_cast_overflow(id, post) {
      abort('Undefined behavior! ubsan_handle_float_cast_overflow: ' + [id, post]);
    }
  Module["___ubsan_handle_float_cast_overflow"] = ___ubsan_handle_float_cast_overflow;


  function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module['dynCall_iii'](func, 0, arg);
        if (ret !== 0) return;
      }
    }
  Module["__Unwind_Backtrace"] = __Unwind_Backtrace;

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }
  Module["__Unwind_GetIPInfo"] = __Unwind_GetIPInfo;

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }
  Module["__Unwind_FindEnclosingFunction"] = __Unwind_FindEnclosingFunction;

  function __Unwind_RaiseException(ex) {
      Module.printErr('Warning: _Unwind_RaiseException is not correctly implemented');
      return ___cxa_throw(ex, 0, 0);
    }
  Module["__Unwind_RaiseException"] = __Unwind_RaiseException;

  function __Unwind_DeleteException(ex) {
      Module.printErr('TODO: Unwind_DeleteException');
    }
  Module["__Unwind_DeleteException"] = __Unwind_DeleteException;

  function _emscripten_autodebug_i64(line, valuel, valueh) {
      Module.print('AD:' + [line, valuel, valueh]);
    }
  Module["_emscripten_autodebug_i64"] = _emscripten_autodebug_i64;

  function _emscripten_autodebug_i32(line, value) {
      Module.print('AD:' + [line, value]);
    }
  Module["_emscripten_autodebug_i32"] = _emscripten_autodebug_i32;

  function _emscripten_autodebug_i16(line, value) {
      Module.print('AD:' + [line, value]);
    }
  Module["_emscripten_autodebug_i16"] = _emscripten_autodebug_i16;

  function _emscripten_autodebug_i8(line, value) {
      Module.print('AD:' + [line, value]);
    }
  Module["_emscripten_autodebug_i8"] = _emscripten_autodebug_i8;

  function _emscripten_autodebug_float(line, value) {
      Module.print('AD:' + [line, value]);
    }
  Module["_emscripten_autodebug_float"] = _emscripten_autodebug_float;

  function _emscripten_autodebug_double(line, value) {
      Module.print('AD:' + [line, value]);
    }
  Module["_emscripten_autodebug_double"] = _emscripten_autodebug_double;

  var _emscripten_prep_setjmp=true;
  Module["_emscripten_prep_setjmp"] = _emscripten_prep_setjmp;

  var _emscripten_cleanup_setjmp=true;
  Module["_emscripten_cleanup_setjmp"] = _emscripten_cleanup_setjmp;

  var _emscripten_check_longjmp=true;
  Module["_emscripten_check_longjmp"] = _emscripten_check_longjmp;

  var _emscripten_get_longjmp_result=true;
  Module["_emscripten_get_longjmp_result"] = _emscripten_get_longjmp_result;

  var _emscripten_setjmp=true;
  Module["_emscripten_setjmp"] = _emscripten_setjmp;

  var _emscripten_preinvoke=true;
  Module["_emscripten_preinvoke"] = _emscripten_preinvoke;

  var _emscripten_postinvoke=true;
  Module["_emscripten_postinvoke"] = _emscripten_postinvoke;

  var _emscripten_resume=true;
  Module["_emscripten_resume"] = _emscripten_resume;

  var _emscripten_landingpad=true;
  Module["_emscripten_landingpad"] = _emscripten_landingpad;

  var _getHigh32=true;
  Module["_getHigh32"] = _getHigh32;

  var _setHigh32=true;
  Module["_setHigh32"] = _setHigh32;

  var _FtoILow=true;
  Module["_FtoILow"] = _FtoILow;

  var _FtoIHigh=true;
  Module["_FtoIHigh"] = _FtoIHigh;

  var _DtoILow=true;
  Module["_DtoILow"] = _DtoILow;

  var _DtoIHigh=true;
  Module["_DtoIHigh"] = _DtoIHigh;

  var _BDtoILow=true;
  Module["_BDtoILow"] = _BDtoILow;

  var _BDtoIHigh=true;
  Module["_BDtoIHigh"] = _BDtoIHigh;

  var _SItoF=true;
  Module["_SItoF"] = _SItoF;

  var _UItoF=true;
  Module["_UItoF"] = _UItoF;

  var _SItoD=true;
  Module["_SItoD"] = _SItoD;

  var _UItoD=true;
  Module["_UItoD"] = _UItoD;

  var _BItoD=true;
  Module["_BItoD"] = _BItoD;

  var _llvm_dbg_value=true;
  Module["_llvm_dbg_value"] = _llvm_dbg_value;

  var _llvm_debugtrap=true;
  Module["_llvm_debugtrap"] = _llvm_debugtrap;

  var _llvm_ctlz_i32=true;
  Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

  var _emscripten_asm_const=true;
  Module["_emscripten_asm_const"] = _emscripten_asm_const;

  var _emscripten_asm_const_int=true;
  Module["_emscripten_asm_const_int"] = _emscripten_asm_const_int;

  var _emscripten_asm_const_double=true;
  Module["_emscripten_asm_const_double"] = _emscripten_asm_const_double;

  var _emscripten_asm_const_int_sync_on_main_thread=true;
  Module["_emscripten_asm_const_int_sync_on_main_thread"] = _emscripten_asm_const_int_sync_on_main_thread;

  var _emscripten_asm_const_double_sync_on_main_thread=true;
  Module["_emscripten_asm_const_double_sync_on_main_thread"] = _emscripten_asm_const_double_sync_on_main_thread;

  var _emscripten_asm_const_async_on_main_thread=true;
  Module["_emscripten_asm_const_async_on_main_thread"] = _emscripten_asm_const_async_on_main_thread;



   



   




  function _emscripten_async_wget(url, file, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      _file = PATH.resolve(FS.cwd(), _file);
      function doCallback(callback) {
        if (callback) {
          var stack = stackSave();
          Module['dynCall_vi'](callback, allocate(intArrayFromString(_file), 'i8', ALLOC_STACK));
          stackRestore(stack);
        }
      }
      var destinationDirectory = PATH.dirname(_file);
      FS.createPreloadedFile(
        destinationDirectory,
        PATH.basename(_file),
        _url, true, true,
        function() {
          doCallback(onload);
        },
        function() {
          doCallback(onerror);
        },
        false, // dontCreateFile
        false, // canOwn
        function() { // preFinish
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
          // if the destination directory does not yet exist, create it
          FS.mkdirTree(destinationDirectory);
        }
      );
    }
  Module["_emscripten_async_wget"] = _emscripten_async_wget;


  function _emscripten_async_wget_data(url, arg, onload, onerror) {
      Browser.asyncLoad(Pointer_stringify(url), function(byteArray) {
        var buffer = _malloc(byteArray.length);
        HEAPU8.set(byteArray, buffer);
        Module['dynCall_viii'](onload, arg, buffer, byteArray.length);
        _free(buffer);
      }, function() {
        if (onerror) Module['dynCall_vi'](onerror, arg);
      }, true /* no need for run dependency, this is async but will not do any prepare etc. step */ );
    }
  Module["_emscripten_async_wget_data"] = _emscripten_async_wget_data;


  function _emscripten_async_wget2(url, file, request, param, arg, onload, onerror, onprogress) {
      Module['noExitRuntime'] = true;
  
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      _file = PATH.resolve(FS.cwd(), _file);
      var _request = Pointer_stringify(request);
      var _param = Pointer_stringify(param);
      var index = _file.lastIndexOf('/');
  
      var http = new XMLHttpRequest();
      http.open(_request, _url, true);
      http.responseType = 'arraybuffer';
  
      var handle = Browser.getNextWgetRequestHandle();
  
      var destinationDirectory = PATH.dirname(_file);
  
      // LOAD
      http.onload = function http_onload(e) {
        if (http.status == 200) {
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
          // if the destination directory does not yet exist, create it
          FS.mkdirTree(destinationDirectory);
  
          FS.createDataFile( _file.substr(0, index), _file.substr(index + 1), new Uint8Array(http.response), true, true, false);
          if (onload) {
            var stack = stackSave();
            Module['dynCall_viii'](onload, handle, arg, allocate(intArrayFromString(_file), 'i8', ALLOC_STACK));
            stackRestore(stack);
          }
        } else {
          if (onerror) Module['dynCall_viii'](onerror, handle, arg, http.status);
        }
  
        delete Browser.wgetRequests[handle];
      };
  
      // ERROR
      http.onerror = function http_onerror(e) {
        if (onerror) Module['dynCall_viii'](onerror, handle, arg, http.status);
        delete Browser.wgetRequests[handle];
      };
  
      // PROGRESS
      http.onprogress = function http_onprogress(e) {
        if (e.lengthComputable || (e.lengthComputable === undefined && e.total != 0)) {
          var percentComplete = (e.loaded / e.total)*100;
          if (onprogress) Module['dynCall_viii'](onprogress, handle, arg, percentComplete);
        }
      };
  
      // ABORT
      http.onabort = function http_onabort(e) {
        delete Browser.wgetRequests[handle];
      };
  
      if (_request == "POST") {
        //Send the proper header information along with the request
        http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        http.send(_param);
      } else {
        http.send(null);
      }
  
      Browser.wgetRequests[handle] = http;
  
      return handle;
    }
  Module["_emscripten_async_wget2"] = _emscripten_async_wget2;


  function _emscripten_async_wget2_data(url, request, param, arg, free, onload, onerror, onprogress) {
      var _url = Pointer_stringify(url);
      var _request = Pointer_stringify(request);
      var _param = Pointer_stringify(param);
  
      var http = new XMLHttpRequest();
      http.open(_request, _url, true);
      http.responseType = 'arraybuffer';
  
      var handle = Browser.getNextWgetRequestHandle();
  
      // LOAD
      http.onload = function http_onload(e) {
        if (http.status == 200 || _url.substr(0,4).toLowerCase() != "http") {
          var byteArray = new Uint8Array(http.response);
          var buffer = _malloc(byteArray.length);
          HEAPU8.set(byteArray, buffer);
          if (onload) Module['dynCall_viiii'](onload, handle, arg, buffer, byteArray.length);
          if (free) _free(buffer);
        } else {
          if (onerror) Module['dynCall_viiii'](onerror, handle, arg, http.status, http.statusText);
        }
        delete Browser.wgetRequests[handle];
      };
  
      // ERROR
      http.onerror = function http_onerror(e) {
        if (onerror) {
          Module['dynCall_viiii'](onerror, handle, arg, http.status, http.statusText);
        }
        delete Browser.wgetRequests[handle];
      };
  
      // PROGRESS
      http.onprogress = function http_onprogress(e) {
        if (onprogress) Module['dynCall_viiii'](onprogress, handle, arg, e.loaded, e.lengthComputable || e.lengthComputable === undefined ? e.total : 0);
      };
  
      // ABORT
      http.onabort = function http_onabort(e) {
        delete Browser.wgetRequests[handle];
      };
  
      if (_request == "POST") {
        //Send the proper header information along with the request
        http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        http.send(_param);
      } else {
        http.send(null);
      }
  
      Browser.wgetRequests[handle] = http;
  
      return handle;
    }
  Module["_emscripten_async_wget2_data"] = _emscripten_async_wget2_data;


  function _emscripten_async_wget2_abort(handle) {
      var http = Browser.wgetRequests[handle];
      if (http) {
        http.abort();
      }
    }
  Module["_emscripten_async_wget2_abort"] = _emscripten_async_wget2_abort;


  function _emscripten_run_preload_plugins(file, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _file = Pointer_stringify(file);
      var data = FS.analyzePath(_file);
      if (!data.exists) return -1;
      FS.createPreloadedFile(
        PATH.dirname(_file),
        PATH.basename(_file),
        new Uint8Array(data.object.contents), true, true,
        function() {
          if (onload) Module['dynCall_vi'](onload, file);
        },
        function() {
          if (onerror) Module['dynCall_vi'](onerror, file);
        },
        true // don'tCreateFile - it's already there
      );
      return 0;
    }
  Module["_emscripten_run_preload_plugins"] = _emscripten_run_preload_plugins;


  function _emscripten_run_preload_plugins_data(data, size, suffix, arg, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _suffix = Pointer_stringify(suffix);
      if (!Browser.asyncPrepareDataCounter) Browser.asyncPrepareDataCounter = 0;
      var name = 'prepare_data_' + (Browser.asyncPrepareDataCounter++) + '.' + _suffix;
      var lengthAsUTF8 = lengthBytesUTF8(name);
      var cname = _malloc(lengthAsUTF8+1);
      stringToUTF8(name, cname, lengthAsUTF8+1);
      FS.createPreloadedFile(
        '/',
        name,
        HEAPU8.subarray((data),(data + size)),
        true, true,
        function() {
          if (onload) Module['dynCall_vii'](onload, arg, cname);
        },
        function() {
          if (onerror) Module['dynCall_vi'](onerror, arg);
        },
        true // don'tCreateFile - it's already there
      );
    }
  Module["_emscripten_run_preload_plugins_data"] = _emscripten_run_preload_plugins_data;

  function _emscripten_async_run_script(script, millis) {
      Module['noExitRuntime'] = true;
  
      // TODO: cache these to avoid generating garbage
      Browser.safeSetTimeout(function() {
        _emscripten_run_script(script);
      }, millis);
    }
  Module["_emscripten_async_run_script"] = _emscripten_async_run_script;

  function _emscripten_async_load_script(url, onload, onerror) {
      onload = getFuncWrapper(onload, 'v');
      onerror = getFuncWrapper(onerror, 'v');
  
      Module['noExitRuntime'] = true;
  
      assert(runDependencies === 0, 'async_load_script must be run when no other dependencies are active');
      var script = document.createElement('script');
      if (onload) {
        script.onload = function script_onload() {
          if (runDependencies > 0) {
            dependenciesFulfilled = onload;
          } else {
            onload();
          }
        };
      }
      if (onerror) script.onerror = onerror;
      script.src = Pointer_stringify(url);
      document.body.appendChild(script);
    }
  Module["_emscripten_async_load_script"] = _emscripten_async_load_script;

  function _emscripten_get_main_loop_timing(mode, value) {
      if (mode) HEAP32[((mode)>>2)]=Browser.mainLoop.timingMode;
      if (value) HEAP32[((value)>>2)]=Browser.mainLoop.timingValue;
    }
  Module["_emscripten_get_main_loop_timing"] = _emscripten_get_main_loop_timing;



  function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }
  Module["_emscripten_set_main_loop_arg"] = _emscripten_set_main_loop_arg;

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }
  Module["_emscripten_cancel_main_loop"] = _emscripten_cancel_main_loop;

  function _emscripten_pause_main_loop() {
      Browser.mainLoop.pause();
    }
  Module["_emscripten_pause_main_loop"] = _emscripten_pause_main_loop;

  function _emscripten_resume_main_loop() {
      Browser.mainLoop.resume();
    }
  Module["_emscripten_resume_main_loop"] = _emscripten_resume_main_loop;

  function __emscripten_push_main_loop_blocker(func, arg, name) {
      Browser.mainLoop.queue.push({ func: function() {
        Module['dynCall_vi'](func, arg);
      }, name: Pointer_stringify(name), counted: true });
      Browser.mainLoop.updateStatus();
    }
  Module["__emscripten_push_main_loop_blocker"] = __emscripten_push_main_loop_blocker;

  function __emscripten_push_uncounted_main_loop_blocker(func, arg, name) {
      Browser.mainLoop.queue.push({ func: function() {
        Module['dynCall_vi'](func, arg);
      }, name: Pointer_stringify(name), counted: false });
      Browser.mainLoop.updateStatus();
    }
  Module["__emscripten_push_uncounted_main_loop_blocker"] = __emscripten_push_uncounted_main_loop_blocker;

  function _emscripten_set_main_loop_expected_blockers(num) {
      Browser.mainLoop.expectedBlockers = num;
      Browser.mainLoop.remainingBlockers = num;
      Browser.mainLoop.updateStatus();
    }
  Module["_emscripten_set_main_loop_expected_blockers"] = _emscripten_set_main_loop_expected_blockers;

  function _emscripten_async_call(func, arg, millis) {
      Module['noExitRuntime'] = true;
  
      function wrapper() {
        getFuncWrapper(func, 'vi')(arg);
      }
  
      if (millis >= 0) {
        Browser.safeSetTimeout(wrapper, millis);
      } else {
        Browser.safeRequestAnimationFrame(wrapper);
      }
    }
  Module["_emscripten_async_call"] = _emscripten_async_call;

  function _emscripten_exit_with_live_runtime() {
      Module['noExitRuntime'] = true;
      throw 'SimulateInfiniteLoop';
    }
  Module["_emscripten_exit_with_live_runtime"] = _emscripten_exit_with_live_runtime;


  function _emscripten_force_exit(status) {
      Module['noExitRuntime'] = false;
      Module['exit'](status);
    }
  Module["_emscripten_force_exit"] = _emscripten_force_exit;


  function _emscripten_get_device_pixel_ratio() {
      return window.devicePixelRatio || 1.0;
    }
  Module["_emscripten_get_device_pixel_ratio"] = _emscripten_get_device_pixel_ratio;


  function _emscripten_hide_mouse() {
      var styleSheet = document.styleSheets[0];
      var rules = styleSheet.cssRules;
      for (var i = 0; i < rules.length; i++) {
        if (rules[i].cssText.substr(0, 6) == 'canvas') {
          styleSheet.deleteRule(i);
          i--;
        }
      }
      styleSheet.insertRule('canvas.emscripten { border: 1px solid black; cursor: none; }', 0);
    }
  Module["_emscripten_hide_mouse"] = _emscripten_hide_mouse;


  function _emscripten_set_canvas_size(width, height) {
      Browser.setCanvasSize(width, height);
    }
  Module["_emscripten_set_canvas_size"] = _emscripten_set_canvas_size;


  function _emscripten_get_canvas_size(width, height, isFullscreen) {
      var canvas = Module['canvas'];
      HEAP32[((width)>>2)]=canvas.width;
      HEAP32[((height)>>2)]=canvas.height;
      HEAP32[((isFullscreen)>>2)]=Browser.isFullscreen ? 1 : 0;
    }
  Module["_emscripten_get_canvas_size"] = _emscripten_get_canvas_size;


  function _emscripten_create_worker(url) {
      url = Pointer_stringify(url);
      var id = Browser.workers.length;
      var info = {
        worker: new Worker(url),
        callbacks: [],
        awaited: 0,
        buffer: 0,
        bufferSize: 0
      };
      info.worker.onmessage = function info_worker_onmessage(msg) {
        if (ABORT) return;
        var info = Browser.workers[id];
        if (!info) return; // worker was destroyed meanwhile
        var callbackId = msg.data['callbackId'];
        var callbackInfo = info.callbacks[callbackId];
        if (!callbackInfo) return; // no callback or callback removed meanwhile
        // Don't trash our callback state if we expect additional calls.
        if (msg.data['finalResponse']) {
          info.awaited--;
          info.callbacks[callbackId] = null; // TODO: reuse callbackIds, compress this
        }
        var data = msg.data['data'];
        if (data) {
          if (!data.byteLength) data = new Uint8Array(data);
          if (!info.buffer || info.bufferSize < data.length) {
            if (info.buffer) _free(info.buffer);
            info.bufferSize = data.length;
            info.buffer = _malloc(data.length);
          }
          HEAPU8.set(data, info.buffer);
          callbackInfo.func(info.buffer, data.length, callbackInfo.arg);
        } else {
          callbackInfo.func(0, 0, callbackInfo.arg);
        }
      };
      Browser.workers.push(info);
      return id;
    }
  Module["_emscripten_create_worker"] = _emscripten_create_worker;


  function _emscripten_destroy_worker(id) {
      var info = Browser.workers[id];
      info.worker.terminate();
      if (info.buffer) _free(info.buffer);
      Browser.workers[id] = null;
    }
  Module["_emscripten_destroy_worker"] = _emscripten_destroy_worker;


  function _emscripten_call_worker(id, funcName, data, size, callback, arg) {
      Module['noExitRuntime'] = true; // should we only do this if there is a callback?
  
      funcName = Pointer_stringify(funcName);
      var info = Browser.workers[id];
      var callbackId = -1;
      if (callback) {
        callbackId = info.callbacks.length;
        info.callbacks.push({
          func: getFuncWrapper(callback, 'viii'),
          arg: arg
        });
        info.awaited++;
      }
      var transferObject = {
        'funcName': funcName,
        'callbackId': callbackId,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        info.worker.postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        info.worker.postMessage(transferObject);
      }
    }
  Module["_emscripten_call_worker"] = _emscripten_call_worker;


  function _emscripten_worker_respond_provisionally(data, size) {
      if (workerResponded) throw 'already responded with final response!';
      var transferObject = {
        'callbackId': workerCallbackId,
        'finalResponse': false,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        postMessage(transferObject);
      }
    }
  Module["_emscripten_worker_respond_provisionally"] = _emscripten_worker_respond_provisionally;


  function _emscripten_worker_respond(data, size) {
      if (workerResponded) throw 'already responded with final response!';
      workerResponded = true;
      var transferObject = {
        'callbackId': workerCallbackId,
        'finalResponse': true,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        postMessage(transferObject);
      }
    }
  Module["_emscripten_worker_respond"] = _emscripten_worker_respond;


  function _emscripten_get_worker_queue_size(id) {
      var info = Browser.workers[id];
      if (!info) return -1;
      return info.awaited;
    }
  Module["_emscripten_get_worker_queue_size"] = _emscripten_get_worker_queue_size;


  function _emscripten_get_preloaded_image_data(path, w, h) {
      if (typeof path === "number") {
        path = Pointer_stringify(path);
      }
  
      path = PATH.resolve(path);
  
      var canvas = Module["preloadedImages"][path];
      if (canvas) {
        var ctx = canvas.getContext("2d");
        var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var buf = _malloc(canvas.width * canvas.height * 4);
  
        HEAPU8.set(image.data, buf);
  
        HEAP32[((w)>>2)]=canvas.width;
        HEAP32[((h)>>2)]=canvas.height;
        return buf;
      }
  
      return 0;
    }
  Module["_emscripten_get_preloaded_image_data"] = _emscripten_get_preloaded_image_data;


  function _emscripten_get_preloaded_image_data_from_FILE(file, w, h) {
      var fd = Module['_fileno'](file);
      var stream = FS.getStream(fd);
      if (stream) {
        return _emscripten_get_preloaded_image_data(stream.path, w, h);
      }
  
      return 0;
    }
  Module["_emscripten_get_preloaded_image_data_from_FILE"] = _emscripten_get_preloaded_image_data_from_FILE;





  var __sigalrm_handler=0;
  Module["__sigalrm_handler"] = __sigalrm_handler;

  function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
      }
      return 0;
    }
  Module["_signal"] = _signal;

  function _sigemptyset(set) {
      HEAP32[((set)>>2)]=0;
      return 0;
    }
  Module["_sigemptyset"] = _sigemptyset;


  function _sigaddset(set, signum) {
      HEAP32[((set)>>2)]=HEAP32[((set)>>2)]| (1 << (signum-1));
      return 0;
    }
  Module["_sigaddset"] = _sigaddset;

  function _sigdelset(set, signum) {
      HEAP32[((set)>>2)]=HEAP32[((set)>>2)]& (~(1 << (signum-1)));
      return 0;
    }
  Module["_sigdelset"] = _sigdelset;

  function _sigismember(set, signum) {
      return HEAP32[((set)>>2)] & (1 << (signum-1));
    }
  Module["_sigismember"] = _sigismember;

  function _sigaction(signum, act, oldact) {
      //int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
      return 0;
    }
  Module["_sigaction"] = _sigaction;

  function _sigprocmask() {
      return 0;
    }
  Module["_sigprocmask"] = _sigprocmask;

  function ___libc_current_sigrtmin() {
      return 0;
    }
  Module["___libc_current_sigrtmin"] = ___libc_current_sigrtmin;

  function ___libc_current_sigrtmax() {
      return 0;
    }
  Module["___libc_current_sigrtmax"] = ___libc_current_sigrtmax;


  function _killpg() {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  Module["_killpg"] = _killpg;

  function _siginterrupt() {
      return 0;
    }
  Module["_siginterrupt"] = _siginterrupt;

  function _raise(sig) {
    ___setErrNo(ERRNO_CODES.ENOSYS);
      return -1;
    }
  Module["_raise"] = _raise;

  function _alarm(seconds) {
      setTimeout(function() {
        if (__sigalrm_handler) Module['dynCall_vi'](__sigalrm_handler, 0);
      }, seconds*1000);
    }
  Module["_alarm"] = _alarm;



  function _getitimer() {
      throw 'getitimer() is not implemented yet';
    }
  Module["_getitimer"] = _getitimer;


  function _siglongjmp() {
  return _longjmp.apply(null, arguments)
  }
  Module["_siglongjmp"] = _siglongjmp;

  function _sigpending(set) {
      HEAP32[((set)>>2)]=0;
      return 0;
    }
  Module["_sigpending"] = _sigpending;




























  function ___syscall65(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgrp
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall65"] = ___syscall65;











  function ___syscall104(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setitimer
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall104"] = ___syscall104;





















  function ___syscall178(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rt_sigqueueinfo
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall178"] = ___syscall178;




















  function ___syscall213() {
  return ___syscall214.apply(null, arguments)
  }
  Module["___syscall213"] = ___syscall213;



  
  function ___syscall210(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setresgid32
      var ruid = SYSCALLS.get(), euid = SYSCALLS.get(), suid = SYSCALLS.get();
      if (euid !== 0) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall210"] = ___syscall210;function ___syscall208() {
  return ___syscall210.apply(null, arguments)
  }
  Module["___syscall208"] = ___syscall208;








  function ___syscall265(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // clock_nanosleep
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall265"] = ___syscall265;








  function ___syscall299(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // futimesat
      abort('futimesat is obsolete');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall299"] = ___syscall299;



















  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};
  Module["JSEvents"] = JSEvents;

  function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
      return 0;
    }
  Module["_emscripten_set_keypress_callback"] = _emscripten_set_keypress_callback;

  function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
      return 0;
    }
  Module["_emscripten_set_keydown_callback"] = _emscripten_set_keydown_callback;

  function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
      return 0;
    }
  Module["_emscripten_set_keyup_callback"] = _emscripten_set_keyup_callback;

  function _emscripten_set_click_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click");
      return 0;
    }
  Module["_emscripten_set_click_callback"] = _emscripten_set_click_callback;

  function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
      return 0;
    }
  Module["_emscripten_set_mousedown_callback"] = _emscripten_set_mousedown_callback;

  function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
      return 0;
    }
  Module["_emscripten_set_mouseup_callback"] = _emscripten_set_mouseup_callback;

  function _emscripten_set_dblclick_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 7, "dblclick");
      return 0;
    }
  Module["_emscripten_set_dblclick_callback"] = _emscripten_set_dblclick_callback;

  function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }
  Module["_emscripten_set_mousemove_callback"] = _emscripten_set_mousemove_callback;

  function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
      return 0;
    }
  Module["_emscripten_set_mouseenter_callback"] = _emscripten_set_mouseenter_callback;

  function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
      return 0;
    }
  Module["_emscripten_set_mouseleave_callback"] = _emscripten_set_mouseleave_callback;

  function _emscripten_set_mouseover_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 35, "mouseover");
      return 0;
    }
  Module["_emscripten_set_mouseover_callback"] = _emscripten_set_mouseover_callback;

  function _emscripten_set_mouseout_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 36, "mouseout");
      return 0;
    }
  Module["_emscripten_set_mouseout_callback"] = _emscripten_set_mouseout_callback;

  function _emscripten_get_mouse_status(mouseState) {
      if (!JSEvents.mouseEvent) return -7;
      // HTML5 does not really have a polling API for mouse events, so implement one manually by
      // returning the data from the most recently received event. This requires that user has registered
      // at least some no-op function as an event handler to any of the mouse function.
      HEAP8.set(HEAP8.subarray(JSEvents.mouseEvent, JSEvents.mouseEvent + 72), mouseState);
      return 0;
    }
  Module["_emscripten_get_mouse_status"] = _emscripten_get_mouse_status;

  function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
      target = JSEvents.findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
        return 0;
      } else {
        return -1;
      }
    }
  Module["_emscripten_set_wheel_callback"] = _emscripten_set_wheel_callback;

  function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
      return 0;
    }
  Module["_emscripten_set_resize_callback"] = _emscripten_set_resize_callback;

  function _emscripten_set_scroll_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 11, "scroll");
      return 0;
    }
  Module["_emscripten_set_scroll_callback"] = _emscripten_set_scroll_callback;

  function _emscripten_set_blur_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur");
      return 0;
    }
  Module["_emscripten_set_blur_callback"] = _emscripten_set_blur_callback;

  function _emscripten_set_focus_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus");
      return 0;
    }
  Module["_emscripten_set_focus_callback"] = _emscripten_set_focus_callback;

  function _emscripten_set_focusin_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 14, "focusin");
      return 0;
    }
  Module["_emscripten_set_focusin_callback"] = _emscripten_set_focusin_callback;

  function _emscripten_set_focusout_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 15, "focusout");
      return 0;
    }
  Module["_emscripten_set_focusout_callback"] = _emscripten_set_focusout_callback;

  function _emscripten_set_deviceorientation_callback(userData, useCapture, callbackfunc) {
      JSEvents.registerDeviceOrientationEventCallback(window, userData, useCapture, callbackfunc, 16, "deviceorientation");
      return 0;
    }
  Module["_emscripten_set_deviceorientation_callback"] = _emscripten_set_deviceorientation_callback;

  function _emscripten_get_deviceorientation_status(orientationState) {
      if (!JSEvents.deviceOrientationEvent) return -7;
      // HTML5 does not really have a polling API for device orientation events, so implement one manually by
      // returning the data from the most recently received event. This requires that user has registered
      // at least some no-op function as an event handler.
      HEAP32.set(HEAP32.subarray(JSEvents.deviceOrientationEvent, 40), orientationState);
      return 0;
    }
  Module["_emscripten_get_deviceorientation_status"] = _emscripten_get_deviceorientation_status;

  function _emscripten_set_devicemotion_callback(userData, useCapture, callbackfunc) {
      JSEvents.registerDeviceMotionEventCallback(window, userData, useCapture, callbackfunc, 17, "devicemotion");
      return 0;
    }
  Module["_emscripten_set_devicemotion_callback"] = _emscripten_set_devicemotion_callback;

  function _emscripten_get_devicemotion_status(motionState) {
      if (!JSEvents.deviceMotionEvent) return -7;
      // HTML5 does not really have a polling API for device motion events, so implement one manually by
      // returning the data from the most recently received event. This requires that user has registered
      // at least some no-op function as an event handler.
      HEAP32.set(HEAP32.subarray(JSEvents.deviceMotionEvent, 80), motionState);
      return 0;
    }
  Module["_emscripten_get_devicemotion_status"] = _emscripten_get_devicemotion_status;

  function _emscripten_set_orientationchange_callback(userData, useCapture, callbackfunc) {
      if (!window.screen || !window.screen.addEventListener) return -1;
      JSEvents.registerOrientationChangeEventCallback(window.screen, userData, useCapture, callbackfunc, 18, "orientationchange");
      return 0;
    }
  Module["_emscripten_set_orientationchange_callback"] = _emscripten_set_orientationchange_callback;

  function _emscripten_get_orientation_status(orientationChangeEvent) {
      if (!JSEvents.screenOrientation() && typeof window.orientation === 'undefined') return -1;
      JSEvents.fillOrientationChangeEventData(orientationChangeEvent);
      return 0;
    }
  Module["_emscripten_get_orientation_status"] = _emscripten_get_orientation_status;

  function _emscripten_lock_orientation(allowedOrientations) {
      var orientations = [];
      if (allowedOrientations & 1) orientations.push("portrait-primary");
      if (allowedOrientations & 2) orientations.push("portrait-secondary");
      if (allowedOrientations & 4) orientations.push("landscape-primary");
      if (allowedOrientations & 8) orientations.push("landscape-secondary");
      var succeeded;
      if (window.screen.lockOrientation) {
        succeeded = window.screen.lockOrientation(orientations);
      } else if (window.screen.mozLockOrientation) {
        succeeded = window.screen.mozLockOrientation(orientations);
      } else if (window.screen.webkitLockOrientation) {
        succeeded = window.screen.webkitLockOrientation(orientations);
      } else if (window.screen.msLockOrientation) {
        succeeded = window.screen.msLockOrientation(orientations);
      } else {
        return -1;
      }
      if (succeeded) {
        return 0;
      } else {
        return -6;
      }
    }
  Module["_emscripten_lock_orientation"] = _emscripten_lock_orientation;

  function _emscripten_unlock_orientation() {
      if (window.screen.unlockOrientation) {
        window.screen.unlockOrientation();
      } else if (window.screen.mozUnlockOrientation) {
        window.screen.mozUnlockOrientation();
      } else if (window.screen.webkitUnlockOrientation) {
        window.screen.webkitUnlockOrientation();
      } else if (window.screen.msUnlockOrientation) {
        window.screen.msUnlockOrientation();
      } else {
        return -1;
      }
      return 0;
    }
  Module["_emscripten_unlock_orientation"] = _emscripten_unlock_orientation;

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }
  Module["_emscripten_set_fullscreenchange_callback"] = _emscripten_set_fullscreenchange_callback;

  function _emscripten_get_fullscreen_status(fullscreenStatus) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      JSEvents.fillFullscreenChangeEventData(fullscreenStatus);
      return 0;
    }
  Module["_emscripten_get_fullscreen_status"] = _emscripten_get_fullscreen_status;

  function __registerRestoreOldStyle(canvas) {
      var oldWidth = canvas.width;
      var oldHeight = canvas.height;
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
          document.removeEventListener('mozfullscreenchange', restoreOldStyle);
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
          document.removeEventListener('MSFullscreenChange', restoreOldStyle);
  
          canvas.width = oldWidth;
          canvas.height = oldHeight;
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (__currentFullscreenStrategy.canvasResizedCallback) {
            Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      document.addEventListener('mozfullscreenchange', restoreOldStyle);
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      document.addEventListener('MSFullscreenChange', restoreOldStyle);
      return restoreOldStyle;
    }
  Module["__registerRestoreOldStyle"] = __registerRestoreOldStyle;

  function __hideEverythingExceptGivenElement(onlyVisibleElement) {
      var child = onlyVisibleElement;
      var parent = child.parentNode;
      var hiddenElements = [];
      while (child != document.body) {
        var children = parent.children;
        for (var i = 0; i < children.length; ++i) {
          if (children[i] != child) {
            hiddenElements.push({ node: children[i], displayState: children[i].style.display });
            children[i].style.display = 'none';
          }
        }
        child = parent;
        parent = parent.parentNode;
      }
      return hiddenElements;
    }
  Module["__hideEverythingExceptGivenElement"] = __hideEverythingExceptGivenElement;

  function __restoreHiddenElements(hiddenElements) {
      for (var i = 0; i < hiddenElements.length; ++i) {
        hiddenElements[i].node.style.display = hiddenElements[i].displayState;
      }
    }
  Module["__restoreHiddenElements"] = __restoreHiddenElements;

  function __setLetterbox(element, topBottom, leftRight) {
      if (JSEvents.isInternetExplorer()) {
        // Cannot use padding on IE11, because IE11 computes padding in addition to the size, unlike
        // other browsers, which treat padding to be part of the size.
        // e.g.
        // FF, Chrome: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = (1920 - 2*460) x (1080-2*40) = 1000x1000px, and total element size = 1920x1080px.
        //       IE11: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = 1920x1080px and total element size = (1920+2*460) x (1080+2*40)px.
        // IE11  treats margin like Chrome and FF treat padding.
        element.style.marginLeft = element.style.marginRight = leftRight + 'px';
        element.style.marginTop = element.style.marginBottom = topBottom + 'px';
      } else {
        // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
        element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
        element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
      }
    }
  Module["__setLetterbox"] = __setLetterbox;

  var __currentFullscreenStrategy={};
  Module["__currentFullscreenStrategy"] = __currentFullscreenStrategy;

  var __restoreOldWindowedStyle=null;
  Module["__restoreOldWindowedStyle"] = __restoreOldWindowedStyle;

  function __softFullscreenResizeWebGLRenderTarget() {
      var inHiDPIFullscreenMode = __currentFullscreenStrategy.canvasResolutionScaleMode == 2;
      var inAspectRatioFixedFullscreenMode = __currentFullscreenStrategy.scaleMode == 2;
      var inPixelPerfectFullscreenMode = __currentFullscreenStrategy.canvasResolutionScaleMode != 0;
      var inCenteredWithoutScalingFullscreenMode = __currentFullscreenStrategy.scaleMode == 3;
      var screenWidth = inHiDPIFullscreenMode ? Math.round(window.innerWidth*window.devicePixelRatio) : window.innerWidth;
      var screenHeight = inHiDPIFullscreenMode ? Math.round(window.innerHeight*window.devicePixelRatio) : window.innerHeight;
      var w = screenWidth;
      var h = screenHeight;
      var canvas = __currentFullscreenStrategy.target;
      var x = canvas.width;
      var y = canvas.height;
      var topMargin;
  
      if (inAspectRatioFixedFullscreenMode) {
        if (w*y < x*h) h = (w * y / x) | 0;
        else if (w*y > x*h) w = (h * x / y) | 0;
        topMargin = ((screenHeight - h) / 2) | 0;
      }
  
      if (inPixelPerfectFullscreenMode) {
        canvas.width = w;
        canvas.height = h;
        if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, canvas.width, canvas.height);
      }
  
      // Back to CSS pixels.
      if (inHiDPIFullscreenMode) {
        topMargin /= window.devicePixelRatio;
        w /= window.devicePixelRatio;
        h /= window.devicePixelRatio;
        // Round to nearest 4 digits of precision.
        w = Math.round(w*1e4)/1e4;
        h = Math.round(h*1e4)/1e4;
        topMargin = Math.round(topMargin*1e4)/1e4;
      }
  
      if (inCenteredWithoutScalingFullscreenMode) {
        var t = (window.innerHeight - parseInt(canvas.style.height)) / 2;
        var b = (window.innerWidth - parseInt(canvas.style.width)) / 2;
        __setLetterbox(canvas, t, b);
      } else {
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        var b = (window.innerWidth - w) / 2;
        __setLetterbox(canvas, topMargin, b);
      }
  
      if (!inCenteredWithoutScalingFullscreenMode && __currentFullscreenStrategy.canvasResizedCallback) {
        Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
    }
  Module["__softFullscreenResizeWebGLRenderTarget"] = __softFullscreenResizeWebGLRenderTarget;

  function _emscripten_do_request_fullscreen(target, strategy) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!JSEvents.fullscreenEnabled()) return -3;
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
        return -3;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestFullscreen(target, strategy);
    }
  Module["_emscripten_do_request_fullscreen"] = _emscripten_do_request_fullscreen;

  function _emscripten_request_fullscreen(target, deferUntilInEventHandler) {
      var strategy = {};
      // These options perform no added logic, but just bare request fullscreen.
      strategy.scaleMode = 0;
      strategy.canvasResolutionScaleMode = 0;
      strategy.filteringMode = 0;
      strategy.deferUntilInEventHandler = deferUntilInEventHandler;
  
      return _emscripten_do_request_fullscreen(target, strategy);
    }
  Module["_emscripten_request_fullscreen"] = _emscripten_request_fullscreen;

  function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
      var strategy = {};
      strategy.scaleMode = HEAP32[((fullscreenStrategy)>>2)];
      strategy.canvasResolutionScaleMode = HEAP32[(((fullscreenStrategy)+(4))>>2)];
      strategy.filteringMode = HEAP32[(((fullscreenStrategy)+(8))>>2)];
      strategy.deferUntilInEventHandler = deferUntilInEventHandler;
      strategy.canvasResizedCallback = HEAP32[(((fullscreenStrategy)+(12))>>2)];
      strategy.canvasResizedCallbackUserData = HEAP32[(((fullscreenStrategy)+(16))>>2)];
      __currentFullscreenStrategy = strategy;
  
      return _emscripten_do_request_fullscreen(target, strategy);
    }
  Module["_emscripten_request_fullscreen_strategy"] = _emscripten_request_fullscreen_strategy;

  function _emscripten_enter_soft_fullscreen(target, fullscreenStrategy) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
  
      var strategy = {};
      strategy.scaleMode = HEAP32[((fullscreenStrategy)>>2)];
      strategy.canvasResolutionScaleMode = HEAP32[(((fullscreenStrategy)+(4))>>2)];
      strategy.filteringMode = HEAP32[(((fullscreenStrategy)+(8))>>2)];
      strategy.canvasResizedCallback = HEAP32[(((fullscreenStrategy)+(12))>>2)];
      strategy.canvasResizedCallbackUserData = HEAP32[(((fullscreenStrategy)+(16))>>2)];
      strategy.target = target;
      strategy.softFullscreen = true;
  
      var restoreOldStyle = JSEvents.resizeCanvasForFullscreen(target, strategy);
  
      document.documentElement.style.overflow = 'hidden';  // Firefox, Chrome
      document.body.scroll = "no"; // IE11
      document.body.style.margin = '0px'; // Override default document margin area on all browsers.
  
      var hiddenElements = __hideEverythingExceptGivenElement(target);
  
      function restoreWindowedState() {
        restoreOldStyle();
        __restoreHiddenElements(hiddenElements);
        window.removeEventListener('resize', __softFullscreenResizeWebGLRenderTarget);
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
      }
      __restoreOldWindowedStyle = restoreWindowedState;
      __currentFullscreenStrategy = strategy;
      window.addEventListener('resize', __softFullscreenResizeWebGLRenderTarget);
  
      // Inform the caller that the canvas size has changed.
      if (strategy.canvasResizedCallback) {
        Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    }
  Module["_emscripten_enter_soft_fullscreen"] = _emscripten_enter_soft_fullscreen;

  function _emscripten_exit_soft_fullscreen() {
      if (__restoreOldWindowedStyle) __restoreOldWindowedStyle();
      __restoreOldWindowedStyle = null;
  
      return 0;
    }
  Module["_emscripten_exit_soft_fullscreen"] = _emscripten_exit_soft_fullscreen;

  function _emscripten_exit_fullscreen() {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestFullscreen);
  
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      if (__currentFullscreenStrategy.canvasResizedCallback) {
        Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    }
  Module["_emscripten_exit_fullscreen"] = _emscripten_exit_fullscreen;

  function _emscripten_set_pointerlockchange_callback(target, userData, useCapture, callbackfunc) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange");
      return 0;
    }
  Module["_emscripten_set_pointerlockchange_callback"] = _emscripten_set_pointerlockchange_callback;

  function _emscripten_set_pointerlockerror_callback(target, userData, useCapture, callbackfunc) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
        return -1;
      }
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "pointerlockerror");
      JSEvents.registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mozpointerlockerror");
      JSEvents.registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "webkitpointerlockerror");
      JSEvents.registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mspointerlockerror");
      return 0;
    }
  Module["_emscripten_set_pointerlockerror_callback"] = _emscripten_set_pointerlockerror_callback;

  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }
  Module["_emscripten_get_pointerlock_status"] = _emscripten_get_pointerlock_status;

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }
  Module["_emscripten_request_pointerlock"] = _emscripten_request_pointerlock;

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }
  Module["_emscripten_exit_pointerlock"] = _emscripten_exit_pointerlock;

  function _emscripten_vibrate(msecs) {
      if (!navigator.vibrate) return -1;    
      navigator.vibrate(msecs);
      return 0;
    }
  Module["_emscripten_vibrate"] = _emscripten_vibrate;

  function _emscripten_vibrate_pattern(msecsArray, numEntries) {
      if (!navigator.vibrate) return -1;
  
      var vibrateList = [];
      for(var i = 0; i < numEntries; ++i) {
        var msecs = HEAP32[(((msecsArray)+(i*4))>>2)];
        vibrateList.push(msecs);
      }
      navigator.vibrate(vibrateList);
      return 0;
    }
  Module["_emscripten_vibrate_pattern"] = _emscripten_vibrate_pattern;

  function _emscripten_set_visibilitychange_callback(userData, useCapture, callbackfunc) {
      JSEvents.registerVisibilityChangeEventCallback(document, userData, useCapture, callbackfunc, 21, "visibilitychange");
      return 0;
    }
  Module["_emscripten_set_visibilitychange_callback"] = _emscripten_set_visibilitychange_callback;

  function _emscripten_get_visibility_status(visibilityStatus) {
      if (typeof document.visibilityState === 'undefined' && typeof document.hidden === 'undefined') {
        return -1;
      }
      JSEvents.fillVisibilityChangeEventData(visibilityStatus);  
      return 0;
    }
  Module["_emscripten_get_visibility_status"] = _emscripten_get_visibility_status;

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }
  Module["_emscripten_set_touchstart_callback"] = _emscripten_set_touchstart_callback;

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }
  Module["_emscripten_set_touchend_callback"] = _emscripten_set_touchend_callback;

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }
  Module["_emscripten_set_touchmove_callback"] = _emscripten_set_touchmove_callback;

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }
  Module["_emscripten_set_touchcancel_callback"] = _emscripten_set_touchcancel_callback;

  function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
      return 0;
    }
  Module["_emscripten_set_gamepadconnected_callback"] = _emscripten_set_gamepadconnected_callback;

  function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
      return 0;
   }
  Module["_emscripten_set_gamepaddisconnected_callback"] = _emscripten_set_gamepaddisconnected_callback;

  function __emscripten_sample_gamepad_data() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return;
  
      // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
      if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
      }
    }
  Module["__emscripten_sample_gamepad_data"] = __emscripten_sample_gamepad_data;

  function _emscripten_get_num_gamepads() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return 0;
  
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
      return JSEvents.lastGamepadState.length;
    }
  Module["_emscripten_get_num_gamepads"] = _emscripten_get_num_gamepads;

  function _emscripten_get_gamepad_status(index, gamepadState) {
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }
  Module["_emscripten_get_gamepad_status"] = _emscripten_get_gamepad_status;

  function _emscripten_set_beforeunload_callback(userData, callbackfunc) {
      if (typeof window.onbeforeunload === 'undefined') return -1;
      JSEvents.registerBeforeUnloadEventCallback(window, userData, true, callbackfunc, 28, "beforeunload"); 
      return 0;
    }
  Module["_emscripten_set_beforeunload_callback"] = _emscripten_set_beforeunload_callback;

  function _emscripten_set_batterychargingchange_callback(userData, callbackfunc) {
      if (!JSEvents.battery()) return -1; 
      JSEvents.registerBatteryEventCallback(JSEvents.battery(), userData, true, callbackfunc, 29, "chargingchange");
      return 0;
    }
  Module["_emscripten_set_batterychargingchange_callback"] = _emscripten_set_batterychargingchange_callback;

  function _emscripten_set_batterylevelchange_callback(userData, callbackfunc) {
      if (!JSEvents.battery()) return -1; 
      JSEvents.registerBatteryEventCallback(JSEvents.battery(), userData, true, callbackfunc, 30, "levelchange");
      return 0;
    }
  Module["_emscripten_set_batterylevelchange_callback"] = _emscripten_set_batterylevelchange_callback;

  function _emscripten_get_battery_status(batteryState) {
      if (!JSEvents.battery()) return -1; 
      JSEvents.fillBatteryEventData(batteryState, JSEvents.battery());
      return 0;
    }
  Module["_emscripten_get_battery_status"] = _emscripten_get_battery_status;

  function _emscripten_webgl_init_context_attributes(attributes) {
      HEAP32[((attributes)>>2)]=1;
      HEAP32[(((attributes)+(4))>>2)]=1;
      HEAP32[(((attributes)+(8))>>2)]=0;
      HEAP32[(((attributes)+(12))>>2)]=1;
      HEAP32[(((attributes)+(16))>>2)]=1;
      HEAP32[(((attributes)+(20))>>2)]=0;
      HEAP32[(((attributes)+(24))>>2)]=0;
      HEAP32[(((attributes)+(28))>>2)]=0;
      HEAP32[(((attributes)+(32))>>2)]=1;
      HEAP32[(((attributes)+(36))>>2)]=0;
      HEAP32[(((attributes)+(40))>>2)]=1;
      HEAP32[(((attributes)+(44))>>2)]=0;
    }
  Module["_emscripten_webgl_init_context_attributes"] = _emscripten_webgl_init_context_attributes;

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_pvrtc",
                                               "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB",
                                               "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  Module["GL"] = GL;function _emscripten_webgl_create_context(target, attributes) {
      var contextAttributes = {};
      contextAttributes['alpha'] = !!HEAP32[((attributes)>>2)];
      contextAttributes['depth'] = !!HEAP32[(((attributes)+(4))>>2)];
      contextAttributes['stencil'] = !!HEAP32[(((attributes)+(8))>>2)];
      contextAttributes['antialias'] = !!HEAP32[(((attributes)+(12))>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[(((attributes)+(16))>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[(((attributes)+(20))>>2)];
      contextAttributes['preferLowPowerToHighPerformance'] = !!HEAP32[(((attributes)+(24))>>2)];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[(((attributes)+(28))>>2)];
      contextAttributes['majorVersion'] = HEAP32[(((attributes)+(32))>>2)];
      contextAttributes['minorVersion'] = HEAP32[(((attributes)+(36))>>2)];
      var enableExtensionsByDefault = HEAP32[(((attributes)+(40))>>2)];
      contextAttributes['explicitSwapControl'] = HEAP32[(((attributes)+(44))>>2)];
  
      target = Pointer_stringify(target);
      var canvas;
      if ((!target || target === '#canvas') && Module['canvas']) {
        canvas = Module['canvas'].id ? (GL.offscreenCanvases[Module['canvas'].id] || JSEvents.findEventTarget(Module['canvas'].id)) : Module['canvas'];
      } else {
        canvas = GL.offscreenCanvases[target] || JSEvents.findEventTarget(target);
      }
      if (!canvas) {
        return 0;
      }
      if (contextAttributes['explicitSwapControl']) {
        console.error('emscripten_webgl_create_context failed: explicitSwapControl is not supported, please rebuild with -s OFFSCREENCANVAS_SUPPORT=1 to enable targeting the experimental OffscreenCanvas specification!');
        return 0;
      }
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }
  Module["_emscripten_webgl_create_context"] = _emscripten_webgl_create_context;

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }
  Module["_emscripten_webgl_make_context_current"] = _emscripten_webgl_make_context_current;

  function _emscripten_webgl_get_current_context() {
      return GL.currentContext ? GL.currentContext.handle : 0;
    }
  Module["_emscripten_webgl_get_current_context"] = _emscripten_webgl_get_current_context;

  function _emscripten_webgl_get_drawing_buffer_size(contextHandle, width, height) {
      var GLContext = GL.getContext(contextHandle);
  
      if (!GLContext || !GLContext.GLctx || !width || !height) {
        return -5;
      }
      HEAP32[((width)>>2)]=GLContext.GLctx.drawingBufferWidth;
      HEAP32[((height)>>2)]=GLContext.GLctx.drawingBufferHeight;
      return 0;
    }
  Module["_emscripten_webgl_get_drawing_buffer_size"] = _emscripten_webgl_get_drawing_buffer_size;

  function _emscripten_webgl_commit_frame() {
      if (!GL.currentContext || !GL.currentContext.GLctx) {
        return -3;
      }
      if (!GL.currentContext.GLctx.commit) {
        return -1;
      }
      if (!GL.currentContext.attributes.explicitSwapControl) {
        return -3;
      }
      GL.currentContext.GLctx.commit();
      return 0;
    }
  Module["_emscripten_webgl_commit_frame"] = _emscripten_webgl_commit_frame;

  function _emscripten_webgl_destroy_context(contextHandle) {
      GL.deleteContext(contextHandle);
    }
  Module["_emscripten_webgl_destroy_context"] = _emscripten_webgl_destroy_context;

  function _emscripten_webgl_enable_extension(contextHandle, extension) {
      var context = GL.getContext(contextHandle);
      var extString = Pointer_stringify(extension);
      if (extString.indexOf('GL_') == 0) extString = extString.substr(3); // Allow enabling extensions both with "GL_" prefix and without.
      var ext = context.GLctx.getExtension(extString);
      return ext ? 1 : 0;
    }
  Module["_emscripten_webgl_enable_extension"] = _emscripten_webgl_enable_extension;

  function _emscripten_set_webglcontextlost_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost");
      return 0;
    }
  Module["_emscripten_set_webglcontextlost_callback"] = _emscripten_set_webglcontextlost_callback;

  function _emscripten_set_webglcontextrestored_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 32, "webglcontextrestored");
      return 0;
    }
  Module["_emscripten_set_webglcontextrestored_callback"] = _emscripten_set_webglcontextrestored_callback;

  function _emscripten_is_webgl_context_lost(target) {
      // TODO: In the future if multiple GL contexts are supported, use the 'target' parameter to find the canvas to query.
      if (!Module['ctx']) return true; // No context ~> lost context.
      return Module['ctx'].isContextLost();
    }
  Module["_emscripten_is_webgl_context_lost"] = _emscripten_is_webgl_context_lost;

  function _emscripten_set_canvas_element_size(target, width, height) {
      if (target) target = JSEvents.findEventTarget(target);
      else target = Module['canvas'];
      if (!target) return -4;
  
      target.width = width;
      target.height = height;
      return 0;
    }
  Module["_emscripten_set_canvas_element_size"] = _emscripten_set_canvas_element_size;

  function _emscripten_get_canvas_element_size(target, width, height) {
      if (target) target = JSEvents.findEventTarget(target);
      else target = Module['canvas'];
      if (!target) return -4;
  
      HEAP32[((width)>>2)]=target.width;
      HEAP32[((height)>>2)]=target.height;
      return 0;
    }
  Module["_emscripten_get_canvas_element_size"] = _emscripten_get_canvas_element_size;

  function _emscripten_set_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      target.style.setProperty("width", width + "px");
      target.style.setProperty("height", height + "px");
  
      return 0;
    }
  Module["_emscripten_set_element_css_size"] = _emscripten_set_element_css_size;

  function _emscripten_get_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }
  Module["_emscripten_get_element_css_size"] = _emscripten_get_element_css_size;







  var PROXYFS={mount:function (mount) {
        return PROXYFS.createNode(null, '/', mount.opts.fs.lstat(mount.opts.root).mode, 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = PROXYFS.node_ops;
        node.stream_ops = PROXYFS.stream_ops;
        return node;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },node_ops:{getattr:function (node) {
          var path = PROXYFS.realPath(node);
          var stat;
          try {
            stat = node.mount.opts.fs.lstat(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = PROXYFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              node.mount.opts.fs.chmod(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              node.mount.opts.fs.utime(path, date, date);
            }
            if (attr.size !== undefined) {
              node.mount.opts.fs.truncate(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          try {
            var path = PATH.join2(PROXYFS.realPath(parent), name);
            var mode = parent.mount.opts.fs.lstat(path).mode;
            var node = PROXYFS.createNode(parent, name, mode);
            return node;
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },mknod:function (parent, name, mode, dev) {
          var node = PROXYFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = PROXYFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              node.mount.opts.fs.mkdir(path, node.mode);
            } else {
              node.mount.opts.fs.writeFile(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = PROXYFS.realPath(oldNode);
          var newPath = PATH.join2(PROXYFS.realPath(newDir), newName);
          try {
            oldNode.mount.opts.fs.rename(oldPath, newPath);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(PROXYFS.realPath(parent), name);
          try {
            parent.mount.opts.fs.unlink(path);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(PROXYFS.realPath(parent), name);
          try {
            parent.mount.opts.fs.rmdir(path);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = PROXYFS.realPath(node);
          try {
            return node.mount.opts.fs.readdir(path);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(PROXYFS.realPath(parent), newName);
          try {
            parent.mount.opts.fs.symlink(oldPath, newPath);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = PROXYFS.realPath(node);
          try {
            return node.mount.opts.fs.readlink(path);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = PROXYFS.realPath(stream.node);
          try {
            stream.nfd = stream.node.mount.opts.fs.open(path,stream.flags);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            stream.node.mount.opts.fs.close(stream.nfd);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          try {
            return stream.node.mount.opts.fs.read(stream.nfd, buffer, offset, length, position);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return stream.node.mount.opts.fs.write(stream.nfd, buffer, offset, length, position);
          } catch(e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = stream.node.mount.opts.fs.fstat(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  Module["PROXYFS"] = PROXYFS;


  function ___set_network_callback(event, userData, callback) {
      function _callback(data) {
        try {
          if (event === 'error') {
            var sp = stackSave();
            var msg = allocate(intArrayFromString(data[2]), 'i8', ALLOC_STACK);
            Module['dynCall_viiii'](callback, data[0], data[1], msg, userData);
            stackRestore(sp);
          } else {
            Module['dynCall_vii'](callback, data, userData);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
      };
  
      Module['noExitRuntime'] = true;
      Module['websocket']['on'](event, callback ? _callback : null);
    }
  Module["___set_network_callback"] = ___set_network_callback;

  function _emscripten_set_socket_error_callback(userData, callback) {
      ___set_network_callback('error', userData, callback);
    }
  Module["_emscripten_set_socket_error_callback"] = _emscripten_set_socket_error_callback;

  function _emscripten_set_socket_open_callback(userData, callback) {
      ___set_network_callback('open', userData, callback);
    }
  Module["_emscripten_set_socket_open_callback"] = _emscripten_set_socket_open_callback;

  function _emscripten_set_socket_listen_callback(userData, callback) {
      ___set_network_callback('listen', userData, callback);
    }
  Module["_emscripten_set_socket_listen_callback"] = _emscripten_set_socket_listen_callback;

  function _emscripten_set_socket_connection_callback(userData, callback) {
      ___set_network_callback('connection', userData, callback);
    }
  Module["_emscripten_set_socket_connection_callback"] = _emscripten_set_socket_connection_callback;

  function _emscripten_set_socket_message_callback(userData, callback) {
      ___set_network_callback('message', userData, callback);
    }
  Module["_emscripten_set_socket_message_callback"] = _emscripten_set_socket_message_callback;

  function _emscripten_set_socket_close_callback(userData, callback) {
      ___set_network_callback('close', userData, callback);
    }
  Module["_emscripten_set_socket_close_callback"] = _emscripten_set_socket_close_callback;


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }
  Module["_SDL_RWFromConstMem"] = _SDL_RWFromConstMem;function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }
  Module["_TTF_FontHeight"] = _TTF_FontHeight;function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }
  Module["_TTF_SizeText"] = _TTF_SizeText;function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = SDL.makeFontString(h, fontData.name);
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      // use bottom alligment, because it works
      // same in all browsers, more info here:
      // https://bugzilla.mozilla.org/show_bug.cgi?id=737852
      surfData.ctx.textBaseline = 'bottom';
      surfData.ctx.fillText(text, 0, h|0);
      surfData.ctx.restore();
      return surf;
    }
  Module["_TTF_RenderText_Solid"] = _TTF_RenderText_Solid;function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Module['dynCall_v'](SDL.hookMusicFinished);
      }
      return 0;
    }
  Module["_Mix_HaltMusic"] = _Mix_HaltMusic;function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }
  Module["_Mix_PlayMusic"] = _Mix_PlayMusic;function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }
  Module["_Mix_FreeChunk"] = _Mix_FreeChunk;function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }
  Module["_Mix_LoadWAV_RW"] = _Mix_LoadWAV_RW;function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }
  Module["_Mix_PlayChannel"] = _Mix_PlayChannel;function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }
  Module["_SDL_PauseAudio"] = _SDL_PauseAudio;function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }
  Module["_SDL_CloseAudio"] = _SDL_CloseAudio;function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ],
          //     surfData.image.data[i*4 +1],
          //     surfData.image.data[i*4 +2],
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  Module["_SDL_LockSurface"] = _SDL_LockSurface;
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }
  Module["_SDL_FreeRW"] = _SDL_FreeRW;function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        var cleanup = function() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        }
        var addCleanup = function(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        var callStbImage = function(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            warnOnce('Cannot find preloaded image ' + filename);
            warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 2) {
            // grayscale + alpha
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var gray = HEAPU8[((sourcePtr++)>>0)];
              var alpha = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = alpha;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  Module["_IMG_Load_RW"] = _IMG_Load_RW;
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }
  Module["_SDL_RWFromFile"] = _SDL_RWFromFile;function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }
  Module["_IMG_Load"] = _IMG_Load;function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }
  Module["_SDL_UpperBlitScaled"] = _SDL_UpperBlitScaled;function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }
  Module["_SDL_UpperBlit"] = _SDL_UpperBlit;function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }
  Module["_SDL_GetTicks"] = _SDL_GetTicks;var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0),
          alpha: (SDL.glAttributes[3 /*SDL_GL_ALPHA_SIZE*/] > 0)
        };
  
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
  
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
  
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
  
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
  
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
  
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
  
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
  
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
  
            var firstTouch = touches[0];
            if (firstTouch) {
              if (event.type == 'touchstart') {
                SDL.DOMButtons[0] = 1;
              }
              var mouseEventType;
              switch(event.type) {
                case 'touchstart': mouseEventType = 'mousedown'; break;
                case 'touchmove': mouseEventType = 'mousemove'; break;
              }
              var mouseEvent = {
                type: mouseEventType,
                button: 0,
                pageX: firstTouch.clientX,
                pageY: firstTouch.clientY
              };
              SDL.events.push(mouseEvent);
            }
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
  
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullscreen'](/*lockPointer=*/true, /*resizeCanvas=*/true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Module['dynCall_iii'](SDL.eventHandler, SDL.eventHandlerContext, SDL.eventHandlerTemp);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY;
            break;
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },makeFontString:function (height, fontName) {
        if (fontName.charAt(0) != "'" && fontName.charAt(0) != '"') {
          // https://developer.mozilla.org/ru/docs/Web/CSS/font-family
          // Font family names containing whitespace should be quoted.
          // BTW, quote all font names is easier than searching spaces
          fontName = '"' + fontName + '"';
        }
        return height + 'px ' + fontName + ', serif';
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = SDL.makeFontString(h, fontData.name);
        var tempCtx = SDL.ttfContext;
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          // avoid Chrome bug
          // If posz = 0, the sound will come from only the right.
          // By posz = -0.5 (slightly ahead), the sound will come from right and left correctly.
          audio.webAudioPannerNode["setPosition"](0, 0, -.5);
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop(0); // 0 is a default parameter, but WebKit is confused by it #3861
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit, 16-bit or float as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          } else if (SDL.audio.format == 0x8120 /*AUDIO_F32*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAPF32[(((heapPtr)+((j*numChannels + c)*4))>>2)]);
            }
          } else {
            throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button['pressed'];
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // If joystick was removed, state returns null.
          if (typeof state === 'undefined') return;
          if (state === null) return;
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Make sure value is properly clamped
        value = Math.min(1, Math.max(value, -1));
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};
  Module["SDL"] = SDL;


  function _SDL_Linked_Version() {
      if (SDL.version === null) {
        SDL.version = _malloc(3);
        HEAP8[((SDL.version + 0)>>0)]=1;
        HEAP8[((SDL.version + 1)>>0)]=3;
        HEAP8[((SDL.version + 2)>>0)]=0;
      }
      return SDL.version;
    }
  Module["_SDL_Linked_Version"] = _SDL_Linked_Version;


  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */;
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }
  Module["_SDL_Init"] = _SDL_Init;


  function _SDL_WasInit() {
      if (SDL.startTime === null) {
        _SDL_Init();
      }
      return 1;
    }
  Module["_SDL_WasInit"] = _SDL_WasInit;


  function _SDL_GetVideoInfo() {
      // %struct.SDL_VideoInfo = type { i32, i32, %struct.SDL_PixelFormat*, i32, i32 } - 5 fields of quantum size
      var ret = _malloc(5 * 4);
      HEAP32[((ret+0)>>2)]=0; // TODO
      HEAP32[((ret+4)>>2)]=0; // TODO
      HEAP32[((ret+8)>>2)]=0;
      HEAP32[((ret+12)>>2)]=Module["canvas"].width;
      HEAP32[((ret+16)>>2)]=Module["canvas"].height;
      return ret;
    }
  Module["_SDL_GetVideoInfo"] = _SDL_GetVideoInfo;

  function _SDL_ListModes(format, flags) {
      return -1; // -1 == all modes are ok. TODO
    }
  Module["_SDL_ListModes"] = _SDL_ListModes;

  function _SDL_VideoModeOK(width, height, depth, flags) {
      // SDL_VideoModeOK returns 0 if the requested mode is not supported under any bit depth, or returns the
      // bits-per-pixel of the closest available mode with the given width, height and requested surface flags
      return depth; // all modes are ok.
    }
  Module["_SDL_VideoModeOK"] = _SDL_VideoModeOK;

  
  function _SDL_VideoDriverName(buf, max_size) {
      if (SDL.startTime === null) {
        return 0; //return NULL
      }
      //driverName - emscripten_sdl_driver
      var driverName = [101, 109, 115, 99, 114, 105, 112, 116, 101,
        110, 95, 115, 100, 108, 95, 100, 114, 105, 118, 101, 114];
  
      var index = 0;
      var size  = driverName.length;
  
      if (max_size <= size) {
        size = max_size - 1; //-1 cause null-terminator
      }
  
      while (index < size) {
          var value = driverName[index];
          HEAP8[(((buf)+(index))>>0)]=value;
          index++;
      }
  
      HEAP8[(((buf)+(index))>>0)]=0;
      return buf;
    }
  Module["_SDL_VideoDriverName"] = _SDL_VideoDriverName;function _SDL_AudioDriverName(buf, max_size) {
      return _SDL_VideoDriverName(buf, max_size);
    }
  Module["_SDL_AudioDriverName"] = _SDL_AudioDriverName;




  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }
  Module["_SDL_SetVideoMode"] = _SDL_SetVideoMode;


  function _SDL_GetVideoSurface() {
      return SDL.screen;
    }
  Module["_SDL_GetVideoSurface"] = _SDL_GetVideoSurface;


  function _SDL_AudioQuit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
          SDL.channels[i].audio = undefined;
        }
      }
      if (SDL.music.audio) SDL.music.audio.pause();
      SDL.music.audio = undefined;
    }
  Module["_SDL_AudioQuit"] = _SDL_AudioQuit;

  function _SDL_VideoQuit() {
      Module.print('SDL_VideoQuit called (and ignored)');
    }
  Module["_SDL_VideoQuit"] = _SDL_VideoQuit;

  function _SDL_QuitSubSystem(flags) {
      Module.print('SDL_QuitSubSystem called (and ignored)');
    }
  Module["_SDL_QuitSubSystem"] = _SDL_QuitSubSystem;

  function _SDL_Quit() {
      _SDL_AudioQuit();
      Module.print('SDL_Quit called (and ignored)');
    }
  Module["_SDL_Quit"] = _SDL_Quit;




  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          if (isScreen && SDL.defaults.opaqueFrontBuffer) {
            num = data32.length;
            // logically we need to do
            //      while (dst < num) {
            //          data32[dst++] = HEAP32[src++] | 0xff000000
            //      }
            // the following code is faster though, because
            // .set() is almost free - easily 10x faster due to
            // native memcpy efficiencies, and the remaining loop
            // just stores, not load + store, so it is faster
            data32.set(HEAP32.subarray(src, src + num));
            var data8 = new Uint8Array(data.buffer);
            var i = 3;
            var j = i + 4*num;
            if (num % 8 == 0) {
              // unrolling gives big speedups
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
             } else {
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
            }
          } else {
            data32.set(HEAP32.subarray(src, src + data32.length));
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors; // TODO: optimize using colors32
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)>>0)] * 4;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }
  Module["_SDL_UnlockSurface"] = _SDL_UnlockSurface;

  function _SDL_Flip(surf) {
      // We actually do this in Unlock, since the screen surface has as its canvas
      // backing the page canvas element
    }
  Module["_SDL_Flip"] = _SDL_Flip;

  function _SDL_UpdateRect(surf, x, y, w, h) {
      // We actually do the whole screen in Unlock...
    }
  Module["_SDL_UpdateRect"] = _SDL_UpdateRect;

  function _SDL_UpdateRects(surf, numrects, rects) {
      // We actually do the whole screen in Unlock...
    }
  Module["_SDL_UpdateRects"] = _SDL_UpdateRects;

  function _SDL_Delay(delay) {
      if (!ENVIRONMENT_IS_WORKER) abort('SDL_Delay called on the main thread! Potential infinite loop, quitting.');
      // horrible busy-wait, but in a worker it at least does not block rendering
      var now = Date.now();
      while (Date.now() - now < delay) {}
    }
  Module["_SDL_Delay"] = _SDL_Delay;


  function _SDL_WM_SetCaption(title, icon) {
      if (title && typeof Module['setWindowTitle'] !== 'undefined') {
        Module['setWindowTitle'](Pointer_stringify(title));
      }
      icon = icon && Pointer_stringify(icon);
    }
  Module["_SDL_WM_SetCaption"] = _SDL_WM_SetCaption;

  function _SDL_EnableKeyRepeat(delay, interval) {
      // TODO
    }
  Module["_SDL_EnableKeyRepeat"] = _SDL_EnableKeyRepeat;


  function _SDL_GetKeyboardState(numKeys) {
      if (numKeys) {
        HEAP32[((numKeys)>>2)]=65536;
      }
      return SDL.keyboardState;
    }
  Module["_SDL_GetKeyboardState"] = _SDL_GetKeyboardState;

  function _SDL_GetKeyState() {
      return _SDL_GetKeyboardState();
    }
  Module["_SDL_GetKeyState"] = _SDL_GetKeyState;


  function _SDL_GetKeyName(key) {
      if (!SDL.keyName) {
        SDL.keyName = allocate(intArrayFromString('unknown key'), 'i8', ALLOC_NORMAL);
      }
      return SDL.keyName;
    }
  Module["_SDL_GetKeyName"] = _SDL_GetKeyName;


  function _SDL_GetModState() {
      return SDL.modState;
    }
  Module["_SDL_GetModState"] = _SDL_GetModState;


  function _SDL_GetMouseState(x, y) {
      if (x) HEAP32[((x)>>2)]=Browser.mouseX;
      if (y) HEAP32[((y)>>2)]=Browser.mouseY;
      return SDL.buttonState;
    }
  Module["_SDL_GetMouseState"] = _SDL_GetMouseState;


  function _SDL_WarpMouse(x, y) {
      return; // TODO: implement this in a non-buggy way. Need to keep relative mouse movements correct after calling this
      var rect = Module["canvas"].getBoundingClientRect();
      SDL.events.push({
        type: 'mousemove',
        pageX: x + (window.scrollX + rect.left),
        pageY: y + (window.scrollY + rect.top)
      });
    }
  Module["_SDL_WarpMouse"] = _SDL_WarpMouse;


  function _SDL_ShowCursor(toggle) {
      switch (toggle) {
        case 0: // SDL_DISABLE
          if (Browser.isFullscreen) { // only try to lock the pointer when in full screen mode
            Module['canvas'].requestPointerLock();
            return 0;
          } else { // else return SDL_ENABLE to indicate the failure
            return 1;
          }
          break;
        case 1: // SDL_ENABLE
          Module['canvas'].exitPointerLock();
          return 1;
          break;
        case -1: // SDL_QUERY
          return !Browser.pointerLock;
          break;
        default:
          console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
          break;
      }
    }
  Module["_SDL_ShowCursor"] = _SDL_ShowCursor;


  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }
  Module["_SDL_GetError"] = _SDL_GetError;

  function _SDL_SetError() {}
  Module["_SDL_SetError"] = _SDL_SetError;

  function _SDL_malloc() {
  return _malloc.apply(null, arguments)
  }
  Module["_SDL_malloc"] = _SDL_malloc;

  function _SDL_free() {
  return _free.apply(null, arguments)
  }
  Module["_SDL_free"] = _SDL_free;


  function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
      return SDL.makeSurface(width, height, flags, false, 'CreateRGBSurface', rmask, gmask, bmask, amask);
    }
  Module["_SDL_CreateRGBSurface"] = _SDL_CreateRGBSurface;


  function _SDL_CreateRGBSurfaceFrom(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask) {
      var surf = SDL.makeSurface(width, height, 0, false, 'CreateRGBSurfaceFrom', rmask, gmask, bmask, amask);
  
      if (depth !== 32) {
        // TODO: Actually fill pixel data to created surface.
        // TODO: Take into account depth and pitch parameters.
        console.log('TODO: Partially unimplemented SDL_CreateRGBSurfaceFrom called!');
        return surf;
      }
  
      var data = SDL.surfaces[surf];
      var image = data.ctx.createImageData(width, height);
      var pitchOfDst = width * 4;
  
      for (var row = 0; row < height; ++row) {
        var baseOfSrc = row * pitch;
        var baseOfDst = row * pitchOfDst;
  
        for (var col = 0; col < width * 4; ++col) {
          image.data[baseOfDst + col] = HEAPU8[(((pixels)+(baseOfDst + col))>>0)];
        }
      }
  
      data.ctx.putImageData(image, 0, 0);
  
      return surf;
    }
  Module["_SDL_CreateRGBSurfaceFrom"] = _SDL_CreateRGBSurfaceFrom;


  function _SDL_ConvertSurface(surf, format, flags) {
      if  (format) {
        SDL.checkPixelFormat(format);
      }
  
      var oldData = SDL.surfaces[surf];
      var ret = SDL.makeSurface(oldData.width, oldData.height, oldData.flags, false, 'copy:' + oldData.source);
      var newData = SDL.surfaces[ret];
  
      newData.ctx.globalCompositeOperation = "copy";
      newData.ctx.drawImage(oldData.canvas, 0, 0);
      newData.ctx.globalCompositeOperation = oldData.ctx.globalCompositeOperation;
      return ret;
    }
  Module["_SDL_ConvertSurface"] = _SDL_ConvertSurface;

  function _SDL_DisplayFormatAlpha(surf) {
      return _SDL_ConvertSurface(surf);
    }
  Module["_SDL_DisplayFormatAlpha"] = _SDL_DisplayFormatAlpha;


  function _SDL_FreeSurface(surf) {
      if (surf) SDL.freeSurface(surf);
    }
  Module["_SDL_FreeSurface"] = _SDL_FreeSurface;





  function _SDL_LowerBlit() {
  return _SDL_UpperBlit.apply(null, arguments)
  }
  Module["_SDL_LowerBlit"] = _SDL_LowerBlit;

  function _SDL_LowerBlitScaled() {
  return _SDL_UpperBlitScaled.apply(null, arguments)
  }
  Module["_SDL_LowerBlitScaled"] = _SDL_LowerBlitScaled;


  function _SDL_GetClipRect(surf, rect) {
      assert(rect);
  
      var surfData = SDL.surfaces[surf];
      var r = surfData.clipRect || { x: 0, y: 0, w: surfData.width, h: surfData.height };
      SDL.updateRect(rect, r);
    }
  Module["_SDL_GetClipRect"] = _SDL_GetClipRect;


  function _SDL_SetClipRect(surf, rect) {
      var surfData = SDL.surfaces[surf];
  
      if (rect) {
        surfData.clipRect = SDL.intersectionOfRects({ x: 0, y: 0, w: surfData.width, h: surfData.height }, SDL.loadRect(rect));
      } else {
        delete surfData.clipRect;
      }
    }
  Module["_SDL_SetClipRect"] = _SDL_SetClipRect;


  function _SDL_FillRect(surf, rect, color) {
      var surfData = SDL.surfaces[surf];
      assert(!surfData.locked); // but we could unlock and re-lock if we must..
  
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        //in SDL_HWPALETTE color is index (0..255)
        //so we should translate 1 byte value to
        //32 bit canvas
        color = surfData.colors32[color];
      }
  
      var r = rect ? SDL.loadRect(rect) : { x: 0, y: 0, w: surfData.width, h: surfData.height };
  
      if (surfData.clipRect) {
        r = SDL.intersectionOfRects(surfData.clipRect, r);
  
        if (rect) {
          SDL.updateRect(rect, r);
        }
      }
  
      surfData.ctx.save();
      surfData.ctx.fillStyle = SDL.translateColorToCSSRGBA(color);
      surfData.ctx.fillRect(r.x, r.y, r.w, r.h);
      surfData.ctx.restore();
      return 0;
    }
  Module["_SDL_FillRect"] = _SDL_FillRect;


  function _SDL_BlitSurface(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }
  Module["_SDL_BlitSurface"] = _SDL_BlitSurface;


  function _SDL_BlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }
  Module["_SDL_BlitScaled"] = _SDL_BlitScaled;

  function _zoomSurface(src, x, y, smooth) {
      var srcData = SDL.surfaces[src];
      var w = srcData.width * x;
      var h = srcData.height * y;
      var ret = SDL.makeSurface(Math.abs(w), Math.abs(h), srcData.flags, false, 'zoomSurface');
      var dstData = SDL.surfaces[ret];
      if (x >= 0 && y >= 0) dstData.ctx.drawImage(srcData.canvas, 0, 0, w, h);
      else {
        dstData.ctx.save();
        dstData.ctx.scale(x < 0 ? -1 : 1, y < 0 ? -1 : 1);
        dstData.ctx.drawImage(srcData.canvas, w < 0 ? w : 0, h < 0 ? h : 0, Math.abs(w), Math.abs(h));
        // XXX I think this should work according to the spec, but currently
        // fails on FF: dstData.ctx.drawImage(srcData.canvas, 0, 0, w, h);
        dstData.ctx.restore();
      }
      return ret;
    }
  Module["_zoomSurface"] = _zoomSurface;

  function _rotozoomSurface(src, angle, zoom, smooth) {
      if (angle % 360 === 0) {
        return _zoomSurface(src, zoom, zoom, smooth);
      }
      var srcData = SDL.surfaces[src];
      var w = srcData.width * zoom;
      var h = srcData.height * zoom;
      var diagonal = Math.ceil(Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2)));
      var ret = SDL.makeSurface(diagonal, diagonal, srcData.flags, false, 'rotozoomSurface');
      var dstData = SDL.surfaces[ret];
      dstData.ctx.translate(diagonal / 2, diagonal / 2);
      dstData.ctx.rotate(-angle * Math.PI / 180);
      dstData.ctx.drawImage(srcData.canvas, -w / 2, -h / 2, w, h);
      return ret;
    }
  Module["_rotozoomSurface"] = _rotozoomSurface;


  function _SDL_SetAlpha(surf, flag, alpha) {
      var surfData = SDL.surfaces[surf];
      surfData.alpha = alpha;
  
      if (!(flag & 0x00010000)) { // !SDL_SRCALPHA
        surfData.alpha = 255;
      }
    }
  Module["_SDL_SetAlpha"] = _SDL_SetAlpha;

  function _SDL_SetColorKey(surf, flag, key) {
      // SetColorKey assigns one color to be rendered as transparent. I don't
      // think the canvas API allows for anything like this, and iterating through
      // each pixel to replace that color seems prohibitively expensive.
      warnOnce('SDL_SetColorKey is a no-op for performance reasons');
      return 0;
    }
  Module["_SDL_SetColorKey"] = _SDL_SetColorKey;




  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }
  Module["_SDL_PollEvent"] = _SDL_PollEvent;


  function _SDL_PushEvent(ptr) {
      var copy = _malloc(28);
      _memcpy(copy, ptr, 28);
      SDL.events.push(copy);
      return 0;
    }
  Module["_SDL_PushEvent"] = _SDL_PushEvent;


  function _SDL_PeepEvents(events, requestedEventCount, action, from, to) {
      switch(action) {
        case 2: { // SDL_GETEVENT
          // We only handle 1 event right now
          assert(requestedEventCount == 1);
  
          var index = 0;
          var retrievedEventCount = 0;
          // this should look through the entire queue until it has filled up the events
          // array
          while (index < SDL.events.length && retrievedEventCount < requestedEventCount) {
            var event = SDL.events[index];
            var type = SDL.DOMEventToSDLEvent[event.type];
            if (from <= type && type <= to) {
              if (SDL.makeCEvent(event, events) === false) {
                index++;
              } else {
                SDL.events.splice(index, 1);
                retrievedEventCount++;
              }
            } else {
              index++;
            }
          }
          return retrievedEventCount;
        }
        default: throw 'SDL_PeepEvents does not yet support that action: ' + action;
      }
    }
  Module["_SDL_PeepEvents"] = _SDL_PeepEvents;


  function _SDL_PumpEvents(){
      SDL.events.forEach(function(event) {
        SDL.handleEvent(event);
      });
    }
  Module["_SDL_PumpEvents"] = _SDL_PumpEvents;


  function _emscripten_SDL_SetEventHandler(handler, userdata) {
      SDL.eventHandler = handler;
      SDL.eventHandlerContext = userdata;
  
      // All SDLEvents take the same amount of memory
      if (!SDL.eventHandlerTemp) SDL.eventHandlerTemp = _malloc(28);
    }
  Module["_emscripten_SDL_SetEventHandler"] = _emscripten_SDL_SetEventHandler;


  function _SDL_SetColors(surf, colors, firstColor, nColors) {
      var surfData = SDL.surfaces[surf];
  
      // we should create colors array
      // only once cause client code
      // often wants to change portion
      // of palette not all palette.
      if (!surfData.colors) {
        var buffer = new ArrayBuffer(256 * 4); // RGBA, A is unused, but faster this way
        surfData.colors = new Uint8Array(buffer);
        surfData.colors32 = new Uint32Array(buffer);
      }
  
      for (var i = 0; i < nColors; ++i) {
        var index = (firstColor + i) * 4;
        surfData.colors[index] = HEAPU8[(((colors)+(i*4))>>0)];
        surfData.colors[index + 1] = HEAPU8[(((colors)+(i*4 + 1))>>0)];
        surfData.colors[index + 2] = HEAPU8[(((colors)+(i*4 + 2))>>0)];
        surfData.colors[index + 3] = 255; // opaque
      }
  
      return 1;
    }
  Module["_SDL_SetColors"] = _SDL_SetColors;

  function _SDL_SetPalette(surf, flags, colors, firstColor, nColors) {
      return _SDL_SetColors(surf, colors, firstColor, nColors);
    }
  Module["_SDL_SetPalette"] = _SDL_SetPalette;


  function _SDL_MapRGB(fmt, r, g, b) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|0xff000000;
    }
  Module["_SDL_MapRGB"] = _SDL_MapRGB;


  function _SDL_MapRGBA(fmt, r, g, b, a) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|(a&0xff)<<24;
    }
  Module["_SDL_MapRGBA"] = _SDL_MapRGBA;


  function _SDL_GetRGB(pixel, fmt, r, g, b) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      if (r) {
        HEAP8[((r)>>0)]=pixel&0xff;
      }
      if (g) {
        HEAP8[((g)>>0)]=(pixel>>8)&0xff;
      }
      if (b) {
        HEAP8[((b)>>0)]=(pixel>>16)&0xff;
      }
    }
  Module["_SDL_GetRGB"] = _SDL_GetRGB;


  function _SDL_GetRGBA(pixel, fmt, r, g, b, a) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      if (r) {
        HEAP8[((r)>>0)]=pixel&0xff;
      }
      if (g) {
        HEAP8[((g)>>0)]=(pixel>>8)&0xff;
      }
      if (b) {
        HEAP8[((b)>>0)]=(pixel>>16)&0xff;
      }
      if (a) {
        HEAP8[((a)>>0)]=(pixel>>24)&0xff;
      }
    }
  Module["_SDL_GetRGBA"] = _SDL_GetRGBA;


  function _SDL_GetAppState() {
      var state = 0;
  
      if (Browser.pointerLock) {
        state |= 0x01;  // SDL_APPMOUSEFOCUS
      }
      if (document.hasFocus()) {
        state |= 0x02;  // SDL_APPINPUTFOCUS
      }
      state |= 0x04;  // SDL_APPACTIVE
  
      return state;
    }
  Module["_SDL_GetAppState"] = _SDL_GetAppState;

  function _SDL_WM_GrabInput() {}
  Module["_SDL_WM_GrabInput"] = _SDL_WM_GrabInput;


  function _SDL_WM_ToggleFullScreen(surf) {
      if (Browser.isFullscreen) {
        Module['canvas'].exitFullscreen();
        return 1;
      } else {
        if (!SDL.canRequestFullscreen) {
          return 0;
        }
        SDL.isRequestingFullscreen = true;
        return 1;
      }
    }
  Module["_SDL_WM_ToggleFullScreen"] = _SDL_WM_ToggleFullScreen;

  function _IMG_Init(flags) {
      return flags; // We support JPG, PNG, TIF because browsers do
    }
  Module["_IMG_Init"] = _IMG_Init;



  function _SDL_LoadBMP() {
  return _IMG_Load.apply(null, arguments)
  }
  Module["_SDL_LoadBMP"] = _SDL_LoadBMP;

  function _SDL_LoadBMP_RW() {
  return _IMG_Load_RW.apply(null, arguments)
  }
  Module["_SDL_LoadBMP_RW"] = _SDL_LoadBMP_RW;



  function _IMG_Quit() {
      Module.print('IMG_Quit called (and ignored)');
    }
  Module["_IMG_Quit"] = _IMG_Quit;


  function _SDL_OpenAudio(desired, obtained) {
      try {
        SDL.audio = {
          freq: HEAPU32[((desired)>>2)],
          format: HEAPU16[(((desired)+(4))>>1)],
          channels: HEAPU8[(((desired)+(6))>>0)],
          samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
          callback: HEAPU32[(((desired)+(16))>>2)],
          userdata: HEAPU32[(((desired)+(20))>>2)],
          paused: true,
          timer: null
        };
        // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
        } else if (SDL.audio.format == 0x8120 /*AUDIO_F32*/) {
          SDL.audio.silence = 0.0; // Float data in range [-1.0, 1.0], silence is 0.0
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        // Round the desired audio frequency up to the next 'common' frequency value.
        // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
        if (SDL.audio.freq <= 0) {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        } else if (SDL.audio.freq <= 22050) {
          SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
        } else if (SDL.audio.freq <= 32000) {
          SDL.audio.freq = 32000;
        } else if (SDL.audio.freq <= 44100) {
          SDL.audio.freq = 44100;
        } else if (SDL.audio.freq <= 48000) {
          SDL.audio.freq = 48000;
        } else if (SDL.audio.freq <= 96000) {
          SDL.audio.freq = 96000;
        } else {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        }
        if (SDL.audio.channels == 0) {
          SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
        } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
          throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
        } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
          console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
        }
        if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
          throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
        } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
          throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
        }
  
        var totalSamples = SDL.audio.samples*SDL.audio.channels;
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.bytesPerSample = 1;
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.bytesPerSample = 2;
        } else if (SDL.audio.format == 0x8120 /*AUDIO_F32*/) {
          SDL.audio.bytesPerSample = 4;
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
        SDL.audio.bufferDurationSecs = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels / SDL.audio.freq; // Duration of a single queued buffer in seconds.
        SDL.audio.bufferingDelay = 50 / 1000; // Audio samples are played with a constant delay of this many seconds to account for browser and jitter.
        SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
  
        // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
        // This helps that we won't starve that easily if a frame takes long to complete.
        SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 5;
  
        // Pulls and queues new audio data if appropriate. This function gets "over-called" in both requestAnimationFrames and
        // setTimeouts to ensure that we get the finest granularity possible and as many chances from the browser to fill
        // new audio data. This is because setTimeouts alone have very poor granularity for audio streaming purposes, but also
        // the application might not be using emscripten_set_main_loop to drive the main loop, so we cannot rely on that alone.
        SDL.audio.queueNewAudioData = function SDL_queueNewAudioData() {
          if (!SDL.audio) return;
  
          for(var i = 0; i < SDL.audio.numSimultaneouslyQueuedBuffers; ++i) {
            // Only queue new data if we don't have enough audio data already in queue. Otherwise skip this time slot
            // and wait to queue more in the next time the callback is run.
            var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
            if (secsUntilNextPlayStart >= SDL.audio.bufferingDelay + SDL.audio.bufferDurationSecs*SDL.audio.numSimultaneouslyQueuedBuffers) return;
  
            // Ask SDL audio data from the user code.
            Module['dynCall_viii'](SDL.audio.callback, SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize);
            // And queue it to be played after the currently playing audio stream.
            SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
          }
        }
  
  
        // Create a callback function that will be routinely called to ask more audio data from the user application.
        SDL.audio.caller = function SDL_audioCaller() {
          if (!SDL.audio) return;
  
          --SDL.audio.numAudioTimersPending;
  
          SDL.audio.queueNewAudioData();
  
          // Queue this callback function to be called again later to pull more audio data.
          var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
  
          // Queue the next audio frame push to be performed half-way when the previously queued buffer has finished playing.
          var preemptBufferFeedSecs = SDL.audio.bufferDurationSecs/2.0;
  
          if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
            ++SDL.audio.numAudioTimersPending;
            SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*(secsUntilNextPlayStart-preemptBufferFeedSecs)));
  
            // If we are risking starving, immediately queue an extra buffer.
            if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
              ++SDL.audio.numAudioTimersPending;
              Browser.safeSetTimeout(SDL.audio.caller, 1.0);
            }
          }
        };
  
        SDL.audio.audioOutput = new Audio();
  
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        SDL.openAudioContext();
        if (!SDL.audioContext) throw 'Web Audio API is not available!';
        SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.
  
        // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
        SDL.audio.pushAudio=function(ptr,sizeBytes) {
          try {
            if (SDL.audio.paused) return;
  
            var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
            var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
            if (sizeSamplesPerChannel != SDL.audio.samples) {
              throw 'Received mismatching audio buffer size!';
            }
            // Allocate new sound buffer to be played.
            var source = SDL.audioContext['createBufferSource']();
            var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
            source['connect'](SDL.audioContext['destination']);
  
            SDL.fillWebAudioBufferFromHeap(ptr, sizeSamplesPerChannel, soundBuffer);
            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
            source['buffer'] = soundBuffer;
  
            // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
            // sample buffer has finished.
            var curtime = SDL.audioContext['currentTime'];
            // Don't ever start buffer playbacks earlier from current time than a given constant 'SDL.audio.bufferingDelay', since a browser
            // may not be able to mix that audio clip in immediately, and there may be subsequent jitter that might cause the stream to starve.
            var playtime = Math.max(curtime + SDL.audio.bufferingDelay, SDL.audio.nextPlayTime);
            if (typeof source['start'] !== 'undefined') {
              source['start'](playtime); // New Web Audio API: sound sources are started with a .start() call.
            } else if (typeof source['noteOn'] !== 'undefined') {
              source['noteOn'](playtime); // Support old Web Audio API specification which had the .noteOn() API.
            }
            /*
            // Uncomment to debug SDL buffer feed starves.
            if (SDL.audio.curBufferEnd) {
              var thisBufferStart = Math.round(playtime * SDL.audio.freq);
              if (thisBufferStart != SDL.audio.curBufferEnd) console.log('SDL starved ' + (thisBufferStart - SDL.audio.curBufferEnd) + ' samples!');
            }
            SDL.audio.curBufferEnd = Math.round(playtime * SDL.audio.freq + sizeSamplesPerChannel);
            */
  
            SDL.audio.nextPlayTime = playtime + SDL.audio.bufferDurationSecs;
          } catch(e) {
            console.log('Web Audio API error playing back audio: ' + e.toString());
          }
        }
  
        if (obtained) {
          // Report back the initialized audio parameters.
          HEAP32[((obtained)>>2)]=SDL.audio.freq;
          HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
          HEAP8[(((obtained)+(6))>>0)]=SDL.audio.channels;
          HEAP8[(((obtained)+(7))>>0)]=SDL.audio.silence;
          HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
          HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
          HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
        }
        SDL.allocateChannels(32);
  
      } catch(e) {
        console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
        SDL.audio = null;
        SDL.allocateChannels(0);
        if (obtained) {
          HEAP32[((obtained)>>2)]=0;
          HEAP16[(((obtained)+(4))>>1)]=0;
          HEAP8[(((obtained)+(6))>>0)]=0;
          HEAP8[(((obtained)+(7))>>0)]=0;
          HEAP16[(((obtained)+(8))>>1)]=0;
          HEAP32[(((obtained)+(16))>>2)]=0;
          HEAP32[(((obtained)+(20))>>2)]=0;
        }
      }
      if (!SDL.audio) {
        return -1;
      }
      return 0;
    }
  Module["_SDL_OpenAudio"] = _SDL_OpenAudio;





  function _SDL_LockAudio() {}
  Module["_SDL_LockAudio"] = _SDL_LockAudio;

  function _SDL_UnlockAudio() {}
  Module["_SDL_UnlockAudio"] = _SDL_UnlockAudio;

  function _SDL_CreateMutex() { return 0 }
  Module["_SDL_CreateMutex"] = _SDL_CreateMutex;

  function _SDL_LockMutex() {}
  Module["_SDL_LockMutex"] = _SDL_LockMutex;

  function _SDL_UnlockMutex() {}
  Module["_SDL_UnlockMutex"] = _SDL_UnlockMutex;

  function _SDL_mutexP() { return 0 }
  Module["_SDL_mutexP"] = _SDL_mutexP;

  function _SDL_mutexV() { return 0 }
  Module["_SDL_mutexV"] = _SDL_mutexV;

  function _SDL_DestroyMutex() {}
  Module["_SDL_DestroyMutex"] = _SDL_DestroyMutex;

  function _SDL_CreateCond() { return 0 }
  Module["_SDL_CreateCond"] = _SDL_CreateCond;

  function _SDL_CondSignal() {}
  Module["_SDL_CondSignal"] = _SDL_CondSignal;

  function _SDL_CondWait() {}
  Module["_SDL_CondWait"] = _SDL_CondWait;

  function _SDL_DestroyCond() {}
  Module["_SDL_DestroyCond"] = _SDL_DestroyCond;


  function _SDL_StartTextInput() {
      SDL.textInput = true;
    }
  Module["_SDL_StartTextInput"] = _SDL_StartTextInput;


  function _SDL_StopTextInput() {
      SDL.textInput = false;
    }
  Module["_SDL_StopTextInput"] = _SDL_StopTextInput;

  function _Mix_Init(flags) {
      if (!flags) return 0;
      return 8; /* MIX_INIT_OGG */
    }
  Module["_Mix_Init"] = _Mix_Init;

  function _Mix_Quit(){}
  Module["_Mix_Quit"] = _Mix_Quit;


  function _Mix_OpenAudio(frequency, format, channels, chunksize) {
      SDL.openAudioContext();
      SDL.allocateChannels(32);
      // Just record the values for a later call to Mix_QuickLoad_RAW
      SDL.mixerFrequency = frequency;
      SDL.mixerFormat = format;
      SDL.mixerNumChannels = channels;
      SDL.mixerChunkSize = chunksize;
      return 0;
    }
  Module["_Mix_OpenAudio"] = _Mix_OpenAudio;

  function _Mix_CloseAudio() {
  return _SDL_CloseAudio.apply(null, arguments)
  }
  Module["_Mix_CloseAudio"] = _Mix_CloseAudio;


  function _Mix_AllocateChannels(num) {
      SDL.allocateChannels(num);
      return num;
    }
  Module["_Mix_AllocateChannels"] = _Mix_AllocateChannels;


  function _Mix_ChannelFinished(func) {
      SDL.channelFinished = func;
    }
  Module["_Mix_ChannelFinished"] = _Mix_ChannelFinished;


  function _Mix_Volume(channel, volume) {
      if (channel == -1) {
        for (var i = 0; i < SDL.numChannels-1; i++) {
          _Mix_Volume(i, volume);
        }
        return _Mix_Volume(SDL.numChannels-1, volume);
      }
      return SDL.setGetVolume(SDL.channels[channel], volume);
    }
  Module["_Mix_Volume"] = _Mix_Volume;


  function _Mix_SetPanning(channel, left, right) {
      // SDL API uses [0-255], while PannerNode has an (x, y, z) position.
  
      // Normalizing.
      left /= 255;
      right /= 255;
  
      // Set the z coordinate a little forward, otherwise there won't be any
      // smooth transition between left and right.
      SDL.setPannerPosition(SDL.channels[channel], right - left, 0, 0.1);
      return 1;
    }
  Module["_Mix_SetPanning"] = _Mix_SetPanning;




  function _Mix_LoadWAV(filename) {
      var rwops = _SDL_RWFromFile(filename);
      var result = _Mix_LoadWAV_RW(rwops);
      _SDL_FreeRW(rwops);
      return result;
    }
  Module["_Mix_LoadWAV"] = _Mix_LoadWAV;


  function _Mix_QuickLoad_RAW(mem, len) {
      var audio;
      var webAudio;
  
      var numSamples = len >> 1; // len is the length in bytes, and the array contains 16-bit PCM values
      var buffer = new Float32Array(numSamples);
      for (var i = 0; i < numSamples; ++i) {
        buffer[i] = (HEAP16[(((mem)+(i*2))>>1)]) / 0x8000; // hardcoded 16-bit audio, signed (TODO: reSign if not ta2?)
      }
  
      if (SDL.webAudioAvailable()) {
        webAudio = {};
        webAudio.decodedBuffer = buffer;
      } else {
        var audio = new Audio();
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
        // Record the number of channels and frequency for later usage
        audio.numChannels = SDL.mixerNumChannels;
        audio.frequency = SDL.mixerFrequency;
        // FIXME: doesn't make sense to keep the audio element in the buffer
      }
  
      var id = SDL.audios.length;
      SDL.audios.push({
        source: '',
        audio: audio,
        webAudio: webAudio,
        buffer: buffer
      });
      return id;
    }
  Module["_Mix_QuickLoad_RAW"] = _Mix_QuickLoad_RAW;




  function _Mix_ReserveChannels(num) {
      SDL.channelMinimumNumber = num;
    }
  Module["_Mix_ReserveChannels"] = _Mix_ReserveChannels;



  function _Mix_PlayChannelTimed() {
  return _Mix_PlayChannel.apply(null, arguments)
  }
  Module["_Mix_PlayChannelTimed"] = _Mix_PlayChannelTimed;

  function _Mix_FadingChannel(channel) {
      return 0; // MIX_NO_FADING, TODO
    }
  Module["_Mix_FadingChannel"] = _Mix_FadingChannel;


  function _Mix_HaltChannel(channel) {
      function halt(channel) {
        var info = SDL.channels[channel];
        if (info.audio) {
          info.audio.pause();
          info.audio = null;
        }
        if (SDL.channelFinished) {
          getFuncWrapper(SDL.channelFinished, 'vi')(channel);
        }
      }
      if (channel != -1) {
        halt(channel);
      } else {
        for (var i = 0; i < SDL.channels.length; ++i) halt(i);
      }
      return 0;
    }
  Module["_Mix_HaltChannel"] = _Mix_HaltChannel;


  function _Mix_HookMusicFinished(func) {
      SDL.hookMusicFinished = func;
      if (SDL.music.audio) { // ensure the callback will be called, if a music is already playing
        SDL.music.audio['onended'] = _Mix_HaltMusic;
      }
    }
  Module["_Mix_HookMusicFinished"] = _Mix_HookMusicFinished;


  function _Mix_VolumeMusic(volume) {
      return SDL.setGetVolume(SDL.music, volume);
    }
  Module["_Mix_VolumeMusic"] = _Mix_VolumeMusic;

  function _Mix_LoadMUS_RW() {
  return _Mix_LoadWAV_RW.apply(null, arguments)
  }
  Module["_Mix_LoadMUS_RW"] = _Mix_LoadMUS_RW;


  function _Mix_LoadMUS(filename) {
      var rwops = _SDL_RWFromFile(filename);
      var result = _Mix_LoadMUS_RW(rwops);
      _SDL_FreeRW(rwops);
      return result;
    }
  Module["_Mix_LoadMUS"] = _Mix_LoadMUS;

  function _Mix_FreeMusic() {
  return _Mix_FreeChunk.apply(null, arguments)
  }
  Module["_Mix_FreeMusic"] = _Mix_FreeMusic;




  function _Mix_PauseMusic() {
      var audio = SDL.music.audio;
      if (audio) audio.pause();
    }
  Module["_Mix_PauseMusic"] = _Mix_PauseMusic;


  function _Mix_ResumeMusic() {
      var audio = SDL.music.audio;
      if (audio) audio.play();
    }
  Module["_Mix_ResumeMusic"] = _Mix_ResumeMusic;



  function _Mix_FadeInMusicPos() {
  return _Mix_PlayMusic.apply(null, arguments)
  }
  Module["_Mix_FadeInMusicPos"] = _Mix_FadeInMusicPos;

  function _Mix_FadeOutMusic() {
  return _Mix_HaltMusic.apply(null, arguments)
  }
  Module["_Mix_FadeOutMusic"] = _Mix_FadeOutMusic;


  function _Mix_PlayingMusic() {
      return (SDL.music.audio && !SDL.music.audio.paused) ? 1 : 0;
    }
  Module["_Mix_PlayingMusic"] = _Mix_PlayingMusic;


  function _Mix_Playing(channel) {
      if (channel === -1) {
        var count = 0;
        for (var i = 0; i < SDL.channels.length; i++) {
          count += _Mix_Playing(i);
        }
        return count;
      }
      var info = SDL.channels[channel];
      if (info && info.audio && !info.audio.paused) {
        return 1;
      }
      return 0;
    }
  Module["_Mix_Playing"] = _Mix_Playing;


  function _Mix_Pause(channel) {
      if (channel === -1) {
        for (var i = 0; i<SDL.channels.length;i++) {
          _Mix_Pause(i);
        }
        return;
      }
      var info = SDL.channels[channel];
      if (info && info.audio) {
        info.audio.pause();
      } else {
        //Module.printErr('Mix_Pause: no sound found for channel: ' + channel);
      }
    }
  Module["_Mix_Pause"] = _Mix_Pause;


  function _Mix_Paused(channel) {
      if (channel === -1) {
        var pausedCount = 0;
        for (var i = 0; i<SDL.channels.length;i++) {
          pausedCount += _Mix_Paused(i);
        }
        return pausedCount;
      }
      var info = SDL.channels[channel];
      if (info && info.audio && info.audio.paused) {
        return 1;
      }
      return 0;
    }
  Module["_Mix_Paused"] = _Mix_Paused;


  function _Mix_PausedMusic() {
      return (SDL.music.audio && SDL.music.audio.paused) ? 1 : 0;
    }
  Module["_Mix_PausedMusic"] = _Mix_PausedMusic;


  function _Mix_Resume(channel) {
      if (channel === -1) {
        for (var i = 0; i<SDL.channels.length;i++) {
          _Mix_Resume(i);
        }
        return;
      }
      var info = SDL.channels[channel];
      if (info && info.audio) info.audio.play();
    }
  Module["_Mix_Resume"] = _Mix_Resume;


  function _TTF_Init() {
      var canvas = document.createElement('canvas');
      SDL.ttfContext = canvas.getContext('2d');
      return 0;
    }
  Module["_TTF_Init"] = _TTF_Init;


  function _TTF_OpenFont(filename, size) {
      filename = PATH.normalize(Pointer_stringify(filename));
      var id = SDL.fonts.length;
      SDL.fonts.push({
        name: filename, // but we don't actually do anything with it..
        size: size
      });
      return id;
    }
  Module["_TTF_OpenFont"] = _TTF_OpenFont;


  function _TTF_CloseFont(font) {
      SDL.fonts[font] = null;
    }
  Module["_TTF_CloseFont"] = _TTF_CloseFont;



  function _TTF_RenderText_Blended() {
  return _TTF_RenderText_Solid.apply(null, arguments)
  }
  Module["_TTF_RenderText_Blended"] = _TTF_RenderText_Blended;

  function _TTF_RenderText_Shaded() {
  return _TTF_RenderText_Solid.apply(null, arguments)
  }
  Module["_TTF_RenderText_Shaded"] = _TTF_RenderText_Shaded;

  function _TTF_RenderUTF8_Solid() {
  return _TTF_RenderText_Solid.apply(null, arguments)
  }
  Module["_TTF_RenderUTF8_Solid"] = _TTF_RenderUTF8_Solid;

  function _TTF_SizeUTF8() {
  return _TTF_SizeText.apply(null, arguments)
  }
  Module["_TTF_SizeUTF8"] = _TTF_SizeUTF8;




  function _TTF_GlyphMetrics(font, ch, minx, maxx, miny, maxy, advance) {
      var fontData = SDL.fonts[font];
      var width = SDL.estimateTextWidth(fontData,  String.fromCharCode(ch));
  
      if (advance) {
        HEAP32[((advance)>>2)]=width;
      }
      if (minx) {
        HEAP32[((minx)>>2)]=0;
      }
      if (maxx) {
        HEAP32[((maxx)>>2)]=width;
      }
      if (miny) {
        HEAP32[((miny)>>2)]=0;
      }
      if (maxy) {
        HEAP32[((maxy)>>2)]=fontData.size;
      }
    }
  Module["_TTF_GlyphMetrics"] = _TTF_GlyphMetrics;


  function _TTF_FontAscent(font) {
      var fontData = SDL.fonts[font];
      return (fontData.size*0.98)|0; // XXX
    }
  Module["_TTF_FontAscent"] = _TTF_FontAscent;


  function _TTF_FontDescent(font) {
      var fontData = SDL.fonts[font];
      return (fontData.size*0.02)|0; // XXX
    }
  Module["_TTF_FontDescent"] = _TTF_FontDescent;



  function _TTF_FontLineSkip() {
  return _TTF_FontHeight.apply(null, arguments)
  }
  Module["_TTF_FontLineSkip"] = _TTF_FontLineSkip;

  function _TTF_Quit() {
      Module.print('TTF_Quit called (and ignored)');
    }
  Module["_TTF_Quit"] = _TTF_Quit;

  var SDL_gfx={drawRectangle:function (surf, x1, y1, x2, y2, action, cssColor) {
        x1 = x1 << 16 >> 16;
        y1 = y1 << 16 >> 16;
        x2 = x2 << 16 >> 16;
        y2 = y2 << 16 >> 16;
        var surfData = SDL.surfaces[surf];
        assert(!surfData.locked); // but we could unlock and re-lock if we must..
        // TODO: if ctx does not change, leave as is, and also do not re-set xStyle etc.
        var x = x1 < x2 ? x1 : x2;
        var y = y1 < y2 ? y1 : y2;
        var w = Math.abs(x2 - x1);
        var h = Math.abs(y2 - y1);
        surfData.ctx.save();
        surfData.ctx[action + 'Style'] = cssColor;
        surfData.ctx[action + 'Rect'](x, y, w, h);
        surfData.ctx.restore();
      },drawLine:function (surf, x1, y1, x2, y2, cssColor) {
        x1 = x1 << 16 >> 16;
        y1 = y1 << 16 >> 16;
        x2 = x2 << 16 >> 16;
        y2 = y2 << 16 >> 16;
        var surfData = SDL.surfaces[surf];
        assert(!surfData.locked); // but we could unlock and re-lock if we must..
        surfData.ctx.save();
        surfData.ctx.strokeStyle = cssColor;
        surfData.ctx.beginPath();
        surfData.ctx.moveTo(x1, y1);
        surfData.ctx.lineTo(x2, y2);
        surfData.ctx.stroke();
        surfData.ctx.restore();
      },drawEllipse:function (surf, x, y, rx, ry, action, cssColor) {
        x = x << 16 >> 16;
        y = y << 16 >> 16;
        rx = rx << 16 >> 16;
        ry = ry << 16 >> 16;
        var surfData = SDL.surfaces[surf];
        assert(!surfData.locked); // but we could unlock and re-lock if we must..
  
        surfData.ctx.save();
        surfData.ctx.beginPath();
        surfData.ctx.translate(x, y);
        surfData.ctx.scale(rx, ry);
        surfData.ctx.arc(0, 0, 1, 0, 2 * Math.PI);
        surfData.ctx.restore();
  
        surfData.ctx.save();
        surfData.ctx[action + 'Style'] = cssColor;
        surfData.ctx[action]();
        surfData.ctx.restore();
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba>>>24) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba&0xff) + ')';
      }};
  Module["SDL_gfx"] = SDL_gfx;

  function _boxColor(surf, x1, y1, x2, y2, color) {
      return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, 'fill', SDL_gfx.translateColorToCSSRGBA(color));
    }
  Module["_boxColor"] = _boxColor;

  function _boxRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
      return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, 'fill', SDL.translateRGBAToCSSRGBA(r, g, b, a));
    }
  Module["_boxRGBA"] = _boxRGBA;

  function _rectangleColor(surf, x1, y1, x2, y2, color) {
      return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, 'stroke', SDL_gfx.translateColorToCSSRGBA(color));
    }
  Module["_rectangleColor"] = _rectangleColor;

  function _rectangleRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
      return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, 'stroke', SDL.translateRGBAToCSSRGBA(r, g, b, a));
    }
  Module["_rectangleRGBA"] = _rectangleRGBA;

  function _ellipseColor(surf, x, y, rx, ry, color) {
      return SDL_gfx.drawEllipse(surf, x, y, rx, ry, 'stroke', SDL_gfx.translateColorToCSSRGBA(color));
    }
  Module["_ellipseColor"] = _ellipseColor;

  function _ellipseRGBA(surf, x, y, rx, ry, r, g, b, a) {
      return SDL_gfx.drawEllipse(surf, x, y, rx, ry, 'stroke', SDL.translateRGBAToCSSRGBA(r, g, b, a));
    }
  Module["_ellipseRGBA"] = _ellipseRGBA;

  function _filledEllipseColor(surf, x, y, rx, ry, color) {
      return SDL_gfx.drawEllipse(surf, x, y, rx, ry, 'fill', SDL_gfx.translateColorToCSSRGBA(color));
    }
  Module["_filledEllipseColor"] = _filledEllipseColor;

  function _filledEllipseRGBA(surf, x, y, rx, ry, r, g, b, a) {
      return SDL_gfx.drawEllipse(surf, x, y, rx, ry, 'fill', SDL.translateRGBAToCSSRGBA(r, g, b, a));
    }
  Module["_filledEllipseRGBA"] = _filledEllipseRGBA;

  function _lineColor(surf, x1, y1, x2, y2, color) {
      return SDL_gfx.drawLine(surf, x1, y1, x2, y2, SDL_gfx.translateColorToCSSRGBA(color));
    }
  Module["_lineColor"] = _lineColor;

  function _lineRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
      return SDL_gfx.drawLine(surf, x1, y1, x2, y2, SDL.translateRGBAToCSSRGBA(r, g, b, a));
    }
  Module["_lineRGBA"] = _lineRGBA;

  function _pixelRGBA(surf, x1, y1, r, g, b, a) {
      // This cannot be fast, to render many pixels this way!
      _boxRGBA(surf, x1, y1, x1, y1, r, g, b, a);
    }
  Module["_pixelRGBA"] = _pixelRGBA;


  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }
  Module["_SDL_GL_SetAttribute"] = _SDL_GL_SetAttribute;


  function _SDL_GL_GetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      if (value) HEAP32[((value)>>2)]=SDL.glAttributes[attr];
  
      return 0;
    }
  Module["_SDL_GL_GetAttribute"] = _SDL_GL_GetAttribute;

  
  var _emscripten_GetProcAddress=undefined;function _SDL_GL_GetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }
  Module["_SDL_GL_GetProcAddress"] = _SDL_GL_GetProcAddress;


  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }
  Module["_SDL_GL_SwapBuffers"] = _SDL_GL_SwapBuffers;


  function _SDL_GL_ExtensionSupported(extension) {
      return Module.ctx.getExtension(extension) | 0;
    }
  Module["_SDL_GL_ExtensionSupported"] = _SDL_GL_ExtensionSupported;

  function _SDL_DestroyWindow(window) {}
  Module["_SDL_DestroyWindow"] = _SDL_DestroyWindow;

  function _SDL_DestroyRenderer(renderer) {}
  Module["_SDL_DestroyRenderer"] = _SDL_DestroyRenderer;


  function _SDL_GetWindowFlags() {}
  Module["_SDL_GetWindowFlags"] = _SDL_GetWindowFlags;

  function _SDL_GL_SwapWindow(window) {}
  Module["_SDL_GL_SwapWindow"] = _SDL_GL_SwapWindow;

  function _SDL_GL_MakeCurrent(window, context) {}
  Module["_SDL_GL_MakeCurrent"] = _SDL_GL_MakeCurrent;

  function _SDL_GL_DeleteContext(context) {}
  Module["_SDL_GL_DeleteContext"] = _SDL_GL_DeleteContext;


  function _SDL_GL_GetSwapInterval(state) {
      if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/) return Browser.mainLoop.timingValue;
      else return 0;
    }
  Module["_SDL_GL_GetSwapInterval"] = _SDL_GL_GetSwapInterval;

  function _SDL_GL_SetSwapInterval(state) {
      _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, state);
    }
  Module["_SDL_GL_SetSwapInterval"] = _SDL_GL_SetSwapInterval;


  function _SDL_SetWindowTitle(window, title) {
      if (title) document.title = Pointer_stringify(title);
    }
  Module["_SDL_SetWindowTitle"] = _SDL_SetWindowTitle;


  function _SDL_GetWindowSize(window, width, height){
      var w = Module['canvas'].width;
      var h = Module['canvas'].height;
      if (width) HEAP32[((width)>>2)]=w;
      if (height) HEAP32[((height)>>2)]=h;
    }
  Module["_SDL_GetWindowSize"] = _SDL_GetWindowSize;

  function _SDL_LogSetOutputFunction(callback, userdata) {}
  Module["_SDL_LogSetOutputFunction"] = _SDL_LogSetOutputFunction;


  function _SDL_SetWindowFullscreen(window, fullscreen) {
      if (Browser.isFullscreen) {
        Module['canvas'].exitFullscreen();
        return 1;
      } else {
        return 0;
      }
    }
  Module["_SDL_SetWindowFullscreen"] = _SDL_SetWindowFullscreen;

  function _SDL_ClearError() {}
  Module["_SDL_ClearError"] = _SDL_ClearError;

  function _SDL_getenv() {
  return _getenv.apply(null, arguments)
  }
  Module["_SDL_getenv"] = _SDL_getenv;

  function _SDL_putenv() {
  return _putenv.apply(null, arguments)
  }
  Module["_SDL_putenv"] = _SDL_putenv;

  function _SDL_SetGamma(r, g, b) {
      return -1;
    }
  Module["_SDL_SetGamma"] = _SDL_SetGamma;

  function _SDL_SetGammaRamp(redTable, greenTable, blueTable) {
      return -1;
    }
  Module["_SDL_SetGammaRamp"] = _SDL_SetGammaRamp;


  function _SDL_NumJoysticks() {
      var count = 0;
      var gamepads = SDL.getGamepads();
      // The length is not the number of gamepads; check which ones are defined.
      for (var i = 0; i < gamepads.length; i++) {
        if (gamepads[i] !== undefined) count++;
      }
      return count;
    }
  Module["_SDL_NumJoysticks"] = _SDL_NumJoysticks;


  function _SDL_JoystickName(deviceIndex) {
      var gamepad = SDL.getGamepad(deviceIndex);
      if (gamepad) {
        var name = gamepad.id;
        if (SDL.joystickNamePool.hasOwnProperty(name)) {
          return SDL.joystickNamePool[name];
        }
        return SDL.joystickNamePool[name] = allocate(intArrayFromString(name), 'i8', ALLOC_NORMAL);
      }
      return 0;
    }
  Module["_SDL_JoystickName"] = _SDL_JoystickName;


  function _SDL_JoystickOpen(deviceIndex) {
      var gamepad = SDL.getGamepad(deviceIndex);
      if (gamepad) {
        // Use this as a unique 'pointer' for this joystick.
        var joystick = deviceIndex+1;
        SDL.recordJoystickState(joystick, gamepad);
        return joystick;
      }
      return 0;
    }
  Module["_SDL_JoystickOpen"] = _SDL_JoystickOpen;


  function _SDL_JoystickOpened(deviceIndex) {
      return SDL.lastJoystickState.hasOwnProperty(deviceIndex+1) ? 1 : 0;
    }
  Module["_SDL_JoystickOpened"] = _SDL_JoystickOpened;

  function _SDL_JoystickIndex(joystick) {
      // joystick pointers are simply the deviceIndex+1.
      return joystick - 1;
    }
  Module["_SDL_JoystickIndex"] = _SDL_JoystickIndex;


  function _SDL_JoystickNumAxes(joystick) {
      var gamepad = SDL.getGamepad(joystick - 1);
      if (gamepad) {
        return gamepad.axes.length;
      }
      return 0;
    }
  Module["_SDL_JoystickNumAxes"] = _SDL_JoystickNumAxes;

  function _SDL_JoystickNumBalls(joystick) { return 0; }
  Module["_SDL_JoystickNumBalls"] = _SDL_JoystickNumBalls;

  function _SDL_JoystickNumHats(joystick) { return 0; }
  Module["_SDL_JoystickNumHats"] = _SDL_JoystickNumHats;


  function _SDL_JoystickNumButtons(joystick) {
      var gamepad = SDL.getGamepad(joystick - 1);
      if (gamepad) {
        return gamepad.buttons.length;
      }
      return 0;
    }
  Module["_SDL_JoystickNumButtons"] = _SDL_JoystickNumButtons;


  function _SDL_JoystickUpdate() {
      SDL.queryJoysticks();
    }
  Module["_SDL_JoystickUpdate"] = _SDL_JoystickUpdate;


  function _SDL_JoystickEventState(state) {
      if (state < 0) {
        // SDL_QUERY: Return current state.
        return SDL.joystickEventState;
      }
      return SDL.joystickEventState = state;
    }
  Module["_SDL_JoystickEventState"] = _SDL_JoystickEventState;


  function _SDL_JoystickGetAxis(joystick, axis) {
      var gamepad = SDL.getGamepad(joystick - 1);
      if (gamepad && gamepad.axes.length > axis) {
        return SDL.joystickAxisValueConversion(gamepad.axes[axis]);
      }
      return 0;
    }
  Module["_SDL_JoystickGetAxis"] = _SDL_JoystickGetAxis;

  function _SDL_JoystickGetHat(joystick, hat) { return 0; }
  Module["_SDL_JoystickGetHat"] = _SDL_JoystickGetHat;

  function _SDL_JoystickGetBall(joystick, ball, dxptr, dyptr) { return -1; }
  Module["_SDL_JoystickGetBall"] = _SDL_JoystickGetBall;


  function _SDL_JoystickGetButton(joystick, button) {
      var gamepad = SDL.getGamepad(joystick - 1);
      if (gamepad && gamepad.buttons.length > button) {
        return SDL.getJoystickButtonState(gamepad.buttons[button]) ? 1 : 0;
      }
      return 0;
    }
  Module["_SDL_JoystickGetButton"] = _SDL_JoystickGetButton;


  function _SDL_JoystickClose(joystick) {
      delete SDL.lastJoystickState[joystick];
    }
  Module["_SDL_JoystickClose"] = _SDL_JoystickClose;

  function _SDL_InitSubSystem(flags) { return 0 }
  Module["_SDL_InitSubSystem"] = _SDL_InitSubSystem;



  function _SDL_RWFromMem() {
  return _SDL_RWFromConstMem.apply(null, arguments)
  }
  Module["_SDL_RWFromMem"] = _SDL_RWFromMem;





  function _SDL_GetNumAudioDrivers() { return 1 }
  Module["_SDL_GetNumAudioDrivers"] = _SDL_GetNumAudioDrivers;

  function _SDL_GetCurrentAudioDriver() {
      return allocate(intArrayFromString('Emscripten Audio'), 'i8', ALLOC_NORMAL);
    }
  Module["_SDL_GetCurrentAudioDriver"] = _SDL_GetCurrentAudioDriver;

  function _SDL_GetAudioDriver(index) { return _SDL_GetCurrentAudioDriver() }
  Module["_SDL_GetAudioDriver"] = _SDL_GetAudioDriver;


  function _SDL_EnableUNICODE(on) {
      var ret = SDL.unicode || 0;
      SDL.unicode = on;
      return ret;
    }
  Module["_SDL_EnableUNICODE"] = _SDL_EnableUNICODE;


  function _SDL_AddTimer(interval, callback, param) {
      return window.setTimeout(function() {
        Module['dynCall_iii'](callback, interval, param);
      }, interval);
    }
  Module["_SDL_AddTimer"] = _SDL_AddTimer;


  function _SDL_RemoveTimer(id) {
      window.clearTimeout(id);
      return true;
    }
  Module["_SDL_RemoveTimer"] = _SDL_RemoveTimer;

  function _SDL_CreateThread() {
      throw 'SDL threads cannot be supported in the web platform because they assume shared state. See emscripten_create_worker etc. for a message-passing concurrency model that does let you run code in another thread.'
    }
  Module["_SDL_CreateThread"] = _SDL_CreateThread;

  function _SDL_WaitThread() { throw 'SDL_WaitThread' }
  Module["_SDL_WaitThread"] = _SDL_WaitThread;

  function _SDL_GetThreadID() { throw 'SDL_GetThreadID' }
  Module["_SDL_GetThreadID"] = _SDL_GetThreadID;

  function _SDL_ThreadID() { return 0; }
  Module["_SDL_ThreadID"] = _SDL_ThreadID;

  function _SDL_AllocRW() { throw 'SDL_AllocRW: TODO' }
  Module["_SDL_AllocRW"] = _SDL_AllocRW;

  function _SDL_CondBroadcast() { throw 'SDL_CondBroadcast: TODO' }
  Module["_SDL_CondBroadcast"] = _SDL_CondBroadcast;

  function _SDL_CondWaitTimeout() { throw 'SDL_CondWaitTimeout: TODO' }
  Module["_SDL_CondWaitTimeout"] = _SDL_CondWaitTimeout;

  function _SDL_WM_IconifyWindow() { throw 'SDL_WM_IconifyWindow TODO' }
  Module["_SDL_WM_IconifyWindow"] = _SDL_WM_IconifyWindow;

  function _Mix_SetPostMix() { warnOnce('Mix_SetPostMix: TODO') }
  Module["_Mix_SetPostMix"] = _Mix_SetPostMix;

  function _Mix_VolumeChunk(chunk, volume) { throw 'Mix_VolumeChunk: TODO' }
  Module["_Mix_VolumeChunk"] = _Mix_VolumeChunk;

  function _Mix_SetPosition(channel, angle, distance) { throw 'Mix_SetPosition: TODO' }
  Module["_Mix_SetPosition"] = _Mix_SetPosition;

  function _Mix_QuerySpec() { throw 'Mix_QuerySpec: TODO' }
  Module["_Mix_QuerySpec"] = _Mix_QuerySpec;

  function _Mix_FadeInChannelTimed() { throw 'Mix_FadeInChannelTimed' }
  Module["_Mix_FadeInChannelTimed"] = _Mix_FadeInChannelTimed;

  function _Mix_FadeOutChannel() { throw 'Mix_FadeOutChannel' }
  Module["_Mix_FadeOutChannel"] = _Mix_FadeOutChannel;

  function _Mix_Linked_Version() { throw 'Mix_Linked_Version: TODO' }
  Module["_Mix_Linked_Version"] = _Mix_Linked_Version;

  function _SDL_SaveBMP_RW() { throw 'SDL_SaveBMP_RW: TODO' }
  Module["_SDL_SaveBMP_RW"] = _SDL_SaveBMP_RW;

  function _SDL_WM_SetIcon() { /* This function would set the application window icon surface, which doesn't apply for web canvases, so a no-op. */ }
  Module["_SDL_WM_SetIcon"] = _SDL_WM_SetIcon;

  function _SDL_HasRDTSC() { return 0; }
  Module["_SDL_HasRDTSC"] = _SDL_HasRDTSC;

  function _SDL_HasMMX() { return 0; }
  Module["_SDL_HasMMX"] = _SDL_HasMMX;

  function _SDL_HasMMXExt() { return 0; }
  Module["_SDL_HasMMXExt"] = _SDL_HasMMXExt;

  function _SDL_Has3DNow() { return 0; }
  Module["_SDL_Has3DNow"] = _SDL_Has3DNow;

  function _SDL_Has3DNowExt() { return 0; }
  Module["_SDL_Has3DNowExt"] = _SDL_Has3DNowExt;

  function _SDL_HasSSE() { return 0; }
  Module["_SDL_HasSSE"] = _SDL_HasSSE;

  function _SDL_HasSSE2() { return 0; }
  Module["_SDL_HasSSE2"] = _SDL_HasSSE2;

  function _SDL_HasAltiVec() { return 0; }
  Module["_SDL_HasAltiVec"] = _SDL_HasAltiVec;


  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }
  Module["_glPixelStorei"] = _glPixelStorei;

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  Module["_glGetString"] = _glGetString;

  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }
  Module["emscriptenWebGLGet"] = emscriptenWebGLGet;

  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }
  Module["_glGetIntegerv"] = _glGetIntegerv;

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }
  Module["_glGetFloatv"] = _glGetFloatv;

  function _glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }
  Module["_glGetBooleanv"] = _glGetBooleanv;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenTextures"] = _glGenTextures;

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }
  Module["_glDeleteTextures"] = _glDeleteTextures;

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }
  Module["_glCompressedTexImage2D"] = _glCompressedTexImage2D;

  function _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }
  Module["_glCompressedTexSubImage2D"] = _glCompressedTexSubImage2D;

  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }
  Module["emscriptenWebGLComputeImageSize"] = emscriptenWebGLComputeImageSize;

  function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }
  Module["emscriptenWebGLGetTexPixelData"] = emscriptenWebGLGetTexPixelData;

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }
  Module["_glTexImage2D"] = _glTexImage2D;

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }
  Module["_glTexSubImage2D"] = _glTexSubImage2D;

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }
  Module["_glReadPixels"] = _glReadPixels;

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }
  Module["_glBindTexture"] = _glBindTexture;

  function _glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }
  Module["_glGetTexParameterfv"] = _glGetTexParameterfv;

  function _glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }
  Module["_glGetTexParameteriv"] = _glGetTexParameteriv;

  function _glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }
  Module["_glTexParameterfv"] = _glTexParameterfv;

  function _glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }
  Module["_glTexParameteriv"] = _glTexParameteriv;

  function _glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }
  Module["_glIsTexture"] = _glIsTexture;

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenBuffers"] = _glGenBuffers;

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }
  Module["_glDeleteBuffers"] = _glDeleteBuffers;

  function _glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }
  Module["_glGetBufferParameteriv"] = _glGetBufferParameteriv;

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }
  Module["_glBufferData"] = _glBufferData;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }
  Module["_glBufferSubData"] = _glBufferSubData;

  function _glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenQueriesEXT"] = _glGenQueriesEXT;

  function _glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }
  Module["_glDeleteQueriesEXT"] = _glDeleteQueriesEXT;

  function _glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[query];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }
  Module["_glIsQueryEXT"] = _glIsQueryEXT;

  function _glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, id ? GL.timerQueriesEXT[id] : null);
    }
  Module["_glBeginQueryEXT"] = _glBeginQueryEXT;

  function _glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }
  Module["_glEndQueryEXT"] = _glEndQueryEXT;

  function _glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](id ? GL.timerQueriesEXT[id] : null, target);
    }
  Module["_glQueryCounterEXT"] = _glQueryCounterEXT;

  function _glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }
  Module["_glGetQueryivEXT"] = _glGetQueryivEXT;

  function _glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }
  Module["_glGetQueryObjectivEXT"] = _glGetQueryObjectivEXT;

  function _glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }
  Module["_glGetQueryObjectuivEXT"] = _glGetQueryObjectuivEXT;

  function _glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }
  Module["_glGetQueryObjecti64vEXT"] = _glGetQueryObjecti64vEXT;

  function _glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }
  Module["_glGetQueryObjectui64vEXT"] = _glGetQueryObjectui64vEXT;

  function _glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }
  Module["_glIsBuffer"] = _glIsBuffer;

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenRenderbuffers"] = _glGenRenderbuffers;

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }
  Module["_glDeleteRenderbuffers"] = _glDeleteRenderbuffers;

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }
  Module["_glBindRenderbuffer"] = _glBindRenderbuffer;

  function _glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }
  Module["_glGetRenderbufferParameteriv"] = _glGetRenderbufferParameteriv;

  function _glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }
  Module["_glIsRenderbuffer"] = _glIsRenderbuffer;

  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }
  Module["emscriptenWebGLGetUniform"] = emscriptenWebGLGetUniform;

  function _glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }
  Module["_glGetUniformfv"] = _glGetUniformfv;

  function _glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }
  Module["_glGetUniformiv"] = _glGetUniformiv;

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }
  Module["_glGetUniformLocation"] = _glGetUniformLocation;

  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }
  Module["emscriptenWebGLGetVertexAttrib"] = emscriptenWebGLGetVertexAttrib;

  function _glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }
  Module["_glGetVertexAttribfv"] = _glGetVertexAttribfv;

  function _glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }
  Module["_glGetVertexAttribiv"] = _glGetVertexAttribiv;

  function _glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }
  Module["_glGetVertexAttribPointerv"] = _glGetVertexAttribPointerv;

  function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }
  Module["_glGetActiveUniform"] = _glGetActiveUniform;

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }
  Module["_glUniform1f"] = _glUniform1f;

  function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }
  Module["_glUniform2f"] = _glUniform2f;

  function _glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }
  Module["_glUniform3f"] = _glUniform3f;

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }
  Module["_glUniform4f"] = _glUniform4f;

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }
  Module["_glUniform1i"] = _glUniform1i;

  function _glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }
  Module["_glUniform2i"] = _glUniform2i;

  function _glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }
  Module["_glUniform3i"] = _glUniform3i;

  function _glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }
  Module["_glUniform4i"] = _glUniform4i;

  function _glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }
  Module["_glUniform1iv"] = _glUniform1iv;

  function _glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }
  Module["_glUniform2iv"] = _glUniform2iv;

  function _glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }
  Module["_glUniform3iv"] = _glUniform3iv;

  function _glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }
  Module["_glUniform4iv"] = _glUniform4iv;

  function _glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }
  Module["_glUniform1fv"] = _glUniform1fv;

  function _glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }
  Module["_glUniform2fv"] = _glUniform2fv;

  function _glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }
  Module["_glUniform3fv"] = _glUniform3fv;

  function _glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }
  Module["_glUniform4fv"] = _glUniform4fv;

  function _glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_glUniformMatrix2fv"] = _glUniformMatrix2fv;

  function _glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_glUniformMatrix3fv"] = _glUniformMatrix3fv;

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_glUniformMatrix4fv"] = _glUniformMatrix4fv;

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }
  Module["_glBindBuffer"] = _glBindBuffer;

  function _glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }
  Module["_glVertexAttrib1fv"] = _glVertexAttrib1fv;

  function _glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }
  Module["_glVertexAttrib2fv"] = _glVertexAttrib2fv;

  function _glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }
  Module["_glVertexAttrib3fv"] = _glVertexAttrib3fv;

  function _glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }
  Module["_glVertexAttrib4fv"] = _glVertexAttrib4fv;

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }
  Module["_glGetAttribLocation"] = _glGetAttribLocation;

  function _glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }
  Module["_glGetActiveAttrib"] = _glGetActiveAttrib;

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  Module["_glCreateShader"] = _glCreateShader;

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }
  Module["_glDeleteShader"] = _glDeleteShader;

  function _glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }
  Module["_glGetAttachedShaders"] = _glGetAttachedShaders;

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  Module["_glShaderSource"] = _glShaderSource;

  function _glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_glGetShaderSource"] = _glGetShaderSource;

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  Module["_glCompileShader"] = _glCompileShader;

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_glGetShaderInfoLog"] = _glGetShaderInfoLog;

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }
  Module["_glGetShaderiv"] = _glGetShaderiv;

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }
  Module["_glGetProgramiv"] = _glGetProgramiv;

  function _glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }
  Module["_glIsShader"] = _glIsShader;

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }
  Module["_glCreateProgram"] = _glCreateProgram;

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  Module["_glDeleteProgram"] = _glDeleteProgram;

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  Module["_glAttachShader"] = _glAttachShader;

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  Module["_glDetachShader"] = _glDetachShader;

  function _glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }
  Module["_glGetShaderPrecisionFormat"] = _glGetShaderPrecisionFormat;

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  Module["_glLinkProgram"] = _glLinkProgram;

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_glGetProgramInfoLog"] = _glGetProgramInfoLog;

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  Module["_glUseProgram"] = _glUseProgram;

  function _glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }
  Module["_glValidateProgram"] = _glValidateProgram;

  function _glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }
  Module["_glIsProgram"] = _glIsProgram;

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  Module["_glBindAttribLocation"] = _glBindAttribLocation;

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }
  Module["_glBindFramebuffer"] = _glBindFramebuffer;

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenFramebuffers"] = _glGenFramebuffers;

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }
  Module["_glDeleteFramebuffers"] = _glDeleteFramebuffers;

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }
  Module["_glFramebufferRenderbuffer"] = _glFramebufferRenderbuffer;

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }
  Module["_glFramebufferTexture2D"] = _glFramebufferTexture2D;

  function _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }
  Module["_glGetFramebufferAttachmentParameteriv"] = _glGetFramebufferAttachmentParameteriv;

  function _glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }
  Module["_glIsFramebuffer"] = _glIsFramebuffer;

  function _glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenVertexArrays"] = _glGenVertexArrays;

  function _glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }
  Module["_glDeleteVertexArrays"] = _glDeleteVertexArrays;

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }
  Module["_glBindVertexArray"] = _glBindVertexArray;

  function _glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }
  Module["_glIsVertexArray"] = _glIsVertexArray;

  function _glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_glVertexPointer"] = _glVertexPointer;

  function _glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_glMatrixMode"] = _glMatrixMode;

  function _glBegin(){ throw 'Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_glBegin"] = _glBegin;

  function _glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_glLoadIdentity"] = _glLoadIdentity;

  function _glGenVertexArraysOES(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }
  Module["_glGenVertexArraysOES"] = _glGenVertexArraysOES;

  function _glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }
  Module["_glDeleteVertexArraysOES"] = _glDeleteVertexArraysOES;

  function _glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }
  Module["_glBindVertexArrayOES"] = _glBindVertexArrayOES;

  function _gluPerspective(fov, aspect, near, far) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] =
        GLImmediate.matrixLib.mat4.perspective(fov, aspect, near, far,
                                                 GLImmediate.matrix[GLImmediate.currentMatrix]);
    }
  Module["_gluPerspective"] = _gluPerspective;

  function _gluLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.lookAt(GLImmediate.matrix[GLImmediate.currentMatrix], [ex, ey, ez],
          [cx, cy, cz], [ux, uy, uz]);
    }
  Module["_gluLookAt"] = _gluLookAt;

  function _gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ) {
      // The algorithm for this functions comes from Mesa
  
      var inVec = new Float32Array(4);
      var outVec = new Float32Array(4);
      GLImmediate.matrixLib.mat4.multiplyVec4(HEAPF64.subarray((model)>>3,(model+128)>>3),
          [objX, objY, objZ, 1.0], outVec);
      GLImmediate.matrixLib.mat4.multiplyVec4(HEAPF64.subarray((proj)>>3,(proj+128)>>3),
          outVec, inVec);
      if (inVec[3] == 0.0) {
        return 0 /* GL_FALSE */;
      }
      inVec[0] /= inVec[3];
      inVec[1] /= inVec[3];
      inVec[2] /= inVec[3];
      // Map x, y and z to range 0-1 */
      inVec[0] = inVec[0] * 0.5 + 0.5;
      inVec[1] = inVec[1] * 0.5 + 0.5;
      inVec[2] = inVec[2] * 0.5 + 0.5;
      // Map x, y to viewport
      inVec[0] = inVec[0] * HEAP32[(((view)+(8))>>2)] + HEAP32[((view)>>2)];
      inVec[1] = inVec[1] * HEAP32[(((view)+(12))>>2)] + HEAP32[(((view)+(4))>>2)];
  
      HEAPF64[((winX)>>3)]=inVec[0];
      HEAPF64[((winY)>>3)]=inVec[1];
      HEAPF64[((winZ)>>3)]=inVec[2];
  
      return 1 /* GL_TRUE */;
    }
  Module["_gluProject"] = _gluProject;

  function _gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ) {
      var result = GLImmediate.matrixLib.mat4.unproject([winX, winY, winZ],
          HEAPF64.subarray((model)>>3,(model+128)>>3),
          HEAPF64.subarray((proj)>>3,(proj+128)>>3),
          HEAP32.subarray((view)>>2,(view+16)>>2));
  
      if (result === null) {
        return 0 /* GL_FALSE */;
      }
  
      HEAPF64[((objX)>>3)]=result[0];
      HEAPF64[((objY)>>3)]=result[1];
      HEAPF64[((objZ)>>3)]=result[2];
  
      return 1 /* GL_TRUE */;
    }
  Module["_gluUnProject"] = _gluUnProject;

  
  var _glOrtho=undefined;function _gluOrtho2D(left, right, bottom, top) {
      _glOrtho(left, right, bottom, top, -1, 1);
    }
  Module["_gluOrtho2D"] = _gluOrtho2D;

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }
  Module["_glVertexAttribPointer"] = _glVertexAttribPointer;

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  Module["_glEnableVertexAttribArray"] = _glEnableVertexAttribArray;

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  Module["_glDisableVertexAttribArray"] = _glDisableVertexAttribArray;

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }
  Module["_glDrawArrays"] = _glDrawArrays;

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }
  Module["_glDrawElements"] = _glDrawElements;

  function _glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }
  Module["_glShaderBinary"] = _glShaderBinary;

  function _glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }
  Module["_glReleaseShaderCompiler"] = _glReleaseShaderCompiler;

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }
  Module["_glGetError"] = _glGetError;

  function _glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_glVertexAttribDivisor"] = _glVertexAttribDivisor;

  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_glDrawArraysInstanced"] = _glDrawArraysInstanced;

  function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_glDrawElementsInstanced"] = _glDrawElementsInstanced;

  function _glVertexAttribDivisorNV(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_glVertexAttribDivisorNV"] = _glVertexAttribDivisorNV;

  function _glDrawArraysInstancedNV(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_glDrawArraysInstancedNV"] = _glDrawArraysInstancedNV;

  function _glDrawElementsInstancedNV(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_glDrawElementsInstancedNV"] = _glDrawElementsInstancedNV;

  function _glVertexAttribDivisorEXT(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_glVertexAttribDivisorEXT"] = _glVertexAttribDivisorEXT;

  function _glDrawArraysInstancedEXT(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_glDrawArraysInstancedEXT"] = _glDrawArraysInstancedEXT;

  function _glDrawElementsInstancedEXT(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_glDrawElementsInstancedEXT"] = _glDrawElementsInstancedEXT;

  function _glVertexAttribDivisorARB(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_glVertexAttribDivisorARB"] = _glVertexAttribDivisorARB;

  function _glDrawArraysInstancedARB(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_glDrawArraysInstancedARB"] = _glDrawArraysInstancedARB;

  function _glDrawElementsInstancedARB(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_glDrawElementsInstancedARB"] = _glDrawElementsInstancedARB;

  function _glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_glVertexAttribDivisorANGLE"] = _glVertexAttribDivisorANGLE;

  function _glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_glDrawArraysInstancedANGLE"] = _glDrawArraysInstancedANGLE;

  function _glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_glDrawElementsInstancedANGLE"] = _glDrawElementsInstancedANGLE;

  function _glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }
  Module["_glDrawBuffers"] = _glDrawBuffers;

  function _glDrawBuffersEXT(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }
  Module["_glDrawBuffersEXT"] = _glDrawBuffersEXT;

  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }
  Module["_glColorMask"] = _glColorMask;

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }
  Module["_glDepthMask"] = _glDepthMask;

  function _glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }
  Module["_glSampleCoverage"] = _glSampleCoverage;

  function _glFinish() { GLctx['finish']() }
  Module["_glFinish"] = _glFinish;

  function _glFlush() { GLctx['flush']() }
  Module["_glFlush"] = _glFlush;

  function _glClearDepth(x0) { GLctx['clearDepth'](x0) }
  Module["_glClearDepth"] = _glClearDepth;

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }
  Module["_glClearDepthf"] = _glClearDepthf;

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }
  Module["_glDepthFunc"] = _glDepthFunc;

  function _glEnable(x0) { GLctx['enable'](x0) }
  Module["_glEnable"] = _glEnable;

  function _glDisable(x0) { GLctx['disable'](x0) }
  Module["_glDisable"] = _glDisable;

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }
  Module["_glFrontFace"] = _glFrontFace;

  function _glCullFace(x0) { GLctx['cullFace'](x0) }
  Module["_glCullFace"] = _glCullFace;

  function _glClear(x0) { GLctx['clear'](x0) }
  Module["_glClear"] = _glClear;

  function _glLineWidth(x0) { GLctx['lineWidth'](x0) }
  Module["_glLineWidth"] = _glLineWidth;

  function _glClearStencil(x0) { GLctx['clearStencil'](x0) }
  Module["_glClearStencil"] = _glClearStencil;

  function _glStencilMask(x0) { GLctx['stencilMask'](x0) }
  Module["_glStencilMask"] = _glStencilMask;

  function _glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }
  Module["_glCheckFramebufferStatus"] = _glCheckFramebufferStatus;

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }
  Module["_glGenerateMipmap"] = _glGenerateMipmap;

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }
  Module["_glActiveTexture"] = _glActiveTexture;

  function _glBlendEquation(x0) { GLctx['blendEquation'](x0) }
  Module["_glBlendEquation"] = _glBlendEquation;

  function _glIsEnabled(x0) { return GLctx['isEnabled'](x0) }
  Module["_glIsEnabled"] = _glIsEnabled;

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }
  Module["_glBlendFunc"] = _glBlendFunc;

  function _glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }
  Module["_glBlendEquationSeparate"] = _glBlendEquationSeparate;

  function _glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }
  Module["_glDepthRange"] = _glDepthRange;

  function _glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }
  Module["_glDepthRangef"] = _glDepthRangef;

  function _glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }
  Module["_glStencilMaskSeparate"] = _glStencilMaskSeparate;

  function _glHint(x0, x1) { GLctx['hint'](x0, x1) }
  Module["_glHint"] = _glHint;

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }
  Module["_glPolygonOffset"] = _glPolygonOffset;

  function _glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }
  Module["_glVertexAttrib1f"] = _glVertexAttrib1f;

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }
  Module["_glTexParameteri"] = _glTexParameteri;

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }
  Module["_glTexParameterf"] = _glTexParameterf;

  function _glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }
  Module["_glVertexAttrib2f"] = _glVertexAttrib2f;

  function _glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }
  Module["_glStencilFunc"] = _glStencilFunc;

  function _glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }
  Module["_glStencilOp"] = _glStencilOp;

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }
  Module["_glViewport"] = _glViewport;

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }
  Module["_glClearColor"] = _glClearColor;

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }
  Module["_glScissor"] = _glScissor;

  function _glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }
  Module["_glVertexAttrib3f"] = _glVertexAttrib3f;

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }
  Module["_glRenderbufferStorage"] = _glRenderbufferStorage;

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }
  Module["_glBlendFuncSeparate"] = _glBlendFuncSeparate;

  function _glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }
  Module["_glBlendColor"] = _glBlendColor;

  function _glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }
  Module["_glStencilFuncSeparate"] = _glStencilFuncSeparate;

  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }
  Module["_glStencilOpSeparate"] = _glStencilOpSeparate;

  function _glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }
  Module["_glVertexAttrib4f"] = _glVertexAttrib4f;

  function _glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }
  Module["_glCopyTexImage2D"] = _glCopyTexImage2D;

  function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }
  Module["_glCopyTexSubImage2D"] = _glCopyTexSubImage2D;

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }
  Module["_emscripten_glPixelStorei"] = _emscripten_glPixelStorei;

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  Module["_emscripten_glGetString"] = _emscripten_glGetString;

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }
  Module["_emscripten_glGetIntegerv"] = _emscripten_glGetIntegerv;

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }
  Module["_emscripten_glGetFloatv"] = _emscripten_glGetFloatv;

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }
  Module["_emscripten_glGetBooleanv"] = _emscripten_glGetBooleanv;

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenTextures"] = _emscripten_glGenTextures;

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }
  Module["_emscripten_glDeleteTextures"] = _emscripten_glDeleteTextures;

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }
  Module["_emscripten_glCompressedTexImage2D"] = _emscripten_glCompressedTexImage2D;

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }
  Module["_emscripten_glCompressedTexSubImage2D"] = _emscripten_glCompressedTexSubImage2D;

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }
  Module["_emscripten_glTexImage2D"] = _emscripten_glTexImage2D;

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }
  Module["_emscripten_glTexSubImage2D"] = _emscripten_glTexSubImage2D;

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }
  Module["_emscripten_glReadPixels"] = _emscripten_glReadPixels;

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }
  Module["_emscripten_glBindTexture"] = _emscripten_glBindTexture;

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }
  Module["_emscripten_glGetTexParameterfv"] = _emscripten_glGetTexParameterfv;

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }
  Module["_emscripten_glGetTexParameteriv"] = _emscripten_glGetTexParameteriv;

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }
  Module["_emscripten_glTexParameterfv"] = _emscripten_glTexParameterfv;

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }
  Module["_emscripten_glTexParameteriv"] = _emscripten_glTexParameteriv;

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }
  Module["_emscripten_glIsTexture"] = _emscripten_glIsTexture;

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenBuffers"] = _emscripten_glGenBuffers;

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }
  Module["_emscripten_glDeleteBuffers"] = _emscripten_glDeleteBuffers;

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }
  Module["_emscripten_glGetBufferParameteriv"] = _emscripten_glGetBufferParameteriv;

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }
  Module["_emscripten_glBufferData"] = _emscripten_glBufferData;

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }
  Module["_emscripten_glBufferSubData"] = _emscripten_glBufferSubData;

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenQueriesEXT"] = _emscripten_glGenQueriesEXT;

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }
  Module["_emscripten_glDeleteQueriesEXT"] = _emscripten_glDeleteQueriesEXT;

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[query];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }
  Module["_emscripten_glIsQueryEXT"] = _emscripten_glIsQueryEXT;

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, id ? GL.timerQueriesEXT[id] : null);
    }
  Module["_emscripten_glBeginQueryEXT"] = _emscripten_glBeginQueryEXT;

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }
  Module["_emscripten_glEndQueryEXT"] = _emscripten_glEndQueryEXT;

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](id ? GL.timerQueriesEXT[id] : null, target);
    }
  Module["_emscripten_glQueryCounterEXT"] = _emscripten_glQueryCounterEXT;

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }
  Module["_emscripten_glGetQueryivEXT"] = _emscripten_glGetQueryivEXT;

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }
  Module["_emscripten_glGetQueryObjectivEXT"] = _emscripten_glGetQueryObjectivEXT;

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }
  Module["_emscripten_glGetQueryObjectuivEXT"] = _emscripten_glGetQueryObjectuivEXT;

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }
  Module["_emscripten_glGetQueryObjecti64vEXT"] = _emscripten_glGetQueryObjecti64vEXT;

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }
  Module["_emscripten_glGetQueryObjectui64vEXT"] = _emscripten_glGetQueryObjectui64vEXT;

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }
  Module["_emscripten_glIsBuffer"] = _emscripten_glIsBuffer;

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenRenderbuffers"] = _emscripten_glGenRenderbuffers;

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }
  Module["_emscripten_glDeleteRenderbuffers"] = _emscripten_glDeleteRenderbuffers;

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }
  Module["_emscripten_glBindRenderbuffer"] = _emscripten_glBindRenderbuffer;

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }
  Module["_emscripten_glGetRenderbufferParameteriv"] = _emscripten_glGetRenderbufferParameteriv;

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }
  Module["_emscripten_glIsRenderbuffer"] = _emscripten_glIsRenderbuffer;

  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }
  Module["_emscripten_glGetUniformfv"] = _emscripten_glGetUniformfv;

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }
  Module["_emscripten_glGetUniformiv"] = _emscripten_glGetUniformiv;

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }
  Module["_emscripten_glGetUniformLocation"] = _emscripten_glGetUniformLocation;

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }
  Module["_emscripten_glGetVertexAttribfv"] = _emscripten_glGetVertexAttribfv;

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }
  Module["_emscripten_glGetVertexAttribiv"] = _emscripten_glGetVertexAttribiv;

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }
  Module["_emscripten_glGetVertexAttribPointerv"] = _emscripten_glGetVertexAttribPointerv;

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }
  Module["_emscripten_glGetActiveUniform"] = _emscripten_glGetActiveUniform;

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }
  Module["_emscripten_glUniform1f"] = _emscripten_glUniform1f;

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }
  Module["_emscripten_glUniform2f"] = _emscripten_glUniform2f;

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }
  Module["_emscripten_glUniform3f"] = _emscripten_glUniform3f;

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }
  Module["_emscripten_glUniform4f"] = _emscripten_glUniform4f;

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }
  Module["_emscripten_glUniform1i"] = _emscripten_glUniform1i;

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }
  Module["_emscripten_glUniform2i"] = _emscripten_glUniform2i;

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }
  Module["_emscripten_glUniform3i"] = _emscripten_glUniform3i;

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }
  Module["_emscripten_glUniform4i"] = _emscripten_glUniform4i;

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }
  Module["_emscripten_glUniform1iv"] = _emscripten_glUniform1iv;

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }
  Module["_emscripten_glUniform2iv"] = _emscripten_glUniform2iv;

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }
  Module["_emscripten_glUniform3iv"] = _emscripten_glUniform3iv;

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }
  Module["_emscripten_glUniform4iv"] = _emscripten_glUniform4iv;

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }
  Module["_emscripten_glUniform1fv"] = _emscripten_glUniform1fv;

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }
  Module["_emscripten_glUniform2fv"] = _emscripten_glUniform2fv;

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }
  Module["_emscripten_glUniform3fv"] = _emscripten_glUniform3fv;

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }
  Module["_emscripten_glUniform4fv"] = _emscripten_glUniform4fv;

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_emscripten_glUniformMatrix2fv"] = _emscripten_glUniformMatrix2fv;

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_emscripten_glUniformMatrix3fv"] = _emscripten_glUniformMatrix3fv;

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }
  Module["_emscripten_glUniformMatrix4fv"] = _emscripten_glUniformMatrix4fv;

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }
  Module["_emscripten_glBindBuffer"] = _emscripten_glBindBuffer;

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }
  Module["_emscripten_glVertexAttrib1fv"] = _emscripten_glVertexAttrib1fv;

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }
  Module["_emscripten_glVertexAttrib2fv"] = _emscripten_glVertexAttrib2fv;

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }
  Module["_emscripten_glVertexAttrib3fv"] = _emscripten_glVertexAttrib3fv;

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }
  Module["_emscripten_glVertexAttrib4fv"] = _emscripten_glVertexAttrib4fv;

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }
  Module["_emscripten_glGetAttribLocation"] = _emscripten_glGetAttribLocation;

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }
  Module["_emscripten_glGetActiveAttrib"] = _emscripten_glGetActiveAttrib;

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  Module["_emscripten_glCreateShader"] = _emscripten_glCreateShader;

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }
  Module["_emscripten_glDeleteShader"] = _emscripten_glDeleteShader;

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGetAttachedShaders"] = _emscripten_glGetAttachedShaders;

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  Module["_emscripten_glShaderSource"] = _emscripten_glShaderSource;

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_emscripten_glGetShaderSource"] = _emscripten_glGetShaderSource;

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  Module["_emscripten_glCompileShader"] = _emscripten_glCompileShader;

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_emscripten_glGetShaderInfoLog"] = _emscripten_glGetShaderInfoLog;

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }
  Module["_emscripten_glGetShaderiv"] = _emscripten_glGetShaderiv;

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }
  Module["_emscripten_glGetProgramiv"] = _emscripten_glGetProgramiv;

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }
  Module["_emscripten_glIsShader"] = _emscripten_glIsShader;

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }
  Module["_emscripten_glCreateProgram"] = _emscripten_glCreateProgram;

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  Module["_emscripten_glDeleteProgram"] = _emscripten_glDeleteProgram;

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  Module["_emscripten_glAttachShader"] = _emscripten_glAttachShader;

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  Module["_emscripten_glDetachShader"] = _emscripten_glDetachShader;

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }
  Module["_emscripten_glGetShaderPrecisionFormat"] = _emscripten_glGetShaderPrecisionFormat;

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  Module["_emscripten_glLinkProgram"] = _emscripten_glLinkProgram;

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }
  Module["_emscripten_glGetProgramInfoLog"] = _emscripten_glGetProgramInfoLog;

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  Module["_emscripten_glUseProgram"] = _emscripten_glUseProgram;

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }
  Module["_emscripten_glValidateProgram"] = _emscripten_glValidateProgram;

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }
  Module["_emscripten_glIsProgram"] = _emscripten_glIsProgram;

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  Module["_emscripten_glBindAttribLocation"] = _emscripten_glBindAttribLocation;

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }
  Module["_emscripten_glBindFramebuffer"] = _emscripten_glBindFramebuffer;

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenFramebuffers"] = _emscripten_glGenFramebuffers;

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }
  Module["_emscripten_glDeleteFramebuffers"] = _emscripten_glDeleteFramebuffers;

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }
  Module["_emscripten_glFramebufferRenderbuffer"] = _emscripten_glFramebufferRenderbuffer;

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }
  Module["_emscripten_glFramebufferTexture2D"] = _emscripten_glFramebufferTexture2D;

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }
  Module["_emscripten_glGetFramebufferAttachmentParameteriv"] = _emscripten_glGetFramebufferAttachmentParameteriv;

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }
  Module["_emscripten_glIsFramebuffer"] = _emscripten_glIsFramebuffer;

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenVertexArrays"] = _emscripten_glGenVertexArrays;

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }
  Module["_emscripten_glDeleteVertexArrays"] = _emscripten_glDeleteVertexArrays;

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }
  Module["_emscripten_glBindVertexArray"] = _emscripten_glBindVertexArray;

  function _emscripten_glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }
  Module["_emscripten_glIsVertexArray"] = _emscripten_glIsVertexArray;

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_emscripten_glVertexPointer"] = _emscripten_glVertexPointer;

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_emscripten_glMatrixMode"] = _emscripten_glMatrixMode;

  function _emscripten_glBegin(){ throw 'Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_emscripten_glBegin"] = _emscripten_glBegin;

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }
  Module["_emscripten_glLoadIdentity"] = _emscripten_glLoadIdentity;

  function _emscripten_glGenVertexArraysOES(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }
  Module["_emscripten_glGenVertexArraysOES"] = _emscripten_glGenVertexArraysOES;

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }
  Module["_emscripten_glDeleteVertexArraysOES"] = _emscripten_glDeleteVertexArraysOES;

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }
  Module["_emscripten_glBindVertexArrayOES"] = _emscripten_glBindVertexArrayOES;

  function _emscripten_gluPerspective(fov, aspect, near, far) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] =
        GLImmediate.matrixLib.mat4.perspective(fov, aspect, near, far,
                                                 GLImmediate.matrix[GLImmediate.currentMatrix]);
    }
  Module["_emscripten_gluPerspective"] = _emscripten_gluPerspective;

  function _emscripten_gluLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.lookAt(GLImmediate.matrix[GLImmediate.currentMatrix], [ex, ey, ez],
          [cx, cy, cz], [ux, uy, uz]);
    }
  Module["_emscripten_gluLookAt"] = _emscripten_gluLookAt;

  function _emscripten_gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ) {
      // The algorithm for this functions comes from Mesa
  
      var inVec = new Float32Array(4);
      var outVec = new Float32Array(4);
      GLImmediate.matrixLib.mat4.multiplyVec4(HEAPF64.subarray((model)>>3,(model+128)>>3),
          [objX, objY, objZ, 1.0], outVec);
      GLImmediate.matrixLib.mat4.multiplyVec4(HEAPF64.subarray((proj)>>3,(proj+128)>>3),
          outVec, inVec);
      if (inVec[3] == 0.0) {
        return 0 /* GL_FALSE */;
      }
      inVec[0] /= inVec[3];
      inVec[1] /= inVec[3];
      inVec[2] /= inVec[3];
      // Map x, y and z to range 0-1 */
      inVec[0] = inVec[0] * 0.5 + 0.5;
      inVec[1] = inVec[1] * 0.5 + 0.5;
      inVec[2] = inVec[2] * 0.5 + 0.5;
      // Map x, y to viewport
      inVec[0] = inVec[0] * HEAP32[(((view)+(8))>>2)] + HEAP32[((view)>>2)];
      inVec[1] = inVec[1] * HEAP32[(((view)+(12))>>2)] + HEAP32[(((view)+(4))>>2)];
  
      HEAPF64[((winX)>>3)]=inVec[0];
      HEAPF64[((winY)>>3)]=inVec[1];
      HEAPF64[((winZ)>>3)]=inVec[2];
  
      return 1 /* GL_TRUE */;
    }
  Module["_emscripten_gluProject"] = _emscripten_gluProject;

  function _emscripten_gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ) {
      var result = GLImmediate.matrixLib.mat4.unproject([winX, winY, winZ],
          HEAPF64.subarray((model)>>3,(model+128)>>3),
          HEAPF64.subarray((proj)>>3,(proj+128)>>3),
          HEAP32.subarray((view)>>2,(view+16)>>2));
  
      if (result === null) {
        return 0 /* GL_FALSE */;
      }
  
      HEAPF64[((objX)>>3)]=result[0];
      HEAPF64[((objY)>>3)]=result[1];
      HEAPF64[((objZ)>>3)]=result[2];
  
      return 1 /* GL_TRUE */;
    }
  Module["_emscripten_gluUnProject"] = _emscripten_gluUnProject;

  function _emscripten_gluOrtho2D(left, right, bottom, top) {
      _glOrtho(left, right, bottom, top, -1, 1);
    }
  Module["_emscripten_gluOrtho2D"] = _emscripten_gluOrtho2D;

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }
  Module["_emscripten_glVertexAttribPointer"] = _emscripten_glVertexAttribPointer;

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  Module["_emscripten_glEnableVertexAttribArray"] = _emscripten_glEnableVertexAttribArray;

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  Module["_emscripten_glDisableVertexAttribArray"] = _emscripten_glDisableVertexAttribArray;

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }
  Module["_emscripten_glDrawArrays"] = _emscripten_glDrawArrays;

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }
  Module["_emscripten_glDrawElements"] = _emscripten_glDrawElements;

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }
  Module["_emscripten_glShaderBinary"] = _emscripten_glShaderBinary;

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }
  Module["_emscripten_glReleaseShaderCompiler"] = _emscripten_glReleaseShaderCompiler;

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }
  Module["_emscripten_glGetError"] = _emscripten_glGetError;

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_emscripten_glVertexAttribDivisor"] = _emscripten_glVertexAttribDivisor;

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_emscripten_glDrawArraysInstanced"] = _emscripten_glDrawArraysInstanced;

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_emscripten_glDrawElementsInstanced"] = _emscripten_glDrawElementsInstanced;

  function _emscripten_glVertexAttribDivisorNV(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_emscripten_glVertexAttribDivisorNV"] = _emscripten_glVertexAttribDivisorNV;

  function _emscripten_glDrawArraysInstancedNV(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_emscripten_glDrawArraysInstancedNV"] = _emscripten_glDrawArraysInstancedNV;

  function _emscripten_glDrawElementsInstancedNV(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_emscripten_glDrawElementsInstancedNV"] = _emscripten_glDrawElementsInstancedNV;

  function _emscripten_glVertexAttribDivisorEXT(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_emscripten_glVertexAttribDivisorEXT"] = _emscripten_glVertexAttribDivisorEXT;

  function _emscripten_glDrawArraysInstancedEXT(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_emscripten_glDrawArraysInstancedEXT"] = _emscripten_glDrawArraysInstancedEXT;

  function _emscripten_glDrawElementsInstancedEXT(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_emscripten_glDrawElementsInstancedEXT"] = _emscripten_glDrawElementsInstancedEXT;

  function _emscripten_glVertexAttribDivisorARB(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_emscripten_glVertexAttribDivisorARB"] = _emscripten_glVertexAttribDivisorARB;

  function _emscripten_glDrawArraysInstancedARB(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_emscripten_glDrawArraysInstancedARB"] = _emscripten_glDrawArraysInstancedARB;

  function _emscripten_glDrawElementsInstancedARB(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_emscripten_glDrawElementsInstancedARB"] = _emscripten_glDrawElementsInstancedARB;

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }
  Module["_emscripten_glVertexAttribDivisorANGLE"] = _emscripten_glVertexAttribDivisorANGLE;

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }
  Module["_emscripten_glDrawArraysInstancedANGLE"] = _emscripten_glDrawArraysInstancedANGLE;

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }
  Module["_emscripten_glDrawElementsInstancedANGLE"] = _emscripten_glDrawElementsInstancedANGLE;

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }
  Module["_emscripten_glDrawBuffers"] = _emscripten_glDrawBuffers;

  function _emscripten_glDrawBuffersEXT(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }
  Module["_emscripten_glDrawBuffersEXT"] = _emscripten_glDrawBuffersEXT;

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }
  Module["_emscripten_glColorMask"] = _emscripten_glColorMask;

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }
  Module["_emscripten_glDepthMask"] = _emscripten_glDepthMask;

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }
  Module["_emscripten_glSampleCoverage"] = _emscripten_glSampleCoverage;

  function _emscripten_glFinish() { GLctx['finish']() }
  Module["_emscripten_glFinish"] = _emscripten_glFinish;

  function _emscripten_glFlush() { GLctx['flush']() }
  Module["_emscripten_glFlush"] = _emscripten_glFlush;

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }
  Module["_emscripten_glClearDepth"] = _emscripten_glClearDepth;

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }
  Module["_emscripten_glClearDepthf"] = _emscripten_glClearDepthf;

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }
  Module["_emscripten_glDepthFunc"] = _emscripten_glDepthFunc;

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }
  Module["_emscripten_glEnable"] = _emscripten_glEnable;

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }
  Module["_emscripten_glDisable"] = _emscripten_glDisable;

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }
  Module["_emscripten_glFrontFace"] = _emscripten_glFrontFace;

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }
  Module["_emscripten_glCullFace"] = _emscripten_glCullFace;

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }
  Module["_emscripten_glClear"] = _emscripten_glClear;

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }
  Module["_emscripten_glLineWidth"] = _emscripten_glLineWidth;

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }
  Module["_emscripten_glClearStencil"] = _emscripten_glClearStencil;

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }
  Module["_emscripten_glStencilMask"] = _emscripten_glStencilMask;

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }
  Module["_emscripten_glCheckFramebufferStatus"] = _emscripten_glCheckFramebufferStatus;

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }
  Module["_emscripten_glGenerateMipmap"] = _emscripten_glGenerateMipmap;

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }
  Module["_emscripten_glActiveTexture"] = _emscripten_glActiveTexture;

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }
  Module["_emscripten_glBlendEquation"] = _emscripten_glBlendEquation;

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }
  Module["_emscripten_glIsEnabled"] = _emscripten_glIsEnabled;

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }
  Module["_emscripten_glBlendFunc"] = _emscripten_glBlendFunc;

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }
  Module["_emscripten_glBlendEquationSeparate"] = _emscripten_glBlendEquationSeparate;

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }
  Module["_emscripten_glDepthRange"] = _emscripten_glDepthRange;

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }
  Module["_emscripten_glDepthRangef"] = _emscripten_glDepthRangef;

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }
  Module["_emscripten_glStencilMaskSeparate"] = _emscripten_glStencilMaskSeparate;

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }
  Module["_emscripten_glHint"] = _emscripten_glHint;

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }
  Module["_emscripten_glPolygonOffset"] = _emscripten_glPolygonOffset;

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }
  Module["_emscripten_glVertexAttrib1f"] = _emscripten_glVertexAttrib1f;

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }
  Module["_emscripten_glTexParameteri"] = _emscripten_glTexParameteri;

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }
  Module["_emscripten_glTexParameterf"] = _emscripten_glTexParameterf;

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }
  Module["_emscripten_glVertexAttrib2f"] = _emscripten_glVertexAttrib2f;

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }
  Module["_emscripten_glStencilFunc"] = _emscripten_glStencilFunc;

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }
  Module["_emscripten_glStencilOp"] = _emscripten_glStencilOp;

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }
  Module["_emscripten_glViewport"] = _emscripten_glViewport;

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }
  Module["_emscripten_glClearColor"] = _emscripten_glClearColor;

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }
  Module["_emscripten_glScissor"] = _emscripten_glScissor;

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }
  Module["_emscripten_glVertexAttrib3f"] = _emscripten_glVertexAttrib3f;

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }
  Module["_emscripten_glRenderbufferStorage"] = _emscripten_glRenderbufferStorage;

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }
  Module["_emscripten_glBlendFuncSeparate"] = _emscripten_glBlendFuncSeparate;

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }
  Module["_emscripten_glBlendColor"] = _emscripten_glBlendColor;

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }
  Module["_emscripten_glStencilFuncSeparate"] = _emscripten_glStencilFuncSeparate;

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }
  Module["_emscripten_glStencilOpSeparate"] = _emscripten_glStencilOpSeparate;

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }
  Module["_emscripten_glVertexAttrib4f"] = _emscripten_glVertexAttrib4f;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }
  Module["_emscripten_glCopyTexImage2D"] = _emscripten_glCopyTexImage2D;

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }
  Module["_emscripten_glCopyTexSubImage2D"] = _emscripten_glCopyTexSubImage2D;

  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.passiveMotionFunc, lastX, lastY);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.motionFunc, lastX, lastY);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },touchHandler:function (event) {
        if (event.target != Module['canvas']) {
          return;
        }
  
        var touches = event.changedTouches,
            main = touches[0],
            type = "";
  
        switch(event.type) {
          case "touchstart": type = "mousedown"; break;
          case "touchmove": type = "mousemove"; break;
          case "touchend": type = "mouseup"; break;
          default: return;
        }
  
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, 
                                      main.screenX, main.screenY, 
                                      main.clientX, main.clientY, false, 
                                      false, false, false, 0/*main*/, null);
  
        main.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onFullscreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullscreenEventChange, true);
        }
        Browser.setCanvasSize(width, height, true); // N.B. GLUT.reshapeFunc is also registered as a canvas resize callback.
                                                    // Just call it once here.
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
        _glutPostRedisplay();
      },requestFullscreen:function () {
        Browser.requestFullscreen(/*lockPointer=*/false, /*resizeCanvas=*/false);
      },requestFullScreen:function () {
        Module.printErr('GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.');
        GLUT.requestFullScreen = function() {
          return GLUT.requestFullscreen();
        }
        return GLUT.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.');
        GLUT.cancelFullScreen = function() {
          return GLUT.exitFullscreen();
        }
        return GLUT.exitFullscreen();
      }};
  Module["GLUT"] = GLUT;

  function _glutGetModifiers() { return GLUT.modifiers; }
  Module["_glutGetModifiers"] = _glutGetModifiers;

  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
  
      var isTouchDevice = 'ontouchstart' in document.documentElement;
      if (isTouchDevice) {
        // onMouseButtonDown, onMouseButtonUp and onMousemove handlers
        // depend on Browser.mouseX / Browser.mouseY fields. Those fields
        // don't get updated by touch events. So register a touchHandler
        // function that translates the touch events to mouse events.
  
        // GLUT doesn't support touch, mouse only, so from touch events we
        // are only looking at single finger touches to emulate left click,
        // so we can use workaround and convert all touch events in mouse
        // events. See touchHandler.
        window.addEventListener("touchmove", GLUT.touchHandler, true);
        window.addEventListener("touchstart", GLUT.touchHandler, true);
        window.addEventListener("touchend", GLUT.touchHandler, true);
      }
  
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      window.addEventListener("mousemove", GLUT.onMousemove, true);
      window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
      // IE9, Chrome, Safari, Opera
      window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
      // Firefox
      window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
      });
  
      __ATEXIT__.push(function() {
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.touchHandler, true);
          window.removeEventListener("touchstart", GLUT.touchHandler, true);
          window.removeEventListener("touchend", GLUT.touchHandler, true);
        }
  
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        window.removeEventListener("mousemove", GLUT.onMousemove, true);
        window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
  
        Module["canvas"].width = Module["canvas"].height = 1;
      });
    }
  Module["_glutInit"] = _glutInit;

  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }
  Module["_glutInitWindowSize"] = _glutInitWindowSize;

  function _glutInitWindowPosition(x, y) {
      // Ignore for now
    }
  Module["_glutInitWindowPosition"] = _glutInitWindowPosition;

  function _glutGet(type) {
      switch (type) {
        case 100: /* GLUT_WINDOW_X */
          return 0; /* TODO */
        case 101: /* GLUT_WINDOW_Y */
          return 0; /* TODO */
        case 102: /* GLUT_WINDOW_WIDTH */
          return Module['canvas'].width;
        case 103: /* GLUT_WINDOW_HEIGHT */
          return Module['canvas'].height;
        case 200: /* GLUT_SCREEN_WIDTH */
          return Module['canvas'].width;
        case 201: /* GLUT_SCREEN_HEIGHT */
          return Module['canvas'].height;
        case 500: /* GLUT_INIT_WINDOW_X */
          return 0; /* TODO */
        case 501: /* GLUT_INIT_WINDOW_Y */
          return 0; /* TODO */
        case 502: /* GLUT_INIT_WINDOW_WIDTH */
          return GLUT.initWindowWidth;
        case 503: /* GLUT_INIT_WINDOW_HEIGHT */
          return GLUT.initWindowHeight;
        case 700: /* GLUT_ELAPSED_TIME */
          var now = Date.now();
          return now - GLUT.initTime;
  
        default:
          throw "glutGet(" + type + ") not implemented yet";
      }
    }
  Module["_glutGet"] = _glutGet;

  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Module['dynCall_v'](GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 4); // HTML spec specifies a 4ms minimum delay on the main thread; workers might get more, but we standardize here
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }
  Module["_glutIdleFunc"] = _glutIdleFunc;

  function _glutTimerFunc(msec, func, value) {
      Browser.safeSetTimeout(function() { Module['dynCall_vi'](func, value); }, msec);
    }
  Module["_glutTimerFunc"] = _glutTimerFunc;

  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }
  Module["_glutDisplayFunc"] = _glutDisplayFunc;

  function _glutKeyboardFunc(func) {
      GLUT.keyboardFunc = func;
    }
  Module["_glutKeyboardFunc"] = _glutKeyboardFunc;

  function _glutKeyboardUpFunc(func) {
      GLUT.keyboardUpFunc = func;
    }
  Module["_glutKeyboardUpFunc"] = _glutKeyboardUpFunc;

  function _glutSpecialFunc(func) {
      GLUT.specialFunc = func;
    }
  Module["_glutSpecialFunc"] = _glutSpecialFunc;

  function _glutSpecialUpFunc(func) {
      GLUT.specialUpFunc = func;
    }
  Module["_glutSpecialUpFunc"] = _glutSpecialUpFunc;

  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }
  Module["_glutReshapeFunc"] = _glutReshapeFunc;

  function _glutMotionFunc(func) {
      GLUT.motionFunc = func;
    }
  Module["_glutMotionFunc"] = _glutMotionFunc;

  function _glutPassiveMotionFunc(func) {
      GLUT.passiveMotionFunc = func;
    }
  Module["_glutPassiveMotionFunc"] = _glutPassiveMotionFunc;

  function _glutMouseFunc(func) {
      GLUT.mouseFunc = func;
    }
  Module["_glutMouseFunc"] = _glutMouseFunc;

  function _glutSetCursor(cursor) {
      var cursorStyle = 'auto';
      switch(cursor) {
        case 0x0000: /* GLUT_CURSOR_RIGHT_ARROW */
          // No equivalent css cursor style, fallback to 'auto'
          break;
        case 0x0001: /* GLUT_CURSOR_LEFT_ARROW */
          // No equivalent css cursor style, fallback to 'auto'
          break;
        case 0x0002: /* GLUT_CURSOR_INFO */
          cursorStyle = 'pointer';
          break;
        case 0x0003: /* GLUT_CURSOR_DESTROY */
          // No equivalent css cursor style, fallback to 'auto'
          break;
        case 0x0004: /* GLUT_CURSOR_HELP */
          cursorStyle = 'help';
          break;
        case 0x0005: /* GLUT_CURSOR_CYCLE */
          // No equivalent css cursor style, fallback to 'auto'
          break;
        case 0x0006: /* GLUT_CURSOR_SPRAY */
          // No equivalent css cursor style, fallback to 'auto'
          break;
        case 0x0007: /* GLUT_CURSOR_WAIT */
          cursorStyle = 'wait';
          break;
        case 0x0008: /* GLUT_CURSOR_TEXT */
          cursorStyle = 'text';
          break;
        case 0x0009: /* GLUT_CURSOR_CROSSHAIR */
        case 0x0066: /* GLUT_CURSOR_FULL_CROSSHAIR */
          cursorStyle = 'crosshair';
          break;
        case 0x000A: /* GLUT_CURSOR_UP_DOWN */
          cursorStyle = 'ns-resize';
          break;
        case 0x000B: /* GLUT_CURSOR_LEFT_RIGHT */
          cursorStyle = 'ew-resize';
          break;
        case 0x000C: /* GLUT_CURSOR_TOP_SIDE */
          cursorStyle = 'n-resize';
          break;
        case 0x000D: /* GLUT_CURSOR_BOTTOM_SIDE */
          cursorStyle = 's-resize';
          break;
        case 0x000E: /* GLUT_CURSOR_LEFT_SIDE */
          cursorStyle = 'w-resize';
          break;
        case 0x000F: /* GLUT_CURSOR_RIGHT_SIDE */
          cursorStyle = 'e-resize';
          break;
        case 0x0010: /* GLUT_CURSOR_TOP_LEFT_CORNER */
          cursorStyle = 'nw-resize';
          break;
        case 0x0011: /* GLUT_CURSOR_TOP_RIGHT_CORNER */
          cursorStyle = 'ne-resize';
          break;
        case 0x0012: /* GLUT_CURSOR_BOTTOM_RIGHT_CORNER */
          cursorStyle = 'se-resize';
          break;
        case 0x0013: /* GLUT_CURSOR_BOTTOM_LEFT_CORNER */
          cursorStyle = 'sw-resize';
          break;
        case 0x0064: /* GLUT_CURSOR_INHERIT */
          break;
        case 0x0065: /* GLUT_CURSOR_NONE */
          cursorStyle = 'none';
          break;
        default:
          throw "glutSetCursor: Unknown cursor type: " + cursor;
      }
      Module['canvas'].style.cursor = cursorStyle;
    }
  Module["_glutSetCursor"] = _glutSetCursor;

  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0),
        alpha: ((GLUT.initDisplayMode & 0x0008 /*GLUT_ALPHA*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }
  Module["_glutCreateWindow"] = _glutCreateWindow;

  function _glutDestroyWindow(name) {
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      return 1;
    }
  Module["_glutDestroyWindow"] = _glutDestroyWindow;

  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
        GLUT.requestedAnimationFrame = true;
        Browser.requestAnimationFrame(function() {
          GLUT.requestedAnimationFrame = false;
          Browser.mainLoop.runIter(function() {
            Module['dynCall_v'](GLUT.displayFunc);
          });
        });
      }
    }
  Module["_glutPostRedisplay"] = _glutPostRedisplay;function _glutReshapeWindow(width, height) {
      GLUT.exitFullscreen();
      Browser.setCanvasSize(width, height, true); // N.B. GLUT.reshapeFunc is also registered as a canvas resize callback.
                                                  // Just call it once here.
      if (GLUT.reshapeFunc) {
        Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
      }
      _glutPostRedisplay();
    }
  Module["_glutReshapeWindow"] = _glutReshapeWindow;

  function _glutPositionWindow(x, y) {
      GLUT.exitFullscreen();
      /* TODO */
      _glutPostRedisplay();
    }
  Module["_glutPositionWindow"] = _glutPositionWindow;

  function _glutFullScreen() {
      GLUT.windowX = 0; // TODO
      GLUT.windowY = 0; // TODO
      GLUT.windowWidth  = Module['canvas'].width;
      GLUT.windowHeight = Module['canvas'].height;
      document.addEventListener('fullscreenchange', GLUT.onFullscreenEventChange, true);
      document.addEventListener('mozfullscreenchange', GLUT.onFullscreenEventChange, true);
      document.addEventListener('webkitfullscreenchange', GLUT.onFullscreenEventChange, true);
      GLUT.requestFullscreen();
    }
  Module["_glutFullScreen"] = _glutFullScreen;

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }
  Module["_glutInitDisplayMode"] = _glutInitDisplayMode;

  function _glutSwapBuffers() {}
  Module["_glutSwapBuffers"] = _glutSwapBuffers;


  function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }
  Module["_glutMainLoop"] = _glutMainLoop;

  function _XOpenDisplay() {
      return 1; // We support 1 display, the canvas
    }
  Module["_XOpenDisplay"] = _XOpenDisplay;

  function _XCreateWindow(display, parent, x, y, width, height, border_width, depth, class_, visual, valuemask, attributes) {
      // All we can do is set the width and height
      Browser.setCanvasSize(width, height);
      return 2;
    }
  Module["_XCreateWindow"] = _XCreateWindow;

  function _XChangeWindowAttributes(){}
  Module["_XChangeWindowAttributes"] = _XChangeWindowAttributes;

  function _XSetWMHints(){}
  Module["_XSetWMHints"] = _XSetWMHints;

  function _XMapWindow(){}
  Module["_XMapWindow"] = _XMapWindow;

  function _XStoreName(){}
  Module["_XStoreName"] = _XStoreName;

  function _XInternAtom(display, name_, hmm) { return 0 }
  Module["_XInternAtom"] = _XInternAtom;

  function _XSendEvent(){}
  Module["_XSendEvent"] = _XSendEvent;

  function _XPending(display) { return 0 }
  Module["_XPending"] = _XPending;

  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};
  Module["EGL"] = EGL;

  
  function _eglWaitClient() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }
  Module["_eglWaitClient"] = _eglWaitClient;function _eglGetDisplay(nativeDisplayType) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Note: As a 'conformant' implementation of EGL, we would prefer to init here only if the user
      //       calls this function with EGL_DEFAULT_DISPLAY. Other display IDs would be preferred to be unsupported
      //       and EGL_NO_DISPLAY returned. Uncomment the following code lines to do this.
      // Instead, an alternative route has been preferred, namely that the Emscripten EGL implementation
      // "emulates" X11, and eglGetDisplay is expected to accept/receive a pointer to an X11 Display object.
      // Therefore, be lax and allow anything to be passed in, and return the magic handle to our default EGLDisplay object.
  
  //    if (nativeDisplayType == 0 /* EGL_DEFAULT_DISPLAY */) {
          return 62000; // Magic ID for Emscripten 'default display'
  //    }
  //    else
  //      return 0; // EGL_NO_DISPLAY
    }
  Module["_eglGetDisplay"] = _eglGetDisplay;

  function _eglInitialize(display, majorVersion, minorVersion) {
      if (display == 62000 /* Magic ID for Emscripten 'default display' */) {
        if (majorVersion) {
          HEAP32[((majorVersion)>>2)]=1; // Advertise EGL Major version: '1'
        }
        if (minorVersion) {
          HEAP32[((minorVersion)>>2)]=4; // Advertise EGL Minor version: '4'
        }
        EGL.defaultDisplayInitialized = true;
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } 
      else {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
    }
  Module["_eglInitialize"] = _eglInitialize;

  function _eglTerminate(display) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }
  Module["_eglTerminate"] = _eglTerminate;

  function _eglGetConfigs(display, configs, config_size, numConfigs) { 
      return EGL.chooseConfig(display, 0, configs, config_size, numConfigs);
    }
  Module["_eglGetConfigs"] = _eglGetConfigs;

  function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) { 
      return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    }
  Module["_eglChooseConfig"] = _eglChooseConfig;

  function _eglGetConfigAttrib(display, config, attribute, value) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)]=32;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)]=24;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)]=62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)]=16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)]=4;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)]=0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)]=0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    }
  Module["_eglGetConfigAttrib"] = _eglGetConfigAttrib;

  function _eglCreateWindowSurface(display, config, win, attrib_list) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    }
  Module["_eglCreateWindowSurface"] = _eglCreateWindowSurface;

  function _eglDestroySurface(display, surface) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0; 
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    }
  Module["_eglDestroySurface"] = _eglDestroySurface;

  function _eglCreateContext(display, config, hmm, contextAttribs) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for(;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      _glutInitDisplayMode(0xB2 /* GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE | GLUT_STENCIL */);
      EGL.windowID = _glutCreateWindow();
      if (EGL.windowID != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        // Note: This function only creates a context, but it shall not make it active.
        return 62004; // Magic ID for Emscripten EGLContext
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    }
  Module["_eglCreateContext"] = _eglCreateContext;

  function _eglDestroyContext(display, context) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      if (context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }
  Module["_eglDestroyContext"] = _eglDestroyContext;

  function _eglQuerySurface(display, surface, attribute, value) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (surface != 62006 /* Magic ID for Emscripten 'default surface' */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)]=62002;
          return 1;
      case 0x3058: // EGL_LARGEST_PBUFFER
        // Odd EGL API: If surface is not a pbuffer surface, 'value' should not be written to. It's not specified as an error, so true should(?) be returned.
        // Existing Android implementation seems to do so at least.
        return 1;
      case 0x3057: // EGL_WIDTH
        HEAP32[((value)>>2)]=Module.canvas.width;
        return 1;
      case 0x3056: // EGL_HEIGHT
        HEAP32[((value)>>2)]=Module.canvas.height;
        return 1;
      case 0x3090: // EGL_HORIZONTAL_RESOLUTION
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3091: // EGL_VERTICAL_RESOLUTION
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3092: // EGL_PIXEL_ASPECT_RATIO
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3086: // EGL_RENDER_BUFFER
        // The main surface is bound to the visible canvas window - it's always backbuffered. 
        // Alternative to EGL_BACK_BUFFER would be EGL_SINGLE_BUFFER.
        HEAP32[((value)>>2)]=0x3084; 
        return 1;
      case 0x3099: // EGL_MULTISAMPLE_RESOLVE
        HEAP32[((value)>>2)]=0x309A; 
        return 1;
      case 0x3093: // EGL_SWAP_BEHAVIOR
        // The two possibilities are EGL_BUFFER_PRESERVED and EGL_BUFFER_DESTROYED. Slightly unsure which is the
        // case for browser environment, but advertise the 'weaker' behavior to be sure.
        HEAP32[((value)>>2)]=0x3095;
        return 1;
      case 0x3080: // EGL_TEXTURE_FORMAT
      case 0x3081: // EGL_TEXTURE_TARGET
      case 0x3082: // EGL_MIPMAP_TEXTURE
      case 0x3083: // EGL_MIPMAP_LEVEL
        // This is a window surface, not a pbuffer surface. Spec:
        // "Querying EGL_TEXTURE_FORMAT, EGL_TEXTURE_TARGET, EGL_MIPMAP_TEXTURE, or EGL_MIPMAP_LEVEL for a non-pbuffer surface is not an error, but value is not modified."
        // So pass-through.
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    }
  Module["_eglQuerySurface"] = _eglQuerySurface;

  function _eglQueryContext(display, context, attribute, value) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      if (context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
    
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
        case 0x3028: // EGL_CONFIG_ID
          HEAP32[((value)>>2)]=62002;
          return 1;
        case 0x3097: // EGL_CONTEXT_CLIENT_TYPE
          HEAP32[((value)>>2)]=0x30A0;
          return 1;
        case 0x3098: // EGL_CONTEXT_CLIENT_VERSION
          HEAP32[((value)>>2)]=2; // We always report the context to be a GLES2 context (and not a GLES1 context)
          return 1;
        case 0x3086: // EGL_RENDER_BUFFER
          // The context is bound to the visible canvas window - it's always backbuffered. 
          // Alternative to EGL_BACK_BUFFER would be EGL_SINGLE_BUFFER.
          HEAP32[((value)>>2)]=0x3084; 
          return 1;
        default:
          EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
          return 0;
      }
    }
  Module["_eglQueryContext"] = _eglQueryContext;

  function _eglGetError() { 
      return EGL.errorCode;
    }
  Module["_eglGetError"] = _eglGetError;

  function _eglQueryString(display, name) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;
      switch(name) {
        case 0x3053 /* EGL_VENDOR */: ret = allocate(intArrayFromString("Emscripten"), 'i8', ALLOC_NORMAL); break;
        case 0x3054 /* EGL_VERSION */: ret = allocate(intArrayFromString("1.4 Emscripten EGL"), 'i8', ALLOC_NORMAL); break;
        case 0x3055 /* EGL_EXTENSIONS */:  ret = allocate(intArrayFromString(""), 'i8', ALLOC_NORMAL); break; // Currently not supporting any EGL extensions.
        case 0x308D /* EGL_CLIENT_APIS */: ret = allocate(intArrayFromString("OpenGL_ES"), 'i8', ALLOC_NORMAL); break;
        default:
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
      }
      EGL.stringCache[name] = ret;
      return ret;
    }
  Module["_eglQueryString"] = _eglQueryString;

  function _eglBindAPI(api) {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } else { // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
    }
  Module["_eglBindAPI"] = _eglBindAPI;

  function _eglQueryAPI() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 0x30A0; // EGL_OPENGL_ES_API
    }
  Module["_eglQueryAPI"] = _eglQueryAPI;


  function _eglWaitNative(nativeEngineId) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }
  Module["_eglWaitNative"] = _eglWaitNative;

  function _eglWaitGL() {
  return _eglWaitClient.apply(null, arguments)
  }
  Module["_eglWaitGL"] = _eglWaitGL;

  function _eglSwapInterval(display, interval) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }
  Module["_eglSwapInterval"] = _eglSwapInterval;

  function _eglMakeCurrent(display, draw, read, context) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      if (context != 0 && context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    }
  Module["_eglMakeCurrent"] = _eglMakeCurrent;

  function _eglGetCurrentContext() {
      return EGL.currentContext;
    }
  Module["_eglGetCurrentContext"] = _eglGetCurrentContext;

  function _eglGetCurrentSurface(readdraw) {
      if (readdraw == 0x305A /* EGL_READ */) {
        return EGL.currentReadSurface;
      } else if (readdraw == 0x3059 /* EGL_DRAW */) {
        return EGL.currentDrawSurface;
      } else {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0 /* EGL_NO_SURFACE */;
      }
    }
  Module["_eglGetCurrentSurface"] = _eglGetCurrentSurface;

  function _eglGetCurrentDisplay() {
      return EGL.currentContext ? 62000 /* Magic ID for Emscripten 'default display' */ : 0;
    }
  Module["_eglGetCurrentDisplay"] = _eglGetCurrentDisplay;

  function _eglSwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers();
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!Module.ctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/kripken/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    }
  Module["_eglSwapBuffers"] = _eglSwapBuffers;

  function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }
  Module["_eglGetProcAddress"] = _eglGetProcAddress;

  function _eglReleaseThread() {
      // Equivalent to eglMakeCurrent with EGL_NO_CONTEXT and EGL_NO_SURFACE.
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      // EGL spec v1.4 p.55:
      // "calling eglGetError immediately following a successful call to eglReleaseThread should not be done.
      //  Such a call will return EGL_SUCCESS - but will also result in reallocating per-thread state."                     
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    }
  Module["_eglReleaseThread"] = _eglReleaseThread;

  var AL={QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:0.1,DEVICE_NAME:"Emscripten OpenAL",CAPTURE_DEVICE_NAME:"Emscripten OpenAL capture",ALC_EXTENSIONS:{ALC_SOFT_pause_device:true,ALC_SOFT_HRTF:true},AL_EXTENSIONS:{AL_EXT_float32:true,AL_SOFT_loop_points:true,AL_SOFT_source_length:true,AL_EXT_source_distance_model:true,AL_SOFT_source_spatialize:true},_alcErr:0,alcErr:0,deviceRefCounts:{},alcStringCache:{},paused:false,stringCache:{},contexts:{},currentCtx:null,buffers:{0:{id:0,refCount:0,audioBuf:null,frequency:0,bytesPerSample:2,channels:1,length:0}},paramArray:[],_nextId:1,newId:function () {
        return AL.freeIds.length > 0 ? AL.freeIds.pop() : AL._nextId++;
      },freeIds:[],scheduleContextAudio:function (ctx) {
        // If we are animating using the requestAnimationFrame method, then the main loop does not run when in the background.
        // To give a perfect glitch-free audio stop when switching from foreground to background, we need to avoid updating
        // audio altogether when in the background, so detect that case and kill audio buffer streaming if so.
        if (Browser.mainLoop.timingMode === 1 /* EM_TIMING_RAF */ && document['visibilityState'] != 'visible') {
          return;
        }
  
        for (var i in ctx.sources) {
          AL.scheduleSourceAudio(ctx.sources[i]);
        }
      },scheduleSourceAudio:function (src, lookahead) {
        // See comment on scheduleContextAudio above.
        if (Browser.mainLoop.timingMode === 1 /*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') {
          return;
        }
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = AL.updateSourceTime(src);
  
        var startTime = src.bufStartTime;
        var startOffset = src.bufOffset;
        var bufCursor = src.bufsProcessed;
  
        // Advance past any audio that is already scheduled
        for (var i = 0; i < src.audioQueue.length; i++) {
          var audioSrc = src.audioQueue[i];
          startTime = audioSrc._startTime + audioSrc._duration;
          startOffset = 0.0;
          bufCursor += audioSrc._skipCount + 1;
        }
  
        if (!lookahead) {
          lookahead = AL.QUEUE_LOOKAHEAD;
        }
        var lookaheadTime = currentTime + lookahead;
        var skipCount = 0;
        while (startTime < lookaheadTime) {
          if (bufCursor >= src.bufQueue.length) {
            if (src.looping) {
              bufCursor %= src.bufQueue.length;
            } else {
              break;
            }
          }
  
          var buf = src.bufQueue[bufCursor % src.bufQueue.length];
          // If the buffer contains no data, skip it
          if (buf.length === 0) {
            skipCount++;
            // If we've gone through the whole queue and everything is 0 length, just give up
            if (skipCount === src.bufQueue.length) {
              break;
            }
          } else {
            var audioSrc = src.context.audioCtx.createBufferSource();
            audioSrc.buffer = buf.audioBuf;
            audioSrc.playbackRate.value = src.playbackRate;
            if (buf.audioBuf._loopStart || buf.audioBuf._loopEnd) {
              audioSrc.loopStart = buf.audioBuf._loopStart;
              audioSrc.loopEnd = buf.audioBuf._loopEnd;
            }
  
            var duration = 0.0;
            // If the source is a looping static buffer, use native looping for gapless playback
            if (src.type === 0x1028 /* AL_STATIC */ && src.looping) {
              duration = Number.POSITIVE_INFINITY;
              audioSrc.loop = true;
              if (buf.audioBuf._loopStart) {
                audioSrc.loopStart = buf.audioBuf._loopStart;
              }
              if (buf.audioBuf._loopEnd) {
                audioSrc.loopEnd = buf.audioBuf._loopEnd;
              }
            } else {
              duration = (buf.audioBuf.duration - startOffset) / src.playbackRate;
            }
  
            audioSrc._startOffset = startOffset;
            audioSrc._duration = duration;
            audioSrc._skipCount = skipCount;
            skipCount = 0;
  
            audioSrc.connect(src.gain);
  
            if (typeof(audioSrc.start) !== 'undefined') {
              // Sample the current time as late as possible to mitigate drift
              startTime = Math.max(startTime, src.context.audioCtx.currentTime);
              audioSrc.start(startTime, startOffset);
            } else if (typeof(audioSrc.noteOn) !== 'undefined') {
              startTime = Math.max(startTime, src.context.audioCtx.currentTime);
              audioSrc.noteOn(startTime);
            }
            audioSrc._startTime = startTime;
            src.audioQueue.push(audioSrc);
  
            startTime += duration;
          }
  
          startOffset = 0.0;
          bufCursor++;
        }
      },updateSourceTime:function (src) {
        var currentTime = src.context.audioCtx.currentTime;
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return currentTime;
        }
  
        // if the start time is unset, determine it based on the current offset.
        // This will be the case when a source is resumed after being paused, and
        // allows us to pretend that the source actually started playing some time
        // in the past such that it would just now have reached the stored offset.
        if (!isFinite(src.bufStartTime)) {
          src.bufStartTime = currentTime - src.bufOffset / src.playbackRate;
          src.bufOffset = 0.0;
        }
  
        var nextStartTime = 0.0;
        while (src.audioQueue.length) {
          var audioSrc = src.audioQueue[0];
          src.bufsProcessed += audioSrc._skipCount;
          nextStartTime = audioSrc._startTime + audioSrc._duration; // n.b. audioSrc._duration already factors in playbackRate, so no divide by src.playbackRate on it.
  
          if (currentTime < nextStartTime) {
            break;
          }
  
          src.audioQueue.shift();
          src.bufStartTime = nextStartTime;
          src.bufOffset = 0.0;
          src.bufsProcessed++;
        }
  
        if (src.bufsProcessed >= src.bufQueue.length && !src.looping) {
          // The source has played its entire queue and is non-looping, so just mark it as stopped.
          AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
        } else if (src.type === 0x1028 /* AL_STATIC */ && src.looping) {
          // If the source is a looping static buffer, determine the buffer offset based on the loop points
          var buf = src.bufQueue[0];
          if (buf.length === 0) {
            src.bufOffset = 0.0;
          } else {
            var delta = (currentTime - src.bufStartTime) * src.playbackRate;
            var loopStart = buf.audioBuf._loopStart || 0.0;
            var loopEnd = buf.audioBuf._loopEnd || buf.audioBuf.duration;
            if (loopEnd <= loopStart) {
              loopEnd = buf.audioBuf.duration;
            }
  
            if (delta < loopEnd) {
              src.bufOffset = delta;
            } else {
              src.bufOffset = loopStart + (delta - loopStart) % (loopEnd - loopStart);
            }
          }
        } else if (src.audioQueue[0]) {
          // The source is still actively playing, so we just need to calculate where we are in the current buffer
          // so it can be remembered if the source gets paused.
          src.bufOffset = (currentTime - src.audioQueue[0]._startTime) * src.playbackRate;
        } else {
          // The source hasn't finished yet, but there is no scheduled audio left for it. This can be because
          // the source has just been started/resumed, or due to an underrun caused by a long blocking operation.
          // We need to determine what state we would be in by this point in time so that when we next schedule
          // audio playback, it will be just as if no underrun occurred.
  
          if (src.type !== 0x1028 /* AL_STATIC */ && src.looping) {
            // if the source is a looping buffer queue, let's first calculate the queue duration, so we can
            // quickly fast forward past any full loops of the queue and only worry about the remainder.
            var srcDuration = AL.sourceDuration(src) / src.playbackRate;
            if (srcDuration > 0.0) {
              src.bufStartTime += Math.floor((currentTime - src.bufStartTime) / srcDuration) * srcDuration;
            }
          }
  
          // Since we've already skipped any full-queue loops if there were any, we just need to find
          // out where in the queue the remaining time puts us, which won't require stepping through the
          // entire queue more than once.
          for (var i = 0; i < src.bufQueue.length; i++) {
            if (src.bufsProcessed >= src.bufQueue.length) {
              if (src.looping) {
                src.bufsProcessed %= src.bufQueue.length;
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
                break;
              }
            }
  
            var buf = src.bufQueue[src.bufsProcessed];
            if (buf.length > 0) {
              nextStartTime = src.bufStartTime + buf.audioBuf.duration / src.playbackRate;
  
              if (currentTime < nextStartTime) {
                src.bufOffset = (currentTime - src.bufStartTime) * src.playbackRate;
                break;
              }
  
              src.bufStartTime = nextStartTime;
            }
  
            src.bufOffset = 0.0;
            src.bufsProcessed++;
          }
        }
  
        return currentTime;
      },cancelPendingSourceAudio:function (src) {
        AL.updateSourceTime(src);
  
        for (var i = 1; i < src.audioQueue.length; i++) {
          var audioSrc = src.audioQueue[i];
          audioSrc.stop();
        }
  
        if (src.audioQueue.length > 1) {
          src.audioQueue.length = 1;
        }
      },stopSourceAudio:function (src) {
        for (var i = 0; i < src.audioQueue.length; i++) {
          src.audioQueue[i].stop();
        }
        src.audioQueue.length = 0;
      },setSourceState:function (src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state === 0x1012 /* AL_PLAYING */ || src.state == 0x1014 /* AL_STOPPED */) {
            src.bufsProcessed = 0;
            src.bufOffset = 0.0;
          } else {
          }
  
          AL.stopSourceAudio(src);
  
          src.state = 0x1012 /* AL_PLAYING */;
          src.bufStartTime = Number.NEGATIVE_INFINITY;
          AL.scheduleSourceAudio(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            // Store off the current offset to restore with on resume.
            AL.updateSourceTime(src);
            AL.stopSourceAudio(src);
  
            src.state = 0x1013 /* AL_PAUSED */;
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.bufsProcessed = src.bufQueue.length;
            src.bufStartTime = Number.NEGATIVE_INFINITY;
            src.bufOffset = 0.0;
            AL.stopSourceAudio(src);
          }
        } else if (state === 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufsProcessed = 0;
            src.bufStartTime = Number.NEGATIVE_INFINITY;
            src.bufOffset = 0.0;
            AL.stopSourceAudio(src);
          }
        }
      },initSourcePanner:function (src) {
        if (src.type === 0x1030 /* AL_UNDETERMINED */) {
          return;
        }
  
        // Find the first non-zero buffer in the queue to determine the proper format
        var templateBuf = AL.buffers[0];
        for (var i = 0; i < src.bufQueue.length; i++) {
          if (src.bufQueue[i].id !== 0) {
            templateBuf = src.bufQueue[i];
            break;
          }
        }
        // Create a panner if AL_SOURCE_SPATIALIZE_SOFT is set to true, or alternatively if it's set to auto and the source is mono
        if (src.spatialize === 1 /* AL_TRUE */ || (src.spatialize === 2 /* AL_AUTO_SOFT */ && templateBuf.channels === 1)) {
          if (src.panner) {
            return;
          }
          src.panner = src.context.audioCtx.createPanner();
  
          AL.updateSourceGlobal(src);
          AL.updateSourceSpace(src);
  
          src.panner.connect(src.context.gain);
          src.gain.disconnect();
          src.gain.connect(src.panner);
        } else {
          if (!src.panner) {
            return;
          }
  
          src.panner.disconnect();
          src.gain.disconnect();
          src.gain.connect(src.context.gain);
          src.panner = null;
        }
      },updateContextGlobal:function (ctx) {
        for (var i in ctx.sources) {
          AL.updateSourceGlobal(ctx.sources[i]);
        }
      },updateSourceGlobal:function (src) {
        var panner = src.panner;
        if (!panner) {
          return;
        }
  
        panner.refDistance = src.refDistance;
        panner.maxDistance = src.maxDistance;
        panner.rolloffFactor = src.rolloffFactor;
  
        panner.panningModel = src.context.hrtf ? 'HRTF' : 'equalpower';
  
        // Use the source's distance model if AL_SOURCE_DISTANCE_MODEL is enabled
        var distanceModel = src.context.sourceDistanceModel ? src.distanceModel : src.context.distanceModel;
        switch (distanceModel) {
        case 0 /* AL_NONE */:
          panner.distanceModel = 'inverse';
          panner.refDistance = 3.40282e38 /* FLT_MAX */;
          break;
        case 0xd001 /* AL_INVERSE_DISTANCE */:
        case 0xd002 /* AL_INVERSE_DISTANCE_CLAMPED */:
          panner.distanceModel = 'inverse';
          break;
        case 0xd003 /* AL_LINEAR_DISTANCE */:
        case 0xd004 /* AL_LINEAR_DISTANCE_CLAMPED */:
          panner.distanceModel = 'linear';
          break;
        case 0xd005 /* AL_EXPONENT_DISTANCE */:
        case 0xd006 /* AL_EXPONENT_DISTANCE_CLAMPED */:
          panner.distanceModel = 'exponential';
          break;
        }
      },updateListenerSpace:function (ctx) {
        var listener = ctx.audioCtx.listener;
        if (listener.positionX) {
          listener.positionX.value = ctx.listener.position[0];
          listener.positionY.value = ctx.listener.position[1];
          listener.positionZ.value = ctx.listener.position[2];
        } else {
          listener.setPosition(ctx.listener.position[0], ctx.listener.position[1], ctx.listener.position[2]);
        }
        if (listener.forwardX) {
          listener.forwardX.value = ctx.listener.direction[0];
          listener.forwardY.value = ctx.listener.direction[1];
          listener.forwardZ.value = ctx.listener.direction[2];
          listener.upX.value = ctx.listener.up[0];
          listener.upY.value = ctx.listener.up[1];
          listener.upZ.value = ctx.listener.up[2];
        } else {
          listener.setOrientation(
            ctx.listener.direction[0], ctx.listener.direction[1], ctx.listener.direction[2],
            ctx.listener.up[0], ctx.listener.up[1], ctx.listener.up[2]);
        }
  
        // Update sources that are relative to the listener
        for (var i in ctx.sources) {
          AL.updateSourceSpace(ctx.sources[i]);
        }
      },updateSourceSpace:function (src) {
        if (!src.panner) {
          return;
        }
        var panner = src.panner;
  
        var posX = src.position[0];
        var posY = src.position[1];
        var posZ = src.position[2];
        var dirX = src.direction[0];
        var dirY = src.direction[1];
        var dirZ = src.direction[2];
  
        var listener = src.context.listener;
        var lPosX = listener.position[0];
        var lPosY = listener.position[1];
        var lPosZ = listener.position[2];
  
        // WebAudio does spatialization in world-space coordinates, meaning both the buffer sources and
        // the listener position are in the same absolute coordinate system relative to a fixed origin.
        // By default, OpenAL works this way as well, but it also provides a "listener relative" mode, where
        // a buffer source's coordinate are interpreted not in absolute world space, but as being relative
        // to the listener object itself, so as the listener moves the source appears to move with it
        // with no update required. Since web audio does not support this mode, we must transform the source
        // coordinates from listener-relative space to absolute world space.
        //
        // We do this via affine transformation matrices applied to the source position and source direction.
        // A change-of-basis converts from listener-space displacements to world-space displacements,
        // which must be done for both the source position and direction. Lastly, the source position must be
        // added to the listener position to get the final source position, since the source position represents
        // a displacement from the listener.
        if (src.relative) {
          // Negate the listener direction since forward is -Z.
          var lBackX = -listener.direction[0];
          var lBackY = -listener.direction[1];
          var lBackZ = -listener.direction[2];
          var lUpX = listener.up[0];
          var lUpY = listener.up[1];
          var lUpZ = listener.up[2];
  
          // Normalize the Back vector
          var invMag = 1.0 / Math.sqrt(lBackX * lBackX + lBackY * lBackY + lBackZ * lBackZ);
          lBackX *= invMag;
          lBackY *= invMag;
          lBackZ *= invMag;
  
          // ...and the Up vector
          var invMag = 1.0 / Math.sqrt(lUpX * lUpX + lUpY * lUpY + lUpZ * lUpZ);
          lUpX *= invMag;
          lUpY *= invMag;
          lUpZ *= invMag;
  
          // Calculate the Right vector as the cross product of the Up and Back vectors
          var lRightX = (lUpY * lBackZ - lUpZ * lBackY);
          var lRightY = (lUpZ * lBackX - lUpX * lBackZ);
          var lRightZ = (lUpX * lBackY - lUpY * lBackX);
  
          // Back and Up might not be exactly perpendicular, so the cross product also needs normalization
          var invMag = 1.0 / Math.sqrt(lRightX * lRightX + lRightY * lRightY + lRightZ * lRightZ);
          lRightX *= invMag;
          lRightY *= invMag;
          lRightZ *= invMag;
  
          // Recompute Up from the now orthonormal Right and Back vectors so we have a fully orthonormal basis
          var lUpX = (lBackY * lRightZ - lBackZ * lRightY);
          var lUpY = (lBackZ * lRightX - lBackX * lRightZ);
          var lUpZ = (lBackX * lRightY - lBackY * lRightX);
  
          var oldX = dirX;
          var oldY = dirY;
          var oldZ = dirZ;
  
          // Use our 3 vectors to apply a change-of-basis matrix to the source direction
          dirX = oldX * lRightX + oldY * lUpX + oldZ * lBackX;
          dirY = oldX * lRightY + oldY * lUpY + oldZ * lBackY;
          dirZ = oldX * lRightZ + oldY * lUpZ + oldZ * lBackZ;
  
          var oldX = posX;
          var oldY = posY;
          var oldZ = posZ;
  
          // ...and to the source position
          posX = oldX * lRightX + oldY * lUpX + oldZ * lBackX;
          posY = oldX * lRightY + oldY * lUpY + oldZ * lBackY;
          posZ = oldX * lRightZ + oldY * lUpZ + oldZ * lBackZ;
  
          // The change-of-basis corrects the orientation, but the origin is still the listener.
          // Translate the source position by the listener position to finish.
          posX += lPosX;
          posY += lPosY;
          posZ += lPosZ;
        }
  
        if (panner.positionX) {
          panner.positionX.value = posX;
          panner.positionY.value = posY;
          panner.positionZ.value = posZ;
        } else {
          panner.setPosition(posX, posY, posZ);
        }
        if (panner.orientationX) {
          panner.orientationX.value = dirX;
          panner.orientationY.value = dirY;
          panner.orientationZ.value = dirZ;
        } else {
          panner.setOrientation(dirX, dirY, dirZ);
        }
  
        var oldShift = src.dopplerShift;
        var velX = src.velocity[0];
        var velY = src.velocity[1];
        var velZ = src.velocity[2];
        var lVelX = listener.velocity[0];
        var lVelY = listener.velocity[1];
        var lVelZ = listener.velocity[2];
        if (posX === lPosX && posY === lPosY && posZ === lPosZ
          || velX === lVelX && velY === lVelY && velZ === lVelZ)
        {
          src.dopplerShift = 1.0;
        } else {
          // Doppler algorithm from 1.1 spec
          var speedOfSound = src.context.speedOfSound;
          var dopplerFactor = src.context.dopplerFactor;
  
          var slX = lPosX - posX;
          var slY = lPosY - posY;
          var slZ = lPosZ - posZ;
  
          var magSl = Math.sqrt(slX * slX + slY * slY + slZ * slZ);
          var vls = (slX * lVelX + slY * lVelY + slZ * lVelZ) / magSl;
          var vss = (slX * velX + slY * velY + slZ * velZ) / magSl;
  
          vls = Math.min(vls, speedOfSound / dopplerFactor);
          vss = Math.min(vss, speedOfSound / dopplerFactor);
  
          src.dopplerShift = (speedOfSound - dopplerFactor * vls) / (speedOfSound - dopplerFactor * vss);
        }
        if (src.dopplerShift !== oldShift) {
          AL.updateSourceRate(src);
        }
      },updateSourceRate:function (src) {
        if (src.state === 0x1012 /* AL_PLAYING */) {
          // clear scheduled buffers
          AL.cancelPendingSourceAudio(src);
  
          var audioSrc = src.audioQueue[0];
          if (!audioSrc) {
            return; // It is possible that AL.scheduleContextAudio() has not yet fed the next buffer, if so, skip.
          }
  
          var duration;
          if (src.type === 0x1028 /* AL_STATIC */ && src.looping) {
            duration = Number.POSITIVE_INFINITY;
          } else {
            // audioSrc._duration is expressed after factoring in playbackRate, so when changing playback rate, need
            // to recompute/rescale the rate to the new playback speed.
            duration = (audioSrc.buffer.duration - audioSrc._startOffset) / src.playbackRate;
          }
  
          audioSrc._duration = duration;
          audioSrc.playbackRate.value = src.playbackRate;
  
          // reschedule buffers with the new playbackRate
          AL.scheduleSourceAudio(src);
        }
      },sourceDuration:function (src) {
        var length = 0.0;
        for (var i = 0; i < src.bufQueue.length; i++) {
          var audioBuf = src.bufQueue[i].audioBuf;
          length += audioBuf ? audioBuf.duration : 0.0;
        }
        return length;
      },sourceTell:function (src) {
        AL.updateSourceTime(src);
  
        var offset = 0.0;
        for (var i = 0; i < src.bufsProcessed; i++) {
          offset += src.bufQueue[i].audioBuf.duration;
        }
        offset += src.bufOffset;
  
        return offset;
      },sourceSeek:function (src, offset) {
        var playing = src.state == 0x1012 /* AL_PLAYING */;
        if (playing) {
          AL.setSourceState(src, 0x1011 /* AL_INITIAL */);
        }
  
        src.bufsProcessed = 0;
        while (offset > src.bufQueue[src.bufsProcessed].audioBuf.duration) {
          offset -= src.bufQueue[src.bufsProcessed].audiobuf.duration;
          src.bufsProcessed++;
        }
  
        src.bufOffset = offset;
        if (playing) {
          AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
        }
      },getGlobalParam:function (funcname, param) {
        if (!AL.currentCtx) {
          return null;
        }
  
        switch (param) {
        case 0xC000 /* AL_DOPPLER_FACTOR */:
          return AL.currentCtx.dopplerFactor;
        case 0xC003 /* AL_SPEED_OF_SOUND */:
          return AL.currentCtx.speedOfSound;
        case 0xD000 /* AL_DISTANCE_MODEL */:
          return AL.currentCtx.distanceModel;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return null;
        }
      },setGlobalParam:function (funcname, param, value) {
        if (!AL.currentCtx) {
          return;
        }
  
        switch (param) {
        case 0xC000 /* AL_DOPPLER_FACTOR */:
          if (!Number.isFinite(value) || value < 0.0) { // Strictly negative values are disallowed
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.currentCtx.dopplerFactor = value;
          AL.updateListenerSpace(AL.currentCtx);
          break;
        case 0xC003 /* AL_SPEED_OF_SOUND */:
          if (!Number.isFinite(value) || value <= 0.0) { // Negative or zero values are disallowed
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.currentCtx.speedOfSound = value;
          AL.updateListenerSpace(AL.currentCtx);
          break;
        case 0xD000 /* AL_DISTANCE_MODEL */:
          switch (value) {
          case 0 /* AL_NONE */:
          case 0xd001 /* AL_INVERSE_DISTANCE */:
          case 0xd002 /* AL_INVERSE_DISTANCE_CLAMPED */:
          case 0xd003 /* AL_LINEAR_DISTANCE */:
          case 0xd004 /* AL_LINEAR_DISTANCE_CLAMPED */:
          case 0xd005 /* AL_EXPONENT_DISTANCE */:
          case 0xd006 /* AL_EXPONENT_DISTANCE_CLAMPED */:
            AL.currentCtx.distanceModel = value;
            AL.updateContextGlobal(AL.currentCtx);
            break;
          default:
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          break;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
      },getListenerParam:function (funcname, param) {
        if (!AL.currentCtx) {
          return null;
        }
  
        switch (param) {
        case 0x1004 /* AL_POSITION */:
          return AL.currentCtx.listener.position;
        case 0x1006 /* AL_VELOCITY */:
          return AL.currentCtx.listener.velocity;
        case 0x100F /* AL_ORIENTATION */:
          return AL.currentCtx.listener.direction.concat(AL.currentCtx.listener.up);
        case 0x100A /* AL_GAIN */:
          return AL.currentCtx.gain.gain.value;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return null;
        }
      },setListenerParam:function (funcname, param, value) {
        if (!AL.currentCtx) {
          return;
        }
        if (value === null) {
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
  
        var listener = AL.currentCtx.listener;
        switch (param) {
        case 0x1004 /* AL_POSITION */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          listener.position[0] = value[0];
          listener.position[1] = value[1];
          listener.position[2] = value[2];
          AL.updateListenerSpace(AL.currentCtx);
          break;
        case 0x1006 /* AL_VELOCITY */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          listener.velocity[0] = value[0];
          listener.velocity[1] = value[1];
          listener.velocity[2] = value[2];
          AL.updateListenerSpace(AL.currentCtx);
          break;
        case 0x100A /* AL_GAIN */:
          if (!Number.isFinite(value) || value < 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.currentCtx.gain.gain.value = value;
          break;
        case 0x100F /* AL_ORIENTATION */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])
            || !Number.isFinite(value[3]) || !Number.isFinite(value[4]) || !Number.isFinite(value[5])
          ) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          listener.direction[0] = value[0];
          listener.direction[1] = value[1];
          listener.direction[2] = value[2];
          listener.up[0] = value[3];
          listener.up[1] = value[4];
          listener.up[2] = value[5];
          AL.updateListenerSpace(AL.currentCtx);
          break;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
      },getBufferParam:function (funcname, bufferId, param) {
        if (!AL.currentCtx) {
          return;
        }
        var buf = AL.buffers[bufferId];
        if (!buf || bufferId === 0) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        switch (param) {
        case 0x2001 /* AL_FREQUENCY */:
          return buf.frequency;
        case 0x2002 /* AL_BITS */:
          return buf.bytesPerSample * 8;
        case 0x2003 /* AL_CHANNELS */:
          return buf.channels;
        case 0x2004 /* AL_SIZE */:
          return buf.length * buf.bytesPerSample * buf.channels;
        case 0x2015 /* AL_LOOP_POINTS_SOFT */:
          if (buf.length === 0) {
            return [0, 0];
          } else {
            return [
              (buf.audioBuf._loopStart || 0.0) * buf.frequency,
              (buf.audioBuf._loopEnd || buf.length) * buf.frequency
            ];
          }
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return null;
        }
      },setBufferParam:function (funcname, bufferId, param, value) {
        if (!AL.currentCtx) {
          return;
        }
        var buf = AL.buffers[bufferId];
        if (!buf || bufferId === 0) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
        if (value === null) {
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
  
        switch (param) {
        case 0x2004 /* AL_SIZE */:
          if (value !== 0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          // Per the spec, setting AL_SIZE to 0 is a legal NOP.
          break;
        case 0x2015 /* AL_LOOP_POINTS_SOFT */:
          if (value[0] < 0 || value[0] > buf.length || value[1] < 0 || value[1] > buf.Length || value[0] >= value[1]) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          if (buf.refCount > 0) {
            AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
            return;
          }
  
          if (buf.audioBuf) {
            buf.audioBuf._loopStart = value[0] / buf.frequency;
            buf.audioBuf._loopEnd = value[1] / buf.frequency;
          }
          break;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
      },getSourceParam:function (funcname, sourceId, param) {
        if (!AL.currentCtx) {
          return null;
        }
        var src = AL.currentCtx.sources[sourceId];
        if (!src) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return null;
        }
  
        switch (param) {
        case 0x202 /* AL_SOURCE_RELATIVE */:
          return src.relative;
        case 0x1001 /* AL_CONE_INNER_ANGLE */:
          return src.coneInnerAngle;
        case 0x1002 /* AL_CONE_OUTER_ANGLE */:
          return src.coneOuterAngle;
        case 0x1003 /* AL_PITCH */:
          return src.pitch;
        case 0x1004 /* AL_POSITION */:
          return src.position;
        case 0x1005 /* AL_DIRECTION */:
          return src.direction;
        case 0x1006 /* AL_VELOCITY */:
          return src.velocity;
        case 0x1007 /* AL_LOOPING */:
          return src.looping;
        case 0x1009 /* AL_BUFFER */:
          if (src.type === 0x1028 /* AL_STATIC */) {
            return src.bufQueue[0].id;
          } else {
            return 0;
          }
        case 0x100A /* AL_GAIN */:
          return src.gain.gain.value;
         case 0x100D /* AL_MIN_GAIN */:
          return src.minGain;
        case 0x100E /* AL_MAX_GAIN */:
          return src.maxGain;
        case 0x1010 /* AL_SOURCE_STATE */:
          return src.state;
        case 0x1015 /* AL_BUFFERS_QUEUED */:
          if (src.bufQueue.length === 1 && src.bufQueue[0].id === 0) {
            return 0;
          } else {
            return src.bufQueue.length;
          }
        case 0x1016 /* AL_BUFFERS_PROCESSED */:
          if ((src.bufQueue.length === 1 && src.bufQueue[0].id === 0) || src.looping) {
            return 0;
          } else {
            return src.bufsProcessed;
          }
        case 0x1020 /* AL_REFERENCE_DISTANCE */:
          return src.refDistance;
        case 0x1021 /* AL_ROLLOFF_FACTOR */:
          return src.rolloffFactor;
        case 0x1022 /* AL_CONE_OUTER_GAIN */:
          return src.coneOuterGain;
        case 0x1023 /* AL_MAX_DISTANCE */:
          return src.maxDistance;
        case 0x1024 /* AL_SEC_OFFSET */:
          return AL.sourceTell(src);
        case 0x1025 /* AL_SAMPLE_OFFSET */:
          var offset = AL.sourceTell(src);
          if (offset > 0.0) {
            offset *= src.bufQueue[0].frequency;
          }
          return offset;
        case 0x1026 /* AL_BYTE_OFFSET */:
          var offset = AL.sourceTell(src);
          if (offset > 0.0) {
            offset *= src.bufQueue[0].frequency * src.bufQueue[0].bytesPerSample;
          }
          return offset;
        case 0x1027 /* AL_SOURCE_TYPE */:
          return src.type;
        case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
          return src.spatialize;
        case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
          var length = 0;
          var bytesPerFrame = 0;
          for (var i = 0; i < src.bufQueue.length; i++) {
            length += src.bufQueue[i].length;
            if (src.bufQueue[i].id !== 0) {
              bytesPerFrame = src.bufQueue[i].bytesPerSample * src.bufQueue[i].channels;
            }
          }
          return length * bytesPerFrame;
        case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
          var length = 0;
          for (var i = 0; i < src.bufQueue.length; i++) {
            length += src.bufQueue[i].length;
          }
          return length;
        case 0x200B /* AL_SEC_LENGTH_SOFT */:
          return AL.sourceDuration(src);
        case 0xD000 /* AL_DISTANCE_MODEL */:
          return src.distanceModel;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return null;
        }
      },setSourceParam:function (funcname, sourceId, param, value) {
        if (!AL.currentCtx) {
          return;
        }
        var src = AL.currentCtx.sources[sourceId];
        if (!src) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
        if (value === null) {
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
  
        switch (param) {
        case 0x202 /* AL_SOURCE_RELATIVE */:
          if (value === 1 /* AL_TRUE */) {
            src.relative = true;
            AL.updateSourceSpace(src);
          } else if (value === 0 /* AL_FALSE */) {
            src.relative = false;
            AL.updateSourceSpace(src);
          } else {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          break;
        case 0x1001 /* AL_CONE_INNER_ANGLE */:
          if (!Number.isFinite(value)) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.coneInnerAngle = value;
          if (src.panner) {
            src.panner.coneInnerAngle = value % 360.0;
          }
          break;
        case 0x1002 /* AL_CONE_OUTER_ANGLE */:
          if (!Number.isFinite(value)) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.coneOuterAngle = value;
          if (src.panner) {
            src.panner.coneOuterAngle = value % 360.0;
          }
          break;
        case 0x1003 /* AL_PITCH */:
          if (!Number.isFinite(value) || value <= 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          if (src.pitch === value) {
            break;
          }
  
          src.pitch = value;
          AL.updateSourceRate(src);
          break;
        case 0x1004 /* AL_POSITION */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.position[0] = value[0];
          src.position[1] = value[1];
          src.position[2] = value[2];
          AL.updateSourceSpace(src);
          break;
        case 0x1005 /* AL_DIRECTION */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.direction[0] = value[0];
          src.direction[1] = value[1];
          src.direction[2] = value[2];
          AL.updateSourceSpace(src);
          break;
        case 0x1006 /* AL_VELOCITY */:
          if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.velocity[0] = value[0];
          src.velocity[1] = value[1];
          src.velocity[2] = value[2];
          AL.updateSourceSpace(src);
          break;
        case 0x1007 /* AL_LOOPING */:
          if (value === 1 /* AL_TRUE */) {
            src.looping = true;
            AL.updateSourceTime(src);
            if (src.type === 0x1028 /* AL_STATIC */ && src.audioQueue.length > 0) {
              var audioSrc  = src.audioQueue[0];
              audioSrc.loop = true;
              audioSrc._duration = Number.POSITIVE_INFINITY;
            }
          } else if (value === 0 /* AL_FALSE */) {
            src.looping = false;
            var currentTime = AL.updateSourceTime(src);
            if (src.type === 0x1028 /* AL_STATIC */ && src.audioQueue.length > 0) {
              var audioSrc  = src.audioQueue[0];
              audioSrc.loop = false;
              audioSrc._duration = src.bufQueue[0].audioBuf.duration / src.playbackRate;
              audioSrc._startTime = currentTime - src.bufOffset / src.playbackRate;
            }
          } else {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          break;
        case 0x1009 /* AL_BUFFER */:
          if (src.state === 0x1012 /* AL_PLAYING */ || src.state === 0x1013 /* AL_PAUSED */) {
            AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
            return;
          }
  
          if (value === 0) {
            for (var i in src.bufQueue) {
              src.bufQueue[i].refCount--;
            }
            src.bufQueue.length = 1;
            src.bufQueue[0] = AL.buffers[0];
  
            src.bufsProcessed = 0;
            src.type = 0x1030 /* AL_UNDETERMINED */;
          } else {
            var buf = AL.buffers[value];
            if (!buf) {
              AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
              return;
            }
  
            for (var i in src.bufQueue) {
              src.bufQueue[i].refCount--;
            }
            src.bufQueue.length = 0;
  
            buf.refCount++;
            src.bufQueue = [buf];
            src.bufsProcessed = 0;
            src.type = 0x1028 /* AL_STATIC */;
          }
  
          AL.initSourcePanner(src);
          AL.scheduleSourceAudio(src);
          break;
        case 0x100A /* AL_GAIN */:
          if (!Number.isFinite(value) || value < 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.gain.gain.value = value;
          break;
        case 0x100D /* AL_MIN_GAIN */:
          if (!Number.isFinite(value) || value < 0.0 || value > Math.min(src.maxGain, 1.0)) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.minGain = value;
          break;
        case 0x100E /* AL_MAX_GAIN */:
          if (!Number.isFinite(value) || value < Math.max(0.0, src.minGain) || value > 1.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.maxGain = value;
          break;
        case 0x1020 /* AL_REFERENCE_DISTANCE */:
          if (!Number.isFinite(value) || value < 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.refDistance = value;
          if (src.panner) {
            src.panner.refDistance = value;
          }
          break;
        case 0x1021 /* AL_ROLLOFF_FACTOR */:
          if (!Number.isFinite(value) || value < 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.rolloffFactor = value;
          if (src.panner) {
            src.panner.rolloffFactor = value;
          }
          break;
        case 0x1022 /* AL_CONE_OUTER_GAIN */:
          if (!Number.isFinite(value) || value < 0.0 || value > 1.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.coneOuterGain = value;
          if (src.panner) {
            src.panner.coneOuterGain = value;
          }
          break;
        case 0x1023 /* AL_MAX_DISTANCE */:
          if (!Number.isFinite(value) || value < 0.0) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          src.maxDistance = value;
          if (src.panner) {
            src.panner.maxDistance = value;
          }
          break;
        case 0x1024 /* AL_SEC_OFFSET */:
          if (value < 0.0 || value > AL.sourceDuration(src)) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.sourceSeek(src, value);
          break;
        case 0x1025 /* AL_SAMPLE_OFFSET */:
          var srcLen = AL.sourceDuration(src);
          if (srcLen > 0.0) {
            var frequency;
            for (var bufId in src.bufQueue) {
              if (bufId !== 0) {
                frequency = src.bufQueue[bufId].frequency;
                break;
              }
            }
            value /= frequency;
          }
          if (value < 0.0 || value > srcLen) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.sourceSeek(src, value);
          break;
        case 0x1026 /* AL_BYTE_OFFSET */:
          var srcLen = AL.sourceDuration(src);
          if (srcLen > 0.0) {
            var bytesPerSec;
            for (var bufId in src.bufQueue) {
              if (bufId !== 0) {
                var buf = src.bufQueue[bufId];
                bytesPerSec = buf.frequency * buf.bytesPerSample * buf.channels;
                break;
              }
            }
            value /= bytesPerSec;
          }
          if (value < 0.0 || value > srcLen) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          AL.sourceSeek(src, value);
          break;
        case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
          if (value !== 0 /* AL_FALSE */ && value !== 1 /* AL_TRUE */ && value !== 2 /* AL_AUTO_SOFT */) {
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
  
          src.spatialize = value;
          AL.initSourcePanner(src);
          break;
        case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
        case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
        case 0x200B /* AL_SEC_LENGTH_SOFT */:
          AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
          break;
        case 0xD000 /* AL_DISTANCE_MODEL */:
          switch (value) {
          case 0 /* AL_NONE */:
          case 0xd001 /* AL_INVERSE_DISTANCE */:
          case 0xd002 /* AL_INVERSE_DISTANCE_CLAMPED */:
          case 0xd003 /* AL_LINEAR_DISTANCE */:
          case 0xd004 /* AL_LINEAR_DISTANCE_CLAMPED */:
          case 0xd005 /* AL_EXPONENT_DISTANCE */:
          case 0xd006 /* AL_EXPONENT_DISTANCE_CLAMPED */:
            src.distanceModel = value;
            if (AL.currentCtx.sourceDistanceModel) {
              AL.updateContextGlobal(AL.currentCtx);
            }
            break;
          default:
            AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
            return;
          }
          break;
        default:
          AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
          return;
        }
      },captures:{},sharedCaptureAudioCtx:null,requireValidCaptureDevice:function (deviceId, funcname) {
        if (deviceId === 0) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return null;
        }
        var c = AL.captures[deviceId];
        if (!c) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return null;
        }
        var err = c.mediaStreamError;
        if (err) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return null;
        }
        return c;
      }};
  Module["AL"] = AL;


  function _alcCaptureOpenDevice(pDeviceName, requestedSampleRate, format, bufferFrameCapacity) {
  
      var resolvedDeviceName = AL.CAPTURE_DEVICE_NAME;
  
      // NULL is a valid device name here (resolves to default);
      if (pDeviceName !== 0) {
        resolvedDeviceName = Pointer_stringify(pDeviceName);
        if (resolvedDeviceName !== AL.CAPTURE_DEVICE_NAME) {
          // ALC_OUT_OF_MEMORY
          // From the programmer's guide, ALC_OUT_OF_MEMORY's meaning is
          // overloaded here, to mean:
          // 'The specified device is invalid, or can not capture audio.'
          // This may be misleading to API users, but well...
          AL.alcErr = 0xA005 /* ALC_OUT_OF_MEMORY */;
          return 0;
        }
      }
  
      // Otherwise it's probably okay (though useless) for bufferFrameCapacity to be zero.
      if (bufferFrameCapacity < 0) { // ALCsizei is signed int
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return 0;
      }
  
      navigator.getUserMedia = navigator.getUserMedia 
        || navigator.webkitGetUserMedia 
        || navigator.mozGetUserMedia 
        || navigator.msGetUserMedia;
      var has_getUserMedia = navigator.getUserMedia 
        || (navigator.mediaDevices 
        &&  navigator.mediaDevices.getUserMedia);
  
      if (!has_getUserMedia) {
        // See previously mentioned rationale for ALC_OUT_OF_MEMORY
        AL.alcErr = 0xA005 /* ALC_OUT_OF_MEMORY */;
        return 0;
      }
  
      var AudioContext = window.AudioContext || window.webkitAudioContext;
  
      if (!AL.sharedCaptureAudioCtx) {
        try {
          AL.sharedCaptureAudioCtx = new AudioContext();
        } catch(e) {
          // See previously mentioned rationale for ALC_OUT_OF_MEMORY
          AL.alcErr = 0xA005 /* ALC_OUT_OF_MEMORY */;
          return 0;
        }
      }
  
      var outputChannelCount;
  
      switch (format) {
      case 0x10010: /* AL_FORMAT_MONO_FLOAT32 */
      case 0x1101:  /* AL_FORMAT_MONO16 */
      case 0x1100:  /* AL_FORMAT_MONO8 */
        outputChannelCount = 1;
        break;
      case 0x10011: /* AL_FORMAT_STEREO_FLOAT32 */
      case 0x1103:  /* AL_FORMAT_STEREO16 */
      case 0x1102:  /* AL_FORMAT_STEREO8 */
        outputChannelCount = 2;
        break;
      default:
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return 0;
      }
  
      function newF32Array(cap) { return new Float32Array(cap);}
      function newI16Array(cap) { return new Int16Array(cap);  }
      function newU8Array(cap)  { return new Uint8Array(cap);  }
  
      var requestedSampleType;
      var newSampleArray;
  
      switch (format) {
      case 0x10010: /* AL_FORMAT_MONO_FLOAT32 */
      case 0x10011: /* AL_FORMAT_STEREO_FLOAT32 */
        requestedSampleType = 'f32';
        newSampleArray = newF32Array;
        break;
      case 0x1101:  /* AL_FORMAT_MONO16 */
      case 0x1103:  /* AL_FORMAT_STEREO16 */
        requestedSampleType = 'i16';
        newSampleArray = newI16Array;
        break;
      case 0x1100:  /* AL_FORMAT_MONO8 */
      case 0x1102:  /* AL_FORMAT_STEREO8 */
        requestedSampleType = 'u8';
        newSampleArray = newU8Array;
        break;
      }
  
      var buffers = [];
      try {
        for (var chan=0; chan < outputChannelCount; ++chan) {
          buffers[chan] = newSampleArray(bufferFrameCapacity);
        }
      } catch(e) {
        AL.alcErr = 0xA005 /* ALC_OUT_OF_MEMORY */;
        return 0;
      }
  
  
      // What we'll place into the `AL.captures` array in the end,
      // declared here for closures to access it
      var newCapture = {
        audioCtx: AL.sharedCaptureAudioCtx,
        deviceName: resolvedDeviceName,
        requestedSampleRate: requestedSampleRate,
        requestedSampleType: requestedSampleType,
        outputChannelCount: outputChannelCount,
        inputChannelCount: null, // Not known until the getUserMedia() promise resolves
        mediaStreamError: null, // Used by other functions to return early and report an error.
        mediaStreamSourceNode: null,
        // Either one, or none of the below two, is active.
        mergerNode: null,
        splitterNode: null,
        scriptProcessorNode: null,
        isCapturing: false,
        buffers: buffers,
        get bufferFrameCapacity() {
          return buffers[0].length;
        },
        capturePlayhead: 0, // current write position, in sample frames
        capturedFrameCount: 0
      };
  
      // Preparing for getUserMedia()
  
      var onError = function(mediaStreamError) {
        newCapture.mediaStreamError = mediaStreamError;
      };
      var onSuccess = function(mediaStream) {
        newCapture.mediaStreamSourceNode = newCapture.audioCtx.createMediaStreamSource(mediaStream);
  
        var inputChannelCount = 1;
        switch(newCapture.mediaStreamSourceNode.channelCountMode) {
        case 'max':
          inputChannelCount = outputChannelCount;
          break;
        case 'clamped-max':
          inputChannelCount = Math.min(outputChannelCount, newCapture.mediaStreamSourceNode.channelCount);
          break;
        case 'explicit':
          inputChannelCount = newCapture.mediaStreamSourceNode.channelCount;
          break;
        }
  
        newCapture.inputChannelCount = inputChannelCount;
  
  
        // Have to pick a size from 256, 512, 1024, 2048, 4096, 8192, 16384.
        // One can also set it to zero, which leaves the decision up to the impl.
        // An extension could allow specifying this value.
        var processorFrameCount = 512;
  
        newCapture.scriptProcessorNode = newCapture.audioCtx.createScriptProcessor(
          processorFrameCount, inputChannelCount, outputChannelCount
        );
  
        if (inputChannelCount > outputChannelCount) {
          newCapture.mergerNode = newCapture.audioCtx.createChannelMerger(inputChannelCount);
          newCapture.mediaStreamSourceNode.connect(newCapture.mergerNode);
          newCapture.mergerNode.connect(newCapture.scriptProcessorNode);
        } else if (inputChannelCount < outputChannelCount) {
          newCapture.splitterNode = newCapture.audioCtx.createChannelSplitter(outputChannelCount);
          newCapture.mediaStreamSourceNode.connect(newCapture.splitterNode);
          newCapture.splitterNode.connect(newCapture.scriptProcessorNode);
        } else {
          newCapture.mediaStreamSourceNode.connect(newCapture.scriptProcessorNode);
        }
  
        newCapture.scriptProcessorNode.connect(newCapture.audioCtx.destination);
  
        newCapture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {
  
          if (!newCapture.isCapturing) {
            return;
          }
  
          var c = newCapture;
          var srcBuf = audioProcessingEvent.inputBuffer;
  
          // Actually just copy srcBuf's channel data into
          // c.buffers, optimizing for each case.
          switch (format) {
          case 0x10010: /* AL_FORMAT_MONO_FLOAT32 */
            var channel0 = srcBuf.getChannelData(0);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = channel0[i];
            }
            break;
          case 0x10011: /* AL_FORMAT_STEREO_FLOAT32 */
            var channel0 = srcBuf.getChannelData(0);
            var channel1 = srcBuf.getChannelData(1);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = channel0[i];
              c.buffers[1][wi] = channel1[i];
            }
            break;
          case 0x1101:  /* AL_FORMAT_MONO16 */
            var channel0 = srcBuf.getChannelData(0);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = channel0[i] * 32767;
            }
            break;
          case 0x1103:  /* AL_FORMAT_STEREO16 */
            var channel0 = srcBuf.getChannelData(0);
            var channel1 = srcBuf.getChannelData(1);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = channel0[i] * 32767;
              c.buffers[1][wi] = channel1[i] * 32767;
            }
            break;
          case 0x1100:  /* AL_FORMAT_MONO8 */
            var channel0 = srcBuf.getChannelData(0);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = (channel0[i] + 1.0) * 127;
            }
            break;
          case 0x1102:  /* AL_FORMAT_STEREO8 */
            var channel0 = srcBuf.getChannelData(0);
            var channel1 = srcBuf.getChannelData(1);
            for (var i = 0 ; i < srcBuf.length; ++i) {
              var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
              c.buffers[0][wi] = (channel0[i] + 1.0) * 127;
              c.buffers[1][wi] = (channel1[i] + 1.0) * 127;
            }
            break;
          }
  
          c.capturePlayhead += srcBuf.length;
          c.capturePlayhead %= c.bufferFrameCapacity;
          c.capturedFrameCount += srcBuf.length;
          c.capturedFrameCount = Math.min(c.capturedFrameCount, c.bufferFrameCapacity);
        };
      };
  
      // The latest way to call getUserMedia()
      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices
             .getUserMedia({audio: true})
             .then(onSuccess)
             .catch(onError);
      } else { // The usual (now deprecated) way
        navigator.getUserMedia({audio: true}, onSuccess, onError);
      }
  
      var id = AL.newId();
      AL.captures[id] = newCapture;
      return id;
    }
  Module["_alcCaptureOpenDevice"] = _alcCaptureOpenDevice;


  function _alcCaptureCloseDevice(deviceId) {
      var c = AL.requireValidCaptureDevice(deviceId, 'alcCaptureCloseDevice');
      if (!c) return false;
  
      delete AL.captures[deviceId];
      AL.freeIds.push(deviceId);
  
      // This clean-up might be unnecessary (paranoid) ?
  
      // May happen if user hasn't decided to grant or deny input
      if (c.mediaStreamSourceNode) c.mediaStreamSourceNode.disconnect();
      if (c.mergerNode) c.mergerNode.disconnect();
      if (c.splitterNode) c.splitterNode.disconnect();
      // May happen if user hasn't decided to grant or deny input
      if (c.scriptProcessorNode) c.scriptProcessorNode.disconnect();
  
      delete c.buffers;
  
      c.capturedFrameCount = 0;
      c.isCapturing = false;
  
      return true;
    }
  Module["_alcCaptureCloseDevice"] = _alcCaptureCloseDevice;


  function _alcCaptureStart(deviceId) {
      var c = AL.requireValidCaptureDevice(deviceId, 'alcCaptureStart');
      if (!c) return;
  
      if (c.isCapturing) {
        // NOTE: Spec says (emphasis mine):
        //     The amount of audio samples available after **restarting** a 
        //     stopped capture device is reset to zero.
        // So redundant calls to alcCaptureStart() must have no effect.
        return;
      }
      c.isCapturing = true;
      c.capturedFrameCount = 0;
      c.capturePlayhead = 0;
    }
  Module["_alcCaptureStart"] = _alcCaptureStart;


  function _alcCaptureStop(deviceId) {
      var c = AL.requireValidCaptureDevice(deviceId, 'alcCaptureStop');
      if (!c) return;
  
      c.isCapturing = false;
    }
  Module["_alcCaptureStop"] = _alcCaptureStop;


  function _alcCaptureSamples(deviceId, pFrames, requestedFrameCount) {
      var c = AL.requireValidCaptureDevice(deviceId, 'alcCaptureSamples');
      if (!c) return;
  
      // ALCsizei is actually 32-bit signed int, so could be negative
      // Also, spec says :
      //   Requesting more sample frames than are currently available is 
      //   an error.
      if (requestedFrameCount < 0
      ||  requestedFrameCount > c.capturedFrameCount) 
      {
    // if OPENAL_DEBUG
        console.error('alcCaptureSamples() with invalid bufferSize');
    // endif
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return;
      }
      
      function setF32Sample(i, sample) {
        HEAPF32[(((pFrames)+(4*i))>>2)]=sample;
      }
      function setI16Sample(i, sample) {
        HEAP16[(((pFrames)+(2*i))>>1)]=sample;
      }
      function setU8Sample(i, sample) {
        HEAP8[(((pFrames)+(i))>>0)]=sample;
      }
  
      var setSample;
  
      switch(c.requestedSampleType) {
      case 'f32': setSample = setF32Sample; break;
      case 'i16': setSample = setI16Sample; break;
      case 'u8' : setSample = setU8Sample ; break;
      default: 
        return;
      }
  
      var dstfreq = c.requestedSampleRate;
      var srcfreq = c.audioCtx.sampleRate;
  
      if (srcfreq == dstfreq) {
        for (var i = 0, frame_i = 0; frame_i < requestedFrameCount; ++frame_i) {
          for (var chan = 0; chan < c.buffers.length; ++chan, ++i) {
            var src_i = (frame_i + c.capturePlayhead) % c.capturedFrameCount;
            setSample(i, c.buffers[chan][src_i]);
          }
        }
      } else {
        // Perform linear resampling.
  
        // There is room for improvement - right now we're fine with linear resampling.
        // We don't use OfflineAudioContexts for this: See the discussion at
        // https://github.com/jpernst/emscripten/issues/2#issuecomment-312729735
        // if you're curious about why.
  
        function lerp(from, to, progress) {
          return (1 - progress) * from + progress * to;
        }
  
        for (var i = 0, frame_i = 0; frame_i < requestedFrameCount; ++frame_i) {
  
          var t = frame_i / dstfreq; // Most exact time for the current output sample
          var src_i = (Math.floor(t*srcfreq) + c.capturePlayhead) % c.capturedFrameCount;
          var src_next_i = (src_i+1) % c.capturedFrameCount;
          var between = t*srcfreq - src_i; //(t - src_i/srcfreq) / ((src_i+1)/srcfreq - src_i/srcfreq);
  
          for (var chan = 0; chan < c.buffers.length; ++chan, ++i) {
            var cb = c.buffers[chan];
            var sample = lerp(cb[src_i], cb[src_next_i], between);
            setSample(i, sample);
          }
        }
      }
  
      // Spec doesn't say if alcCaptureSamples() must zero the number
      // of available captured sample-frames, but not only would it
      // be insane not to do, OpenAL-Soft happens to do that as well.
      c.capturedFrameCount = 0;
    }
  Module["_alcCaptureSamples"] = _alcCaptureSamples;


  function _alcOpenDevice(pDeviceName) {
      if (pDeviceName) {
        var name = Pointer_stringify(pDeviceName);
        if (name !== AL.DEVICE_NAME) {
          return 0;
        }
      }
  
      if (typeof(AudioContext) !== 'undefined' || typeof(webkitAudioContext) !== 'undefined') {
        var deviceId = AL.newId();
        AL.deviceRefCounts[deviceId] = 0;
        return deviceId;
      } else {
        return 0;
      }
    }
  Module["_alcOpenDevice"] = _alcOpenDevice;


  function _alcCloseDevice(deviceId) {
      if (!deviceId in AL.deviceRefCounts || AL.deviceRefCounts[deviceId] > 0) {
        return 0 /* ALC_FALSE */;
      }
  
      delete AL.deviceRefCounts[deviceId];
      AL.freeIds.push(deviceId);
      return 1 /* ALC_TRUE */;
    }
  Module["_alcCloseDevice"] = _alcCloseDevice;


  function _alcCreateContext(deviceId, pAttrList) {
      if (!deviceId in AL.deviceRefCounts) {
        AL.alcErr = 0xA001; /* ALC_INVALID_DEVICE */
        return 0;
      }
  
      var options = null;
      var attrs = [];
      var hrtf = null;
      pAttrList >>= 2;
      if (pAttrList) {
        var attr = 0;
        var val = 0;
        while (true) {
          attr = HEAP32[pAttrList++];
          attrs.push(attr);
          if (attr === 0) {
            break;
          }
          val = HEAP32[pAttrList++];
          attrs.push(val);
  
          switch (attr) {
          case 0x1007 /* ALC_FREQUENCY */:
            if (!options) {
              options = {};
            }
  
            options.sampleRate = val;
            break;
          case 0x1010 /* ALC_MONO_SOURCES */: // fallthrough
          case 0x1011 /* ALC_STEREO_SOURCES */:
            // Do nothing; these hints are satisfied by default
            break
          case 0x1992 /* ALC_HRTF_SOFT */:
            switch (val) {
              case 0 /* ALC_FALSE */:
                hrtf = false;
                break;
              case 1 /* ALC_TRUE */:
                hrtf = true;
                break;
              case 2 /* ALC_DONT_CARE_SOFT */:
                break;
              default:
                AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
                return 0;
            }
            break;
          case 0x1996 /* ALC_HRTF_ID_SOFT */:
            if (val !== 0) {
              AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
              return 0;
            }
            break;
          default:
            AL.alcErr = 0xA004; /* ALC_INVALID_VALUE */
            return 0;
          }
        }
      }
  
      var AudioContext = window.AudioContext || window.webkitAudioContext;
      var ac = null;
      try {
        // Only try to pass options if there are any, for compat with browsers that don't support this
        if (options) {
          ac = new AudioContext(options);
        } else {
          ac = new AudioContext();
        }
      } catch (e) {
        if (e.name === 'NotSupportedError') {
          AL.alcErr = 0xA004; /* ALC_INVALID_VALUE */
        } else {
          AL.alcErr = 0xA001; /* ALC_INVALID_DEVICE */
        }
  
        return 0;
      }
  
      // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
      if (typeof(ac.createGain) === 'undefined') {
        ac.createGain = ac.createGainNode;
      }
  
      var gain = ac.createGain();
      gain.connect(ac.destination);
      var ctx = {
        deviceId: deviceId,
        id: AL.newId(),
        attrs: attrs,
        audioCtx: ac,
        listener: {
      	  position: [0.0, 0.0, 0.0],
      	  velocity: [0.0, 0.0, 0.0],
      	  direction: [0.0, 0.0, 0.0],
      	  up: [0.0, 0.0, 0.0]
        },
        sources: [],
        interval: setInterval(function() { AL.scheduleContextAudio(ctx); }, AL.QUEUE_INTERVAL),
        gain: gain,
        distanceModel: 0xd002 /* AL_INVERSE_DISTANCE_CLAMPED */,
        speedOfSound: 343.3,
        dopplerFactor: 1.0,
        sourceDistanceModel: false,
        hrtf: hrtf || false,
  
        _err: 0,
        get err() {
          return this._err;
        },
        set err(val) {
          // Errors should not be overwritten by later errors until they are cleared by a query.
          if (this._err === 0 /* AL_NO_ERROR */ || val === 0 /* AL_NO_ERROR */) {
            this._err = val;
          }
        }
      };
      AL.deviceRefCounts[deviceId]++;
      AL.contexts[ctx.id] = ctx;
  
      if (hrtf !== null) {
        // Apply hrtf attrib to all contexts for this device
        for (var ctxId in AL.contexts) {
          var c = AL.contexts[ctxId];
          if (c.deviceId === deviceId) {
            c.hrtf = hrtf;
            AL.updateContextGlobal(c);
          }
        }
      }
  
      return ctx.id;
    }
  Module["_alcCreateContext"] = _alcCreateContext;


  function _alcDestroyContext(contextId) {
      var ctx = AL.contexts[contextId];
      if (AL.currentCtx === ctx) {
        AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
        return;
      }
  
      // Stop playback, etc
      if (AL.contexts[contextId].interval) {
        clearInterval(AL.contexts[contextId].interval);
      }
      AL.deviceRefCounts[ctx.deviceId]--;
      delete AL.contexts[contextId];
      AL.freeIds.push(contextId);
    }
  Module["_alcDestroyContext"] = _alcDestroyContext;


  function _alcGetError(deviceId) {
      var err = AL.alcErr;
      AL.alcErr = 0 /* ALC_NO_ERROR */;
      return err;
    }
  Module["_alcGetError"] = _alcGetError;


  function _alcGetCurrentContext() {
      if (AL.currentCtx !== null) {
        return AL.currentCtx.id;
      } else {
        return 0;
      }
    }
  Module["_alcGetCurrentContext"] = _alcGetCurrentContext;


  function _alcMakeContextCurrent(contextId) {
      if (contextId === 0) {
        AL.currentCtx = null;
        return 0;
      } else {
        AL.currentCtx = AL.contexts[contextId];
        return 1;
      }
    }
  Module["_alcMakeContextCurrent"] = _alcMakeContextCurrent;


  function _alcGetContextsDevice(contextId) {
      if (contextId in AL.contexts) {
        return AL.contexts[contextId].deviceId;
      } else {
        return 0;
      }
    }
  Module["_alcGetContextsDevice"] = _alcGetContextsDevice;

  function _alcProcessContext(contextId) {}
  Module["_alcProcessContext"] = _alcProcessContext;

  function _alcSuspendContext(contextId) {}
  Module["_alcSuspendContext"] = _alcSuspendContext;


  function _alcIsExtensionPresent(deviceId, pExtName) {
      name = Pointer_stringify(pExtName);
  
      return AL.ALC_EXTENSIONS[name] ? 1 : 0;
    }
  Module["_alcIsExtensionPresent"] = _alcIsExtensionPresent;


  
  var _emscripten_GetAlcProcAddress=undefined;function _alcGetProcAddress(deviceId, pProcName) {
      if (!pProcName) {
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return 0; /* ALC_NONE */
      }
      return _emscripten_GetAlcProcAddress(pProcName);
    }
  Module["_alcGetProcAddress"] = _alcGetProcAddress;


  function _alcGetEnumValue(deviceId, pEnumName) {
      // Spec says :
      // Using a NULL handle is legal, but only the
      // tokens defined by the AL core are guaranteed.
      if (deviceId !== 0 && !deviceId in AL.deviceRefCounts) {
        // ALC_INVALID_DEVICE is not listed as a possible error state for
        // this function, sadly.
        return 0 /* ALC_NONE */;
      } else if (!pEnumName) {
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return 0; /* ALC_NONE */
      }
      name = Pointer_stringify(pEnumName);
      // See alGetEnumValue(), but basically behave the same as OpenAL-Soft
      switch(name) {
      case 'ALC_NO_ERROR': return 0;
      case 'ALC_INVALID_DEVICE': return 0xA001;
      case 'ALC_INVALID_CONTEXT': return 0xA002;
      case 'ALC_INVALID_ENUM': return 0xA003;
      case 'ALC_INVALID_VALUE': return 0xA004;
      case 'ALC_OUT_OF_MEMORY': return 0xA005;
      case 'ALC_MAJOR_VERSION': return 0x1000;
      case 'ALC_MINOR_VERSION': return 0x1001;
      case 'ALC_ATTRIBUTES_SIZE': return 0x1002;
      case 'ALC_ALL_ATTRIBUTES': return 0x1003;
      case 'ALC_DEFAULT_DEVICE_SPECIFIER': return 0x1004;
      case 'ALC_DEVICE_SPECIFIER': return 0x1005;
      case 'ALC_EXTENSIONS': return 0x1006;
      case 'ALC_FREQUENCY': return 0x1007;
      case 'ALC_REFRESH': return 0x1008;
      case 'ALC_SYNC': return 0x1009;
      case 'ALC_MONO_SOURCES': return 0x1010;
      case 'ALC_STEREO_SOURCES': return 0x1011;
      case 'ALC_CAPTURE_DEVICE_SPECIFIER': return 0x310;
      case 'ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER': return 0x311;
      case 'ALC_CAPTURE_SAMPLES': return 0x312;
  
      /* Extensions */
      case 'ALC_HRTF_SOFT': return 0x1992;
      case 'ALC_HRTF_ID_SOFT': return 0x1996;
      case 'ALC_DONT_CARE_SOFT': return 0x0002;
      case 'ALC_HRTF_STATUS_SOFT': return 0x1993;
      case 'ALC_NUM_HRTF_SPECIFIERS_SOFT': return 0x1994;
      case 'ALC_HRTF_SPECIFIER_SOFT': return 0x1995;
      case 'ALC_HRTF_DISABLED_SOFT': return 0x0000;
      case 'ALC_HRTF_ENABLED_SOFT': return 0x0001;
      case 'ALC_HRTF_DENIED_SOFT': return 0x0002;
      case 'ALC_HRTF_REQUIRED_SOFT': return 0x0003;
      case 'ALC_HRTF_HEADPHONES_DETECTED_SOFT': return 0x0004;
      case 'ALC_HRTF_UNSUPPORTED_FORMAT_SOFT': return 0x0005;
  
      default:
        AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
        return 0 /* AL_NONE */;
      }
    }
  Module["_alcGetEnumValue"] = _alcGetEnumValue;


  function _alcGetString(deviceId, param) {
      if (AL.alcStringCache[param]) {
        return AL.alcStringCache[param];
      }
  
      var ret;
      switch (param) {
      case 0 /* ALC_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* ALC_INVALID_DEVICE */:
        ret = 'Invalid Device';
        break;
      case 0xA002 /* ALC_INVALID_CONTEXT */:
        ret = 'Invalid Context';
        break;
      case 0xA003 /* ALC_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA004 /* ALC_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA005 /* ALC_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== 'undefined' ||
            typeof(webkitAudioContext) !== 'undefined') {
          ret = AL.DEVICE_NAME;
        } else {
          return 0;
        }
        break;
      case 0x1005 /* ALC_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== 'undefined' ||
            typeof(webkitAudioContext) !== 'undefined') {
          ret = AL.DEVICE_NAME.concat('\0');
        } else {
          ret = '\0';
        }
        break;
      case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
        ret = AL.CAPTURE_DEVICE_NAME;
        break;
      case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
        if (deviceId === 0) 
          ret = AL.CAPTURE_DEVICE_NAME.concat('\0');
          else {
          var c = AL.requireValidCaptureDevice(deviceId, 'alcGetString');
          if (!c) {
            return 0;
          }
          ret = c.deviceName;
        }  
        break;
      case 0x1006 /* ALC_EXTENSIONS */:
        if (!deviceId) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return 0;
        }
  
        ret = '';
        for (var ext in AL.ALC_EXTENSIONS) {
          ret = ret.concat(ext);
          ret = ret.concat(' ');
        }
        ret = ret.trim();
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
      AL.alcStringCache[param] = ret;
      return ret;
    }
  Module["_alcGetString"] = _alcGetString;


  function _alcGetIntegerv(deviceId, param, size, pValues) {
      if (size === 0 || !pValues) {
        // Ignore the query, per the spec
        return;
      }
  
      switch(param) {
      case 0x1000 /* ALC_MAJOR_VERSION */:
        HEAP32[((pValues)>>2)]=1;
        break;
      case 0x1001 /* ALC_MINOR_VERSION */:
        HEAP32[((pValues)>>2)]=1;
        break;
      case 0x1002 /* ALC_ATTRIBUTES_SIZE */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        if (!AL.currentCtx) {
          AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
          return;
        }
  
        HEAP32[((pValues)>>2)]=AL.currentCtx.attrs.length;
        break;
      case 0x1003 /* ALC_ALL_ATTRIBUTES */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        if (!AL.currentCtx) {
          AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
          return;
        }
  
        for (var i = 0; i < AL.currentCtx.attrs.length; i++) {
          HEAP32[(((pValues)+(i*4))>>2)]=AL.currentCtx.attrs[i];
        }
        break;
      case 0x1007 /* ALC_FREQUENCY */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        if (!AL.currentCtx) {
          AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
          return;
        }
  
        HEAP32[((pValues)>>2)]=AL.currentCtx.audioCtx.sampleRate;
        break;
      case 0x1010 /* ALC_MONO_SOURCES */:
      case 0x1011 /* ALC_STEREO_SOURCES */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        if (!AL.currentCtx) {
          AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
          return;
        }
  
        HEAP32[((pValues)>>2)]=0x7FFFFFFF;
        break;
      case 0x1992 /* ALC_HRTF_SOFT */:
      case 0x1993 /* ALC_HRTF_STATUS_SOFT */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
  
        var hrtfStatus = 0 /* ALC_HRTF_DISABLED_SOFT */;
        for (var ctxId in AL.contexts) {
          var ctx = AL.contexts[ctxId];
          if (ctx.deviceId === deviceId) {
            hrtfStatus = ctx.hrtf ? 1 /* ALC_HRTF_ENABLED_SOFT */ : 0 /* ALC_HRTF_DISABLED_SOFT */;
          }
        }
        HEAP32[((pValues)>>2)]=hrtfStatus;
        break;
      case 0x1994 /* ALC_NUM_HRTF_SPECIFIERS_SOFT */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        HEAP32[((pValues)>>2)]=1;
        break;
      case 0x20003 /* ALC_MAX_AUXILIARY_SENDS */:
        if (!deviceId in AL.deviceRefCounts) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return;
        }
        if (!AL.currentCtx) {
          AL.alcErr = 0xA002 /* ALC_INVALID_CONTEXT */;
          return;
        }
  
        HEAP32[((pValues)>>2)]=1;
      case 0x312 /* ALC_CAPTURE_SAMPLES */:
        var c = AL.requireValidCaptureDevice(deviceId, 'alcGetIntegerv');
        if (!c) {
          return;
        }
        var n = c.capturedFrameCount;
        var dstfreq = c.requestedSampleRate;
        var srcfreq = c.audioCtx.sampleRate;
        var nsamples = Math.floor(n * (dstfreq/srcfreq));
        HEAP32[((pValues)>>2)]=nsamples;
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return;
      }
    }
  Module["_alcGetIntegerv"] = _alcGetIntegerv;


  function _emscripten_alcDevicePauseSOFT(deviceId) {
      if (!deviceId in AL.deviceRefCounts) {
        AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
        return;
      }
  
      if (AL.paused) {
        return;
      }
      AL.paused = true;
  
      for (ctxId in AL.contexts) {
        var ctx = AL.contexts[ctxId];
        if (ctx.deviceId !== deviceId) {
          continue;
        }
  
        ctx.audioCtx.suspend();
        clearInterval(ctx.interval);
        ctx.interval = null;
      }
    }
  Module["_emscripten_alcDevicePauseSOFT"] = _emscripten_alcDevicePauseSOFT;


  function _emscripten_alcDeviceResumeSOFT(deviceId) {
      if (!deviceId in AL.deviceRefCounts) {
        AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
        return;
      }
  
      if (!AL.paused) {
        return;
      }
      AL.paused = false;
  
      for (ctxId in AL.contexts) {
        var ctx = AL.contexts[ctxId];
        if (ctx.deviceId !== deviceId) {
          continue;
        }
  
        ctx.interval = setInterval(function() { AL.scheduleContextAudio(ctx); }, AL.QUEUE_INTERVAL);
        ctx.audioCtx.resume();
      }
    }
  Module["_emscripten_alcDeviceResumeSOFT"] = _emscripten_alcDeviceResumeSOFT;


  function _emscripten_alcGetStringiSOFT(deviceId, param, index) {
      if (!deviceId in AL.deviceRefCounts) {
        AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
        return 0;
      }
  
      if (AL.alcStringCache[param]) {
        return AL.alcStringCache[param];
      }
  
      var ret;
      switch (param) {
      case 0x1995 /* ALC_HRTF_SPECIFIER_SOFT */:
        if (index === 0) {
          ret = 'Web Audio HRTF';
        } else {
          AL.alcErr = 0xA004 /* ALC_INVALID_VALUE */;
          return 0;
        }
      default:
        if (index === 0) {
          return alcGetString(deviceId, param);
        } else {
          AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
          return 0;
        }
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
      AL.alcStringCache[param] = ret;
      return ret;
    }
  Module["_emscripten_alcGetStringiSOFT"] = _emscripten_alcGetStringiSOFT;


  function _emscripten_alcResetDeviceSOFT(deviceId, pAttrList) {
      if (!deviceId in AL.deviceRefCounts) {
        AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
        return 0 /* ALC_FALSE */;
      }
  
      var hrtf = null;
      pAttrList >>= 2;
      if (pAttrList) {
        var attr = 0;
        var val = 0;
        while (true) {
          attr = HEAP32[pAttrList++];
          if (attr === 0) {
            break;
          }
          val = HEAP32[pAttrList++];
  
          switch (attr) {
          case 0x1992 /* ALC_HRTF_SOFT */:
            if (val === 1 /* ALC_TRUE */) {
              hrtf = true;
            } else if (val === 0 /* ALC_FALSE */) {
              hrtf = false;
            }
            break;
          }
        }
      }
  
      if (hrtf !== null) {
        // Apply hrtf attrib to all contexts for this device
        for (var ctxId in AL.contexts) {
          var ctx = AL.contexts[ctxId];
          if (ctx.deviceId === deviceId) {
            ctx.hrtf = hrtf;
            AL.updateContextGlobal(ctx);
          }
        }
      }
  
      return 1 /* ALC_TRUE */;
    }
  Module["_emscripten_alcResetDeviceSOFT"] = _emscripten_alcResetDeviceSOFT;


  function _alGenBuffers(count, pBufferIds) {
      if (!AL.currentCtx) {
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var buf = {
          deviceId: AL.currentCtx.deviceId,
          id: AL.newId(),
          refCount: 0,
          audioBuf: null,
          frequency: 0,
          bytesPerSample: 2,
          channels: 1,
          length: 0,
        };
        AL.deviceRefCounts[buf.deviceId]++;
        AL.buffers[buf.id] = buf;
        HEAP32[(((pBufferIds)+(i*4))>>2)]=buf.id;
      }
    }
  Module["_alGenBuffers"] = _alGenBuffers;


  function _alDeleteBuffers(count, pBufferIds) {
      if (!AL.currentCtx) {
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufId = HEAP32[(((pBufferIds)+(i*4))>>2)];
        /// Deleting the zero buffer is a legal NOP, so ignore it
        if (bufId === 0) {
          continue;
        }
  
        // Make sure the buffer index is valid.
        if (!AL.buffers[bufId]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        if (AL.buffers[bufId].refCount) {
          AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufId = HEAP32[(((pBufferIds)+(i*4))>>2)];
        if (bufId === 0) {
          continue;
        }
  
        AL.deviceRefCounts[AL.buffers[bufId].deviceId]--;
        delete AL.buffers[bufId];
        AL.freeIds.push(bufId);
      }
    }
  Module["_alDeleteBuffers"] = _alDeleteBuffers;


  function _alGenSources(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentCtx.audioCtx.createGain();
        gain.connect(AL.currentCtx.gain);
        var src = {
          context: AL.currentCtx,
          id: AL.newId(),
          type: 0x1030 /* AL_UNDETERMINED */,
          state: 0x1011 /* AL_INITIAL */,
          bufQueue: [AL.buffers[0]],
          audioQueue: [],
          looping: false,
          pitch: 1.0,
          dopplerShift: 1.0,
          gain: gain,
          minGain: 0.0,
          maxGain: 1.0,
          panner: null,
          bufsProcessed: 0,
          bufStartTime: Number.NEGATIVE_INFINITY,
          bufOffset: 0.0,
          relative: false,
          refDistance: 1.0,
          maxDistance: 3.40282e38 /* FLT_MAX */,
          rolloffFactor: 1.0,
          position: [0.0, 0.0, 0.0],
          velocity: [0.0, 0.0, 0.0],
          direction: [0.0, 0.0, 0.0],
          coneOuterGain: 0.0,
          coneInnerAngle: 360.0,
          coneOuterAngle: 360.0,
          distanceModel: 0xd002 /* AL_INVERSE_DISTANCE_CLAMPED */,
          spatialize: 2 /* AL_AUTO_SOFT */,
  
          get playbackRate() {
            return this.pitch * this.dopplerShift;
          }
        };
        AL.currentCtx.sources[src.id] = src;
        HEAP32[(((pSourceIds)+(i*4))>>2)]=src.id;
      }
    }
  Module["_alGenSources"] = _alGenSources;


  
  function _alSourcei(sourceId, param, value) {
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1007 /* AL_LOOPING */:
      case 0x1009 /* AL_BUFFER */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
      case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
      case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        AL.setSourceParam('alSourcei', sourceId, param, value);
        break;
      default:
        AL.setSourceParam('alSourcei', sourceId, param, null);
        break;
      }
    }
  Module["_alSourcei"] = _alSourcei;function _alDeleteSources(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var srcId = HEAP32[(((pSourceIds)+(i*4))>>2)];
        if (!AL.currentCtx.sources[srcId]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var srcId = HEAP32[(((pSourceIds)+(i*4))>>2)];
        AL.setSourceState(AL.currentCtx.sources[srcId], 0x1014 /* AL_STOPPED */);
        _alSourcei(srcId, 0x1009 /* AL_BUFFER */, 0);
        delete AL.currentCtx.sources[srcId];
        AL.freeIds.push(srcId);
      }
    }
  Module["_alDeleteSources"] = _alDeleteSources;


  function _alGetError() {
      if (!AL.currentCtx) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentCtx.err;
        AL.currentCtx.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }
  Module["_alGetError"] = _alGetError;


  function _alIsExtensionPresent(pExtName) {
      name = Pointer_stringify(pExtName);
  
      return AL.AL_EXTENSIONS[name] ? 1 : 0;
    }
  Module["_alIsExtensionPresent"] = _alIsExtensionPresent;


  
  var _emscripten_GetAlProcAddress=undefined;function _alGetProcAddress(pProcName) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pProcName) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return 0; /* ALC_NONE */
      }
      return _emscripten_GetAlProcAddress(pProcName);
    }
  Module["_alGetProcAddress"] = _alGetProcAddress;


  function _alGetEnumValue(pEnumName) {
      if (!AL.currentCtx) {
        return 0;
      }
  
      if (!pEnumName) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return 0 /* AL_NONE */;
      }
      name = Pointer_stringify(pEnumName);
  
      switch(name) {
      // Spec doesn't clearly state that alGetEnumValue() is required to
      // support _only_ extension tokens.
      // We should probably follow OpenAL-Soft's example and support all
      // of the names we know.
      // See http://repo.or.cz/openal-soft.git/blob/HEAD:/Alc/ALc.c
      case 'AL_BITS': return 0x2002;
      case 'AL_BUFFER': return 0x1009;
      case 'AL_BUFFERS_PROCESSED': return 0x1016;
      case 'AL_BUFFERS_QUEUED': return 0x1015;
      case 'AL_BYTE_OFFSET': return 0x1026;
      case 'AL_CHANNELS': return 0x2003;
      case 'AL_CONE_INNER_ANGLE': return 0x1001;
      case 'AL_CONE_OUTER_ANGLE': return 0x1002;
      case 'AL_CONE_OUTER_GAIN': return 0x1022;
      case 'AL_DIRECTION': return 0x1005;
      case 'AL_DISTANCE_MODEL': return 0xD000;
      case 'AL_DOPPLER_FACTOR': return 0xC000;
      case 'AL_DOPPLER_VELOCITY': return 0xC001;
      case 'AL_EXPONENT_DISTANCE': return 0xD005;
      case 'AL_EXPONENT_DISTANCE_CLAMPED': return 0xD006;
      case 'AL_EXTENSIONS': return 0xB004;
      case 'AL_FORMAT_MONO16': return 0x1101;
      case 'AL_FORMAT_MONO8': return 0x1100;
      case 'AL_FORMAT_STEREO16': return 0x1103;
      case 'AL_FORMAT_STEREO8': return 0x1102;
      case 'AL_FREQUENCY': return 0x2001;
      case 'AL_GAIN': return 0x100A;
      case 'AL_INITIAL': return 0x1011;
      case 'AL_INVALID': return -1;
      case 'AL_ILLEGAL_ENUM': // fallthrough
      case 'AL_INVALID_ENUM': return 0xA002;
      case 'AL_INVALID_NAME': return 0xA001;
      case 'AL_ILLEGAL_COMMAND': // fallthrough
      case 'AL_INVALID_OPERATION': return 0xA004;
      case 'AL_INVALID_VALUE': return 0xA003;
      case 'AL_INVERSE_DISTANCE': return 0xD001;
      case 'AL_INVERSE_DISTANCE_CLAMPED': return 0xD002;
      case 'AL_LINEAR_DISTANCE': return 0xD003;
      case 'AL_LINEAR_DISTANCE_CLAMPED': return 0xD004;
      case 'AL_LOOPING': return 0x1007;
      case 'AL_MAX_DISTANCE': return 0x1023;
      case 'AL_MAX_GAIN': return 0x100E;
      case 'AL_MIN_GAIN': return 0x100D;
      case 'AL_NONE': return 0;
      case 'AL_NO_ERROR': return 0;
      case 'AL_ORIENTATION': return 0x100F;
      case 'AL_OUT_OF_MEMORY': return 0xA005;
      case 'AL_PAUSED': return 0x1013;
      case 'AL_PENDING': return 0x2011;
      case 'AL_PITCH': return 0x1003;
      case 'AL_PLAYING': return 0x1012;
      case 'AL_POSITION': return 0x1004;
      case 'AL_PROCESSED': return 0x2012;
      case 'AL_REFERENCE_DISTANCE': return 0x1020;
      case 'AL_RENDERER': return 0xB003;
      case 'AL_ROLLOFF_FACTOR': return 0x1021;
      case 'AL_SAMPLE_OFFSET': return 0x1025;
      case 'AL_SEC_OFFSET': return 0x1024;
      case 'AL_SIZE': return 0x2004;
      case 'AL_SOURCE_RELATIVE': return 0x202;
      case 'AL_SOURCE_STATE': return 0x1010;
      case 'AL_SOURCE_TYPE': return 0x1027;
      case 'AL_SPEED_OF_SOUND': return 0xC003;
      case 'AL_STATIC': return 0x1028;
      case 'AL_STOPPED': return 0x1014;
      case 'AL_STREAMING': return 0x1029;
      case 'AL_UNDETERMINED': return 0x1030;
      case 'AL_UNUSED': return 0x2010;
      case 'AL_VELOCITY': return 0x1006;
      case 'AL_VENDOR': return 0xB001;
      case 'AL_VERSION': return 0xB002;
  
      /* Extensions */
      case 'AL_AUTO_SOFT': return 0x0002;
      case 'AL_SOURCE_DISTANCE_MODEL': return 0x200;
      case 'AL_SOURCE_SPATIALIZE_SOFT': return 0x1214;
      case 'AL_LOOP_POINTS_SOFT': return 0x2015;
      case 'AL_BYTE_LENGTH_SOFT': return 0x2009;
      case 'AL_SAMPLE_LENGTH_SOFT': return 0x200A;
      case 'AL_SEC_LENGTH_SOFT': return 0x200B;
      case 'AL_FORMAT_MONO_FLOAT32': return 0x10010;
      case 'AL_FORMAT_STEREO_FLOAT32': return 0x10011;
  
      default:
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return 0;
      }
    }
  Module["_alGetEnumValue"] = _alGetEnumValue;


  function _alGetString(param) {
      if (!AL.currentCtx) {
        return 0;
      }
  
      if (AL.stringCache[param]) {
        return AL.stringCache[param];
      }
  
      var ret;
      switch (param) {
      case 0 /* AL_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* AL_INVALID_NAME */:
        ret = 'Invalid Name';
        break;
      case 0xA002 /* AL_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA003 /* AL_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA004 /* AL_INVALID_OPERATION */:
        ret = 'Invalid Operation';
        break;
      case 0xA005 /* AL_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0xB001 /* AL_VENDOR */:
        ret = 'Emscripten';
        break;
      case 0xB002 /* AL_VERSION */:
        ret = '1.1';
        break;
      case 0xB003 /* AL_RENDERER */:
        ret = 'WebAudio';
        break;
      case 0xB004 /* AL_EXTENSIONS */:
        ret = '';
        for (ext in AL.AL_EXTENSIONS) {
          ret = ret.concat(ext);
          ret = ret.concat(' ');
        }
        ret = ret.trim();
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
      AL.stringCache[param] = ret;
      return ret;
    }
  Module["_alGetString"] = _alGetString;


  function _alEnable(param) {
      if (!AL.currentCtx) {
        return;
      }
      switch (param) {
      case 'AL_SOURCE_DISTANCE_MODEL':
        AL.currentCtx.sourceDistanceModel = true;
        AL.updateContextGlobal(AL.currentCtx);
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alEnable"] = _alEnable;


  function _alDisable(param) {
      if (!AL.currentCtx) {
        return;
      }
      switch (pname) {
      case 'AL_SOURCE_DISTANCE_MODEL':
        AL.currentCtx.sourceDistanceModel = false;
        AL.updateContextGlobal(AL.currentCtx);
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alDisable"] = _alDisable;


  function _alIsEnabled(param) {
      if (!AL.currentCtx) {
        return 0;
      }
      switch (pname) {
      case 'AL_SOURCE_DISTANCE_MODEL':
        return AL.currentCtx.sourceDistanceModel ? 0 /* AL_FALSE */ : 1 /* AL_TRUE */;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0;
      }
    }
  Module["_alIsEnabled"] = _alIsEnabled;


  function _alGetDouble(param) {
      var val = AL.getGlobalParam('alGetDouble', param);
      if (val === null) {
        return 0.0;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        return val;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0.0;
      }
    }
  Module["_alGetDouble"] = _alGetDouble;


  function _alGetDoublev(param, pValues) {
      var val = AL.getGlobalParam('alGetDoublev', param);
      // Silently ignore null destinations, as per the spec for global state functions
      if (val === null || !pValues) {
        return;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAPF64[((pValues)>>3)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetDoublev"] = _alGetDoublev;


  function _alGetFloat(param) {
      var val = AL.getGlobalParam('alGetFloat', param);
      if (val === null) {
        return 0.0;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        return val;
      default:
        return 0.0;
      }
    }
  Module["_alGetFloat"] = _alGetFloat;


  function _alGetFloatv(param, pValues) {
      var val = AL.getGlobalParam('alGetFloatv', param);
      // Silently ignore null destinations, as per the spec for global state functions
      if (val === null || !pValues) {
        return;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAPF32[((pValues)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetFloatv"] = _alGetFloatv;


  function _alGetInteger(param) {
      var val = AL.getGlobalParam('alGetInteger', param);
      if (val === null) {
        return 0;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        return val;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0;
      }
    }
  Module["_alGetInteger"] = _alGetInteger;


  function _alGetIntegerv(param, pValues) {
      var val = AL.getGlobalParam('alGetIntegerv', param);
      // Silently ignore null destinations, as per the spec for global state functions
      if (val === null || !pValues) {
        return;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAP32[((pValues)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetIntegerv"] = _alGetIntegerv;


  function _alGetBoolean(param) {
      var val = AL.getGlobalParam('alGetBoolean', param);
      if (val === null) {
        return 0 /* AL_FALSE */;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        return val !== 0 ? 1 /* AL_TRUE */ : 0 /* AL_FALSE */;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0 /* AL_FALSE */;
      }
    }
  Module["_alGetBoolean"] = _alGetBoolean;


  function _alGetBooleanv(param, pValues) {
      var val = AL.getGlobalParam('alGetBooleanv', param);
      // Silently ignore null destinations, as per the spec for global state functions
      if (val === null || !pValues) {
        return;
      }
  
      switch (param) {
      case 0xC000 /* AL_DOPPLER_FACTOR */:
      case 0xC003 /* AL_SPEED_OF_SOUND */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAP8[((pValues)>>0)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetBooleanv"] = _alGetBooleanv;


  function _alDistanceModel(model) {
      AL.setGlobalParam('alDistanceModel', 0xD000 /* AL_DISTANCE_MODEL */, model);
    }
  Module["_alDistanceModel"] = _alDistanceModel;


  function _alSpeedOfSound(value) {
      AL.setGlobalParam('alSpeedOfSound', 0xC003 /* AL_SPEED_OF_SOUND */, value);
    }
  Module["_alSpeedOfSound"] = _alSpeedOfSound;


  function _alDopplerFactor(value) {
      AL.setGlobalParam('alDopplerFactor', 0xC000 /* AL_DOPPLER_FACTOR */, value);
    }
  Module["_alDopplerFactor"] = _alDopplerFactor;


  function _alDopplerVelocity(value) {
      warnOnce('alDopplerVelocity() is deprecated, and only kept for compatibility with OpenAL 1.0. Use alSpeedOfSound() instead.');
      if (!AL.currentCtx) {
        return;
      }
      if (value <= 0) { // Negative or zero values are disallowed
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
    }
  Module["_alDopplerVelocity"] = _alDopplerVelocity;


  function _alGetListenerf(param, pValue) {
      var val = AL.getListenerParam('alGetListenerf', param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x100A /* AL_GAIN */:
        HEAPF32[((pValue)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetListenerf"] = _alGetListenerf;


  function _alGetListener3f(param, pValue0, pValue1, pValue2) {
      var val = AL.getListenerParam('alGetListener3f', param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAPF32[((pValue0)>>2)]=val[0];
        HEAPF32[((pValue1)>>2)]=val[1];
        HEAPF32[((pValue2)>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetListener3f"] = _alGetListener3f;


  function _alGetListenerfv(param, pValues) {
      var val = AL.getListenerParam('alGetListenerfv', param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAPF32[((pValues)>>2)]=val[0];
        HEAPF32[(((pValues)+(4))>>2)]=val[1];
        HEAPF32[(((pValues)+(8))>>2)]=val[2];
        break;
      case 0x100F /* AL_ORIENTATION */:
        HEAPF32[((pValues)>>2)]=val[0];
        HEAPF32[(((pValues)+(4))>>2)]=val[1];
        HEAPF32[(((pValues)+(8))>>2)]=val[2];
        HEAPF32[(((pValues)+(12))>>2)]=val[3];
        HEAPF32[(((pValues)+(16))>>2)]=val[4];
        HEAPF32[(((pValues)+(20))>>2)]=val[5];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetListenerfv"] = _alGetListenerfv;


  function _alGetListeneri(param, pValue) {
      var val = AL.getListenerParam('alGetListeneri', param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
    }
  Module["_alGetListeneri"] = _alGetListeneri;


  function _alGetListener3i(param, pValue0, pValue1, pValue2) {
      var val = AL.getListenerParam('alGetListener3i', param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAP32[((pValue0)>>2)]=val[0];
        HEAP32[((pValue1)>>2)]=val[1];
        HEAP32[((pValue2)>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetListener3i"] = _alGetListener3i;


  function _alGetListeneriv(param, pValues) {
      var val = AL.getListenerParam('alGetListeneriv', param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAP32[((pValues)>>2)]=val[0];
        HEAP32[(((pValues)+(4))>>2)]=val[1];
        HEAP32[(((pValues)+(8))>>2)]=val[2];
        break;
      case 0x100F /* AL_ORIENTATION */:
        HEAP32[((pValues)>>2)]=val[0];
        HEAP32[(((pValues)+(4))>>2)]=val[1];
        HEAP32[(((pValues)+(8))>>2)]=val[2];
        HEAP32[(((pValues)+(12))>>2)]=val[3];
        HEAP32[(((pValues)+(16))>>2)]=val[4];
        HEAP32[(((pValues)+(20))>>2)]=val[5];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetListeneriv"] = _alGetListeneriv;


  function _alListenerf(param, value) {
      switch (param) {
      case 0x100A /* AL_GAIN */:
        AL.setListenerParam('alListenerf', param, value);
        break;
      default:
        AL.setListenerParam('alListenerf', param, null);
        break;
      }
    }
  Module["_alListenerf"] = _alListenerf;


  function _alListener3f(param, value0, value1, value2) {
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = value0;
        AL.paramArray[1] = value1;
        AL.paramArray[2] = value2;
        AL.setListenerParam('alListener3f', param, AL.paramArray);
        break;
      default:
        AL.setListenerParam('alListener3f', param, null);
        break;
      }
    }
  Module["_alListener3f"] = _alListener3f;


  function _alListenerfv(param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = HEAPF32[((pValues)>>2)];
        AL.paramArray[1] = HEAPF32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAPF32[(((pValues)+(8))>>2)];
        AL.setListenerParam('alListenerfv', param, AL.paramArray);
        break;
      case 0x100F /* AL_ORIENTATION */:
        AL.paramArray[0] = HEAPF32[((pValues)>>2)];
        AL.paramArray[1] = HEAPF32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAPF32[(((pValues)+(8))>>2)];
        AL.paramArray[3] = HEAPF32[(((pValues)+(12))>>2)];
        AL.paramArray[4] = HEAPF32[(((pValues)+(16))>>2)];
        AL.paramArray[5] = HEAPF32[(((pValues)+(20))>>2)];
        AL.setListenerParam('alListenerfv', param, AL.paramArray);
        break;
      default:
        AL.setListenerParam('alListenerfv', param, null);
        break;
      }
    }
  Module["_alListenerfv"] = _alListenerfv;


  function _alListeneri(param, value) {
      AL.setListenerParam('alListeneri', param, null);
    }
  Module["_alListeneri"] = _alListeneri;


  function _alListener3i(param, value0, value1, value2) {
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = value0;
        AL.paramArray[1] = value1;
        AL.paramArray[2] = value2;
        AL.setListenerParam('alListener3i', param, AL.paramArray);
        break;
      default:
        AL.setListenerParam('alListener3i', param, null);
        break;
      }
    }
  Module["_alListener3i"] = _alListener3i;


  function _alListeneriv(param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = HEAP32[((pValues)>>2)];
        AL.paramArray[1] = HEAP32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAP32[(((pValues)+(8))>>2)];
        AL.setListenerParam('alListeneriv', param, AL.paramArray);
        break;
      case 0x100F /* AL_ORIENTATION */:
        AL.paramArray[0] = HEAP32[((pValues)>>2)];
        AL.paramArray[1] = HEAP32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAP32[(((pValues)+(8))>>2)];
        AL.paramArray[3] = HEAP32[(((pValues)+(12))>>2)];
        AL.paramArray[4] = HEAP32[(((pValues)+(16))>>2)];
        AL.paramArray[5] = HEAP32[(((pValues)+(20))>>2)];
        AL.setListenerParam('alListeneriv', param, AL.paramArray);
        break;
      default:
        AL.setListenerParam('alListeneriv', param, null);
        break;
      }
    }
  Module["_alListeneriv"] = _alListeneriv;


  function _alIsBuffer(bufferId) {
      if (!AL.currentCtx) {
        return false;
      }
      if (bufferId > AL.buffers.length) {
        return false;
      }
  
      if (!AL.buffers[bufferId]) {
        return false;
      } else {
        return true;
      }
    }
  Module["_alIsBuffer"] = _alIsBuffer;


  function _alBufferData(bufferId, format, pData, size, freq) {
      if (!AL.currentCtx) {
        return;
      }
      var buf = AL.buffers[bufferId];
      if (!buf) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
      if (freq <= 0) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      var audioBuf = null;
      try {
        switch (format) {
        case 0x1100 /* AL_FORMAT_MONO8 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size, freq);
            var channel0 = audioBuf.getChannelData(0);
            for (var i = 0; i < size; ++i) {
              channel0[i] = HEAPU8[pData++] * 0.0078125 /* 1/128 */ - 1.0;
            }
          }
          buf.bytesPerSample = 1;
          buf.channels = 1;
          buf.length = size;
          break;
        case 0x1101 /* AL_FORMAT_MONO16 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size >> 1, freq);
            var channel0 = audioBuf.getChannelData(0);
            pData >>= 1;
            for (var i = 0; i < size >> 1; ++i) {
              channel0[i] = HEAP16[pData++] * 0.000030517578125 /* 1/32768 */;
            }
          }
          buf.bytesPerSample = 2;
          buf.channels = 1;
          buf.length = size >> 1;
          break;
        case 0x1102 /* AL_FORMAT_STEREO8 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 1, freq);
            var channel0 = audioBuf.getChannelData(0);
            var channel1 = audioBuf.getChannelData(1);
            for (var i = 0; i < size >> 1; ++i) {
              channel0[i] = HEAPU8[pData++] * 0.0078125 /* 1/128 */ - 1.0;
              channel1[i] = HEAPU8[pData++] * 0.0078125 /* 1/128 */ - 1.0;
            }
          }
          buf.bytesPerSample = 1;
          buf.channels = 2;
          buf.length = size >> 1;
          break;
        case 0x1103 /* AL_FORMAT_STEREO16 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 2, freq);
            var channel0 = audioBuf.getChannelData(0);
            var channel1 = audioBuf.getChannelData(1);
            pData >>= 1;
            for (var i = 0; i < size >> 2; ++i) {
              channel0[i] = HEAP16[pData++] * 0.000030517578125 /* 1/32768 */;
              channel1[i] = HEAP16[pData++] * 0.000030517578125 /* 1/32768 */;
            }
          }
          buf.bytesPerSample = 2;
          buf.channels = 2;
          buf.length = size >> 2;
          break;
        case 0x10010 /* AL_FORMAT_MONO_FLOAT32 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size >> 2, freq);
            var channel0 = audioBuf.getChannelData(0);
            pData >>= 2;
            for (var i = 0; i < size >> 2; ++i) {
              channel0[i] = HEAPF32[pData++];
            }
          }
          buf.bytesPerSample = 4;
          buf.channels = 1;
          buf.length = size >> 2;
          break;
        case 0x10011 /* AL_FORMAT_STEREO_FLOAT32 */:
          if (size > 0) {
            audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 3, freq);
            var channel0 = audioBuf.getChannelData(0);
            var channel1 = audioBuf.getChannelData(1);
            pData >>= 2;
            for (var i = 0; i < size >> 3; ++i) {
              channel0[i] = HEAPF32[pData++];
              channel1[i] = HEAPF32[pData++];
            }
          }
          buf.bytesPerSample = 4;
          buf.channels = 2;
          buf.length = size >> 3;
          break;
        default:
          AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
          return;
        }
        buf.frequency = freq;
        buf.audioBuf = audioBuf;
      } catch (e) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
    }
  Module["_alBufferData"] = _alBufferData;


  function _alGetBufferf(bufferId, param, pValue) {
      var val = AL.getBufferParam('alGetBufferf', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
    }
  Module["_alGetBufferf"] = _alGetBufferf;


  function _alGetBuffer3f(bufferId, param, pValue0, pValue1, pValue2) {
      var val = AL.getBufferParam('alGetBuffer3f', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
    }
  Module["_alGetBuffer3f"] = _alGetBuffer3f;


  function _alGetBufferfv(bufferId, param, pValues) {
      var val = AL.getBufferParam('alGetBufferfv', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
    }
  Module["_alGetBufferfv"] = _alGetBufferfv;


  function _alGetBufferi(bufferId, param, pValue) {
      var val = AL.getBufferParam('alGetBufferi', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x2001 /* AL_FREQUENCY */:
      case 0x2002 /* AL_BITS */:
      case 0x2003 /* AL_CHANNELS */:
      case 0x2004 /* AL_SIZE */:
        HEAP32[((pValue)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetBufferi"] = _alGetBufferi;


  function _alGetBuffer3i(bufferId, param, pValue0, pValue1, pValue2) {
      var val = AL.getBufferParam('alGetBuffer3i', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
    }
  Module["_alGetBuffer3i"] = _alGetBuffer3i;


  function _alGetBufferiv(bufferId, param, pValues) {
      var val = AL.getBufferParam('alGetBufferiv', bufferId, param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x2001 /* AL_FREQUENCY */:
      case 0x2002 /* AL_BITS */:
      case 0x2003 /* AL_CHANNELS */:
      case 0x2004 /* AL_SIZE */:
        HEAP32[((pValues)>>2)]=val;
        break;
      case 0x2015 /* AL_LOOP_POINTS_SOFT */:
        HEAP32[((pValues)>>2)]=val[0];
        HEAP32[(((pValues)+(4))>>2)]=val[1];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetBufferiv"] = _alGetBufferiv;


  function _alBufferf(bufferId, param, value) {
      AL.setBufferParam('alBufferf', bufferId, param, null);
    }
  Module["_alBufferf"] = _alBufferf;


  function _alBuffer3f(bufferId, param, value0, value1, value2) {
      AL.setBufferParam('alBuffer3f', bufferId, param, null);
    }
  Module["_alBuffer3f"] = _alBuffer3f;


  function _alBufferfv(bufferId, param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      AL.setBufferParam('alBufferfv', bufferId, param, null);
    }
  Module["_alBufferfv"] = _alBufferfv;


  function _alBufferi(bufferId, param, value) {
      AL.setBufferParam('alBufferi', bufferId, param, null);
    }
  Module["_alBufferi"] = _alBufferi;


  function _alBuffer3i(bufferId, param, value0, value1, value2) {
      AL.setBufferParam('alBuffer3i', bufferId, param, null);
    }
  Module["_alBuffer3i"] = _alBuffer3i;


  function _alBufferiv(bufferId, param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x2015 /* AL_LOOP_POINTS_SOFT */:
        AL.paramArray[0] = HEAP32[((pValues)>>2)];
        AL.paramArray[1] = HEAP32[(((pValues)+(4))>>2)];
        AL.setBufferParam('alBufferiv', bufferId, param, AL.paramArray);
        break;
      default:
        AL.setBufferParam('alBufferiv', bufferId, param, null);
        break;
      }
    }
  Module["_alBufferiv"] = _alBufferiv;


  function _alIsSource(sourceId) {
      if (!AL.currentCtx) {
        return false;
      }
  
      if (!AL.currentCtx.sources[sourceId]) {
        return false;
      } else {
        return true;
      }
    }
  Module["_alIsSource"] = _alIsSource;


  function _alSourceQueueBuffers(sourceId, count, pBufferIds) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      if (src.type === 0x1028 /* AL_STATIC */) {
        AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
        return;
      }
  
      if (count === 0) {
        return;
      }
  
      // Find the first non-zero buffer in the queue to determine the proper format
      var templateBuf = AL.buffers[0];
      for (var i = 0; i < src.bufQueue.length; i++) {
        if (src.bufQueue[i].id !== 0) {
          templateBuf = src.bufQueue[i];
          break;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufId = HEAP32[(((pBufferIds)+(i*4))>>2)];
        var buf = AL.buffers[bufId];
        if (!buf) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Check that the added buffer has the correct format. If the template is the zero buffer, any format is valid.
        if (templateBuf.id !== 0 && (
          buf.frequency !== templateBuf.frequency
          || buf.bytesPerSample !== templateBuf.bytesPerSample
          || buf.channels !== templateBuf.channels)
        ) {
          AL.currentCtx.err = 0xA004 /* AL_INVALID_OPERATION */;
        }
      }
  
      // If the only buffer in the queue is the zero buffer, clear the queue before we add anything.
      if (src.bufQueue.length === 1 && src.bufQueue[0].id === 0) {
        src.bufQueue.length = 0;
      }
  
      src.type = 0x1029 /* AL_STREAMING */;
      for (var i = 0; i < count; ++i) {
        var bufId = HEAP32[(((pBufferIds)+(i*4))>>2)];
        var buf = AL.buffers[bufId];
        buf.refCount++;
        src.bufQueue.push(buf);
      }
  
      // if the source is looping, cancel the schedule so we can reschedule the loop order
      if (src.looping) {
        AL.cancelPendingSourceAudio(src);
      }
  
      AL.initSourcePanner(src);
      AL.scheduleSourceAudio(src);
    }
  Module["_alSourceQueueBuffers"] = _alSourceQueueBuffers;


  function _alSourceUnqueueBuffers(sourceId, count, pBufferIds) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      if (count > (src.bufQueue.length === 1 && src.bufQueue[0].id === 0 ? 0 : src.bufsProcessed)) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      if (count === 0) {
        return;
      }
  
      for (var i = 0; i < count; i++) {
        var buf = src.bufQueue.shift();
        buf.refCount--;
        // Write the buffers index out to the return list.
        HEAP32[(((pBufferIds)+(i*4))>>2)]=buf.id;
        src.bufsProcessed--;
      }
  
      /// If the queue is empty, put the zero buffer back in
      if (src.bufQueue.length === 0) {
        src.bufQueue.push(AL.buffers[0]);
      }
  
      AL.initSourcePanner(src);
      AL.scheduleSourceAudio(src);
    }
  Module["_alSourceUnqueueBuffers"] = _alSourceUnqueueBuffers;


  function _alSourcePlay(sourceId) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }
  Module["_alSourcePlay"] = _alSourcePlay;


  function _alSourcePlayv(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pSourceIds) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
      }
      for (var i = 0; i < count; ++i) {
        if (!AL.currentCtx.sources[HEAP32[(((pSourceIds)+(i*4))>>2)]]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        AL.setSourceState(HEAP32[(((pSourceIds)+(i*4))>>2)], 0x1012 /* AL_PLAYING */);
      }
    }
  Module["_alSourcePlayv"] = _alSourcePlayv;


  function _alSourceStop(sourceId) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
    }
  Module["_alSourceStop"] = _alSourceStop;


  function _alSourceStopv(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pSourceIds) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
      }
      for (var i = 0; i < count; ++i) {
        if (!AL.currentCtx.sources[HEAP32[(((pSourceIds)+(i*4))>>2)]]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        AL.setSourceState(HEAP32[(((pSourceIds)+(i*4))>>2)], 0x1014 /* AL_STOPPED */);
      }
    }
  Module["_alSourceStopv"] = _alSourceStopv;


  function _alSourceRewind(sourceId) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      // Stop the source first to clear the source queue
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
      // Now set the state of AL_INITIAL according to the specification
      AL.setSourceState(src, 0x1011 /* AL_INITIAL */);
    }
  Module["_alSourceRewind"] = _alSourceRewind;


  function _alSourceRewindv(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pSourceIds) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
      }
      for (var i = 0; i < count; ++i) {
        if (!AL.currentCtx.sources[HEAP32[(((pSourceIds)+(i*4))>>2)]]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        AL.setSourceState(HEAP32[(((pSourceIds)+(i*4))>>2)], 0x1011 /* AL_INITIAL */);
      }
    }
  Module["_alSourceRewindv"] = _alSourceRewindv;


  function _alSourcePause(sourceId) {
      if (!AL.currentCtx) {
        return;
      }
      var src = AL.currentCtx.sources[sourceId];
      if (!src) {
        AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1013 /* AL_PAUSED */);
    }
  Module["_alSourcePause"] = _alSourcePause;


  function _alSourcePausev(count, pSourceIds) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pSourceIds) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
      }
      for (var i = 0; i < count; ++i) {
        if (!AL.currentCtx.sources[HEAP32[(((pSourceIds)+(i*4))>>2)]]) {
          AL.currentCtx.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        AL.setSourceState(HEAP32[(((pSourceIds)+(i*4))>>2)], 0x1013 /* AL_PAUSED */);
      }
    }
  Module["_alSourcePausev"] = _alSourcePausev;


  function _alGetSourcef(sourceId, param, pValue) {
      var val = AL.getSourceParam('alGetSourcef', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1003 /* AL_PITCH */:
      case 0x100A /* AL_GAIN */:
      case 0x100D /* AL_MIN_GAIN */:
      case 0x100E /* AL_MAX_GAIN */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x200B /* AL_SEC_LENGTH_SOFT */:
        HEAPF32[((pValue)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSourcef"] = _alGetSourcef;


  function _alGetSource3f(source, param, pValue0, pValue1, pValue2) {
      var val = AL.getSourceParam('alGetSource3f', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAPF32[((pValue0)>>2)]=val[0];
        HEAPF32[((pValue1)>>2)]=val[1];
        HEAPF32[((pValue2)>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSource3f"] = _alGetSource3f;


  function _alGetSourcefv(sourceId, param, pValues) {
      var val = AL.getSourceParam('alGetSourcefv', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1003 /* AL_PITCH */:
      case 0x100A /* AL_GAIN */:
      case 0x100D /* AL_MIN_GAIN */:
      case 0x100E /* AL_MAX_GAIN */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x200B /* AL_SEC_LENGTH_SOFT */:
        HEAPF32[((pValues)>>2)]=val[0];
        break;
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAPF32[((pValues)>>2)]=val[0];
        HEAPF32[(((pValues)+(4))>>2)]=val[1];
        HEAPF32[(((pValues)+(8))>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSourcefv"] = _alGetSourcefv;


  function _alGetSourcei(sourceId, param, pValue) {
      var val = AL.getSourceParam('alGetSourcei', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValue) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1007 /* AL_LOOPING */:
      case 0x1009 /* AL_BUFFER */:
      case 0x1010 /* AL_SOURCE_STATE */:
      case 0x1015 /* AL_BUFFERS_QUEUED */:
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x1027 /* AL_SOURCE_TYPE */:
      case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
      case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
      case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAP32[((pValue)>>2)]=val;
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSourcei"] = _alGetSourcei;


  function _alGetSource3i(source, param, pValue0, pValue1, pValue2) {
      var val = AL.getSourceParam('alGetSource3i', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValue0 || !pValue1 || !pValue2) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAP32[((pValue0)>>2)]=val[0];
        HEAP32[((pValue1)>>2)]=val[1];
        HEAP32[((pValue2)>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSource3i"] = _alGetSource3i;


  function _alGetSourceiv(sourceId, param, pValues) {
      var val = AL.getSourceParam('alGetSourceiv', sourceId, param);
      if (val === null) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1007 /* AL_LOOPING */:
      case 0x1009 /* AL_BUFFER */:
      case 0x1010 /* AL_SOURCE_STATE */:
      case 0x1015 /* AL_BUFFERS_QUEUED */:
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x1027 /* AL_SOURCE_TYPE */:
      case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
      case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
      case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        HEAP32[((pValues)>>2)]=val;
        break;
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        HEAP32[((pValues)>>2)]=val[0];
        HEAP32[(((pValues)+(4))>>2)]=val[1];
        HEAP32[(((pValues)+(8))>>2)]=val[2];
        break;
      default:
        AL.currentCtx.err = 0xA002 /* AL_INVALID_ENUM */;
        return;
      }
    }
  Module["_alGetSourceiv"] = _alGetSourceiv;


  function _alSourcef(sourceId, param, value) {
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1003 /* AL_PITCH */:
      case 0x100A /* AL_GAIN */:
      case 0x100D /* AL_MIN_GAIN */:
      case 0x100E /* AL_MAX_GAIN */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x200B /* AL_SEC_LENGTH_SOFT */:
        AL.setSourceParam('alSourcef', sourceId, param, value);
        break;
      default:
        AL.setSourceParam('alSourcef', sourceId, param, null);
        break;
      }
    }
  Module["_alSourcef"] = _alSourcef;


  function _alSource3f(sourceId, param, value0, value1, value2) {
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = value0;
        AL.paramArray[1] = value1;
        AL.paramArray[2] = value2;
        AL.setSourceParam('alSource3f', sourceId, param, AL.paramArray);
        break;
      default:
        AL.setSourceParam('alSource3f', sourceId, param, null);
        break;
      }
    }
  Module["_alSource3f"] = _alSource3f;


  function _alSourcefv(sourceId, param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1003 /* AL_PITCH */:
      case 0x100A /* AL_GAIN */:
      case 0x100D /* AL_MIN_GAIN */:
      case 0x100E /* AL_MAX_GAIN */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x200B /* AL_SEC_LENGTH_SOFT */:
        var val = HEAPF32[((pValues)>>2)];
        AL.setSourceParam('alSourcefv', sourceId, param, val);
        break;
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = HEAPF32[((pValues)>>2)];
        AL.paramArray[1] = HEAPF32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAPF32[(((pValues)+(8))>>2)];
        AL.setSourceParam('alSourcefv', sourceId, param, AL.paramArray);
        break;
      default:
        AL.setSourceParam('alSourcefv', sourceId, param, null);
        break;
      }
    }
  Module["_alSourcefv"] = _alSourcefv;




  function _alSource3i(sourceId, param, value0, value1, value2) {
      switch (param) {
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = value0;
        AL.paramArray[1] = value1;
        AL.paramArray[2] = value2;
        AL.setSourceParam('alSource3i', sourceId, param, AL.paramArray);
        break;
      default:
        AL.setSourceParam('alSource3i', sourceId, param, null);
        break;
      }
    }
  Module["_alSource3i"] = _alSource3i;


  function _alSourceiv(source, param, pValues) {
      if (!AL.currentCtx) {
        return;
      }
      if (!pValues) {
        AL.currentCtx.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
      case 0x1007 /* AL_LOOPING */:
      case 0x1009 /* AL_BUFFER */:
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
      case 0x1023 /* AL_MAX_DISTANCE */:
      case 0x1024 /* AL_SEC_OFFSET */:
      case 0x1025 /* AL_SAMPLE_OFFSET */:
      case 0x1026 /* AL_BYTE_OFFSET */:
      case 0x1214 /* AL_SOURCE_SPATIALIZE_SOFT */:
      case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
      case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
      case 0xD000 /* AL_DISTANCE_MODEL */:
        var val = HEAP32[((pValues)>>2)];
        AL.setSourceParam('alSourceiv', sourceId, param, val);
        break;
      case 0x1004 /* AL_POSITION */:
      case 0x1005 /* AL_DIRECTION */:
      case 0x1006 /* AL_VELOCITY */:
        AL.paramArray[0] = HEAP32[((pValues)>>2)];
        AL.paramArray[1] = HEAP32[(((pValues)+(4))>>2)];
        AL.paramArray[2] = HEAP32[(((pValues)+(8))>>2)];
        AL.setSourceParam('alSourceiv', sourceId, param, AL.paramArray);
        break;
      default:
        AL.setSourceParam('alSourceiv', sourceId, param, null);
        break;
      }
    }
  Module["_alSourceiv"] = _alSourceiv;

  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
          //#define GLFW_KEY_SPECIAL      256
          case 0x1B:return (256+1); // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x70:return (256+2); // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return (256+3); // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return (256+4); // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return (256+5); // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return (256+6); // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return (256+7); // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return (256+8); // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return (256+9); // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return (256+10); // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return (256+11); // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return (256+12); // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return (256+13); // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return (256+14); // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return (256+15); // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return (256+16); // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return (256+17); // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return (256+18); // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return (256+19); // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return (256+20); // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return (256+21); // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return (256+22); // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return (256+23); // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return (256+24); // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return (256+25); // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return (256+26); // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x27:return (256+30); // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return (256+29); // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return (256+28); // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return (256+27); // DOM_VK_UP -> GLFW_KEY_UP
          case 0x10:return (256+31); // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          // #define GLFW_KEY_RSHIFT       (GLFW_KEY_SPECIAL+32)
          case 0x11:return (256+33); // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          // #define GLFW_KEY_RCTRL        (GLFW_KEY_SPECIAL+34)
          case 0x12:return (256+35); // DOM_VK_ALT -> GLFW_KEY_LALT
          // #define GLFW_KEY_RALT         (GLFW_KEY_SPECIAL+36)
          case 0x09:return (256+37); // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D:return (256+38); // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x08:return (256+39); // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return (256+40); // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return (256+41); // DOM_VK_DELETE -> GLFW_KEY_DEL
          case 0x21:return (256+42); // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22:return (256+43); // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24:return (256+44); // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return (256+45); // DOM_VK_END -> GLFW_KEY_END
          case 0x60:return (256+46); // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return (256+47); // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return (256+48); // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return (256+49); // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return (256+50); // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return (256+51); // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return (256+52); // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return (256+53); // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return (256+54); // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return (256+55); // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6F:return (256+56); // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return (256+57); // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return (256+58); // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return (256+59); // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6E:return (256+60); // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          // #define GLFW_KEY_KP_EQUAL     (GLFW_KEY_SPECIAL+61)
          // #define GLFW_KEY_KP_ENTER     (GLFW_KEY_SPECIAL+62)
          case 0x90:return (256+63); // DOM_VK_NUM_LOCK -> GLFW_KEY_KP_NUM_LOCK
          case 0x14:return (256+64); // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return (256+65); // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x13:return (256+66); // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x5B:return (256+67); // DOM_VK_WIN -> GLFW_KEY_LSUPER
          // #define GLFW_KEY_RSUPER       (GLFW_KEY_SPECIAL+68)
          case 0x5D:return (256+69); // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        Module['dynCall_vii'](GLFW.active.charFunc, charCode, 1);
  
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
        Module['dynCall_vii'](GLFW.active.keyFunc, key, status);
  
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorPosFunc, Browser.mouseX, Browser.mouseY);
  
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
        Module['dynCall_vii'](GLFW.active.mouseButtonFunc, eventButton, status);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        Module['dynCall_vi'](GLFW.active.scrollFunc, GLFW.wheelPos);
  
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
        Module['dynCall_vii'](GLFW.active.windowSizeFunc, GLFW.active.width, GLFW.active.height);
  
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
        // As documented in GLFW2 API (http://www.glfw.org/GLFWReference27.pdf#page=22), when size
        // callback function is set, it will be called with the current window size before this
        // function returns.
        // GLFW3 on the over hand doesn't have this behavior (https://github.com/glfw/glfw/issues/62).
        if (!win.windowSizeFunc) return;
        Module['dynCall_vii'](win.windowSizeFunc, win.width, win.height);
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
        Module['dynCall_vii'](win.windowSizeFunc, width, height);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};
  Module["GLFW"] = GLFW;

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }
  Module["_glfwInit"] = _glfwInit;

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }
  Module["_glfwTerminate"] = _glfwTerminate;

  function _glfwGetVersion(major, minor, rev) {
      setValue(major, 2, 'i32');
      setValue(minor, 7, 'i32');
      setValue(rev, 7, 'i32');
  
    }
  Module["_glfwGetVersion"] = _glfwGetVersion;

  function _glfwPollEvents() {}
  Module["_glfwPollEvents"] = _glfwPollEvents;

  function _glfwWaitEvents() {}
  Module["_glfwWaitEvents"] = _glfwWaitEvents;

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }
  Module["_glfwGetTime"] = _glfwGetTime;

  function _glfwSetTime(time) {
      GLFW.initialTime = GLFW.getTime() - time;
    }
  Module["_glfwSetTime"] = _glfwSetTime;

  function _glfwExtensionSupported(extension) {
      if (!GLFW.extensions) {
        GLFW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
      }
  
      if (GLFW.extensions.indexOf(extension) != -1) return 1;
  
      // extensions from GLEmulations do not come unprefixed
      // so, try with prefix
      return (GLFW.extensions.indexOf("GL_" + extension) != -1);
    }
  Module["_glfwExtensionSupported"] = _glfwExtensionSupported;

  function _glfwGetProcAddress(procname) {
      return _emscripten_GetProcAddress(procname);
    }
  Module["_glfwGetProcAddress"] = _glfwGetProcAddress;

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }
  Module["_glfwSwapInterval"] = _glfwSwapInterval;

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }
  Module["_glfwOpenWindow"] = _glfwOpenWindow;

  function _glfwCloseWindow() {
      GLFW.destroyWindow(GLFW.active.id);
    }
  Module["_glfwCloseWindow"] = _glfwCloseWindow;

  function _glfwOpenWindowHint(target, hint) {
      target = GLFW.GLFW2ParamToGLFW3Param(target);
      GLFW.hints[target] = hint;
    }
  Module["_glfwOpenWindowHint"] = _glfwOpenWindowHint;

  function _glfwGetWindowSize(width, height) {
      GLFW.getWindowSize(GLFW.active.id, width, height);
    }
  Module["_glfwGetWindowSize"] = _glfwGetWindowSize;

  function _glfwSetWindowSize(width, height) {
      GLFW.setWindowSize(GLFW.active.id, width, height);
    }
  Module["_glfwSetWindowSize"] = _glfwSetWindowSize;

  function _glfwGetWindowPos(x, y) {
      GLFW.getWindowPos(GLFW.active.id, x, y);
    }
  Module["_glfwGetWindowPos"] = _glfwGetWindowPos;

  function _glfwSetWindowPos(x, y) {
      GLFW.setWindowPos(GLFW.active.id, x, y);
    }
  Module["_glfwSetWindowPos"] = _glfwSetWindowPos;

  function _glfwSetWindowTitle(title) {
      GLFW.setWindowTitle(GLFW.active.id, title);
    }
  Module["_glfwSetWindowTitle"] = _glfwSetWindowTitle;

  function _glfwIconifyWindow() {
      GLFW.iconifyWindow(GLFW.active.id);
    }
  Module["_glfwIconifyWindow"] = _glfwIconifyWindow;

  function _glfwRestoreWindow() {
      GLFW.restoreWindow(GLFW.active.id);
    }
  Module["_glfwRestoreWindow"] = _glfwRestoreWindow;

  function _glfwSwapBuffers() {
      GLFW.swapBuffers(GLFW.active.id);
    }
  Module["_glfwSwapBuffers"] = _glfwSwapBuffers;

  function _glfwGetWindowParam(param) {
      param = GLFW.GLFW2ParamToGLFW3Param(param);
      return GLFW.hints[param];
    }
  Module["_glfwGetWindowParam"] = _glfwGetWindowParam;

  function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.setWindowSizeCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetWindowSizeCallback"] = _glfwSetWindowSizeCallback;

  function _glfwSetWindowCloseCallback(cbfun) {
      GLFW.setWindowCloseCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetWindowCloseCallback"] = _glfwSetWindowCloseCallback;

  function _glfwSetWindowRefreshCallback(cbfun) {
      GLFW.setWindowRefreshCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetWindowRefreshCallback"] = _glfwSetWindowRefreshCallback;

  function _glfwGetKey(key) {
      return GLFW.getKey(GLFW.active.id, key);
    }
  Module["_glfwGetKey"] = _glfwGetKey;

  function _glfwGetMouseButton(button) {
      return GLFW.getMouseButton(GLFW.active.id, button);
    }
  Module["_glfwGetMouseButton"] = _glfwGetMouseButton;

  function _glfwGetMousePos(x, y) {
      GLFW.getMousePos(GLFW.active.id, x, y);
    }
  Module["_glfwGetMousePos"] = _glfwGetMousePos;

  function _glfwSetMousePos(x, y) {
      GLFW.setCursorPos(GLFW.active.id, x, y);
    }
  Module["_glfwSetMousePos"] = _glfwSetMousePos;

  function _glfwGetMouseWheel() {
      return 0;
    }
  Module["_glfwGetMouseWheel"] = _glfwGetMouseWheel;

  function _glfwSetMouseWheel(pos) {
    }
  Module["_glfwSetMouseWheel"] = _glfwSetMouseWheel;

  function _glfwSetKeyCallback(cbfun) {
      GLFW.setKeyCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetKeyCallback"] = _glfwSetKeyCallback;

  function _glfwSetCharCallback(cbfun) {
      GLFW.setCharCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetCharCallback"] = _glfwSetCharCallback;

  function _glfwSetMouseButtonCallback(cbfun) {
      GLFW.setMouseButtonCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetMouseButtonCallback"] = _glfwSetMouseButtonCallback;

  function _glfwSetMousePosCallback(cbfun) {
      GLFW.setCursorPosCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetMousePosCallback"] = _glfwSetMousePosCallback;

  function _glfwSetMouseWheelCallback(cbfun) {
      GLFW.setScrollCallback(GLFW.active.id, cbfun);
    }
  Module["_glfwSetMouseWheelCallback"] = _glfwSetMouseWheelCallback;

  function _glfwGetDesktopMode(mode) {
      throw "glfwGetDesktopMode is not implemented.";
    }
  Module["_glfwGetDesktopMode"] = _glfwGetDesktopMode;

  function _glfwSleep(time) {
      _sleep(time);
    }
  Module["_glfwSleep"] = _glfwSleep;

  function _glfwEnable(target) {
      target = GLFW.GLFW2ParamToGLFW3Param(target);
      GLFW.hints[target] = false;
    }
  Module["_glfwEnable"] = _glfwEnable;

  function _glfwDisable(target) {
      target = GLFW.GLFW2ParamToGLFW3Param(target);
      GLFW.hints[target] = true;
    }
  Module["_glfwDisable"] = _glfwDisable;

  function _glfwGetGLVersion(major, minor, rev) {
      setValue(major, 0, 'i32');
      setValue(minor, 0, 'i32');
      setValue(rev, 1, 'i32');
    }
  Module["_glfwGetGLVersion"] = _glfwGetGLVersion;

  function _glfwCreateThread(fun, arg) {
      var str = 'v';
      for (var i in arg) {
        str += 'i';
      }
      dynCall(str, fun, arg);
      // One single thread
      return 0;
    }
  Module["_glfwCreateThread"] = _glfwCreateThread;

  function _glfwDestroyThread(ID) {}
  Module["_glfwDestroyThread"] = _glfwDestroyThread;

  function _glfwWaitThread(ID, waitmode) {}
  Module["_glfwWaitThread"] = _glfwWaitThread;

  function _glfwGetThreadID() {
      // One single thread
      return 0;
    }
  Module["_glfwGetThreadID"] = _glfwGetThreadID;

  function _glfwCreateMutex() { throw "glfwCreateMutex is not implemented."; }
  Module["_glfwCreateMutex"] = _glfwCreateMutex;

  function _glfwDestroyMutex(mutex) { throw "glfwDestroyMutex is not implemented."; }
  Module["_glfwDestroyMutex"] = _glfwDestroyMutex;

  function _glfwLockMutex(mutex) { throw "glfwLockMutex is not implemented."; }
  Module["_glfwLockMutex"] = _glfwLockMutex;

  function _glfwUnlockMutex(mutex) { throw "glfwUnlockMutex is not implemented."; }
  Module["_glfwUnlockMutex"] = _glfwUnlockMutex;

  function _glfwCreateCond() { throw "glfwCreateCond is not implemented."; }
  Module["_glfwCreateCond"] = _glfwCreateCond;

  function _glfwDestroyCond(cond) { throw "glfwDestroyCond is not implemented."; }
  Module["_glfwDestroyCond"] = _glfwDestroyCond;

  function _glfwWaitCond(cond, mutex, timeout) { throw "glfwWaitCond is not implemented."; }
  Module["_glfwWaitCond"] = _glfwWaitCond;

  function _glfwSignalCond(cond) { throw "glfwSignalCond is not implemented."; }
  Module["_glfwSignalCond"] = _glfwSignalCond;

  function _glfwBroadcastCond(cond) { throw "glfwBroadcastCond is not implemented."; }
  Module["_glfwBroadcastCond"] = _glfwBroadcastCond;

  function _glfwGetNumberOfProcessors() {
      // Threads are disabled anyway…
      return 1;
    }
  Module["_glfwGetNumberOfProcessors"] = _glfwGetNumberOfProcessors;

  function _glfwReadImage(name, img, flags) { throw "glfwReadImage is not implemented."; }
  Module["_glfwReadImage"] = _glfwReadImage;

  function _glfwReadMemoryImage(data, size, img, flags) { throw "glfwReadMemoryImage is not implemented."; }
  Module["_glfwReadMemoryImage"] = _glfwReadMemoryImage;

  function _glfwFreeImage(img) { throw "glfwFreeImage is not implemented."; }
  Module["_glfwFreeImage"] = _glfwFreeImage;

  function _glfwLoadTexture2D(name, flags) { throw "glfwLoadTexture2D is not implemented."; }
  Module["_glfwLoadTexture2D"] = _glfwLoadTexture2D;

  function _glfwLoadMemoryTexture2D(data, size, flags) { throw "glfwLoadMemoryTexture2D is not implemented."; }
  Module["_glfwLoadMemoryTexture2D"] = _glfwLoadMemoryTexture2D;

  function _glfwLoadTextureImage2D(img, flags) { throw "glfwLoadTextureImage2D is not implemented."; }
  Module["_glfwLoadTextureImage2D"] = _glfwLoadTextureImage2D;

  function _uuid_clear(uu) {
      // void uuid_clear(uuid_t uu);
      _memset(uu, 0, 16);
    }
  Module["_uuid_clear"] = _uuid_clear;

  function _uuid_compare(uu1, uu2) {
      // int uuid_compare(const uuid_t uu1, const uuid_t uu2);
      return _memcmp(uu1, uu2, 16);
    }
  Module["_uuid_compare"] = _uuid_compare;

  function _uuid_copy(dst, src) {
      // void uuid_copy(uuid_t dst, const uuid_t src);
      _memcpy(dst, src, 16);
    }
  Module["_uuid_copy"] = _uuid_copy;

  function _uuid_generate(out) {
      // void uuid_generate(uuid_t out);
      var uuid = null;
  
      if (ENVIRONMENT_IS_NODE) {
        // If Node.js try to use crypto.randomBytes
        try {
          var rb = require('crypto')['randomBytes'];
          uuid = rb(16);
        } catch(e) {}
      } else if (ENVIRONMENT_IS_WEB &&
                 typeof(window.crypto) !== 'undefined' &&
                 typeof(window.crypto.getRandomValues) !== 'undefined') {
        // If crypto.getRandomValues is available try to use it.
        uuid = new Uint8Array(16);
        window.crypto.getRandomValues(uuid);
      }
  
      // Fall back to Math.random if a higher quality random number generator is not available.
      if (!uuid) {
        uuid = new Array(16);
        var d = new Date().getTime();
        for (var i = 0; i < 16; i++) {
          var r = ((d + Math.random() * 256) % 256)|0;
          d = (d / 256)|0;
          uuid[i] = r;
        }
      }
  
      uuid[6] = (uuid[6] & 0x0F) | 0x40;
      uuid[8] = (uuid[8] & 0x7F) | 0x80;
      writeArrayToMemory(uuid, out);
    }
  Module["_uuid_generate"] = _uuid_generate;

  function _uuid_is_null(uu) {
      // int uuid_is_null(const uuid_t uu);
      for (var i = 0; i < 4; i++, uu = (uu+4)|0) {
        var val = HEAP32[((uu)>>2)];
        if (val) {
          return 0;
        }
      }
      return 1;
    }
  Module["_uuid_is_null"] = _uuid_is_null;

  function _uuid_parse(inp, uu) {
      // int uuid_parse(const char *in, uuid_t uu);
      var inp = Pointer_stringify(inp);
      if (inp.length === 36) {
        var i = 0;
        var uuid = new Array(16);
        inp.toLowerCase().replace(/[0-9a-f]{2}/g, function(byte) {
          if (i < 16) {
            uuid[i++] = parseInt(byte, 16);
          }
        });
  
        if (i < 16) {
          return -1;
        } else {
          writeArrayToMemory(uuid, uu);
          return 0;
        }
      } else {
        return -1;
      }
    }
  Module["_uuid_parse"] = _uuid_parse;

  function _uuid_unparse(uu, out, upper) {
      // void uuid_unparse(const uuid_t uu, char *out);
      var i = 0;
      var uuid = 'xxxx-xx-xx-xx-xxxxxx'.replace(/[x]/g, function(c) {
        var r = upper ? (HEAPU8[(((uu)+(i))>>0)]).toString(16).toUpperCase() :
                        (HEAPU8[(((uu)+(i))>>0)]).toString(16);
        r = (r.length === 1) ? '0' + r : r; // Zero pad single digit hex values
        i++;
        return r;
      });
      stringToUTF8(uuid, out, 37); // Always fixed 36 bytes of ASCII characters and a trailing \0.
    }
  Module["_uuid_unparse"] = _uuid_unparse;

  function _uuid_unparse_lower(uu, out) {
      // void uuid_unparse_lower(const uuid_t uu, char *out);
      _uuid_unparse(uu, out);
    }
  Module["_uuid_unparse_lower"] = _uuid_unparse_lower;

  function _uuid_unparse_upper(uu, out) {
      // void uuid_unparse_upper(const uuid_t uu, char *out);
      _uuid_unparse(uu, out, true);
    }
  Module["_uuid_unparse_upper"] = _uuid_unparse_upper;

  function _uuid_type(uu) {
      // int uuid_type(const uuid_t uu);
      return 4;
    }
  Module["_uuid_type"] = _uuid_type;

  function _uuid_variant(uu) {
      // int uuid_variant(const uuid_t uu);
      return 1;
    }
  Module["_uuid_variant"] = _uuid_variant;

  var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};
  Module["GLEW"] = GLEW;

  function _glewInit() { return 0; }
  Module["_glewInit"] = _glewInit;

  function _glewIsSupported(name) {
      var exts = Pointer_stringify(name).split(' ');
      for (var i in exts) {
        if (!GLEW.extensionIsSupported(exts[i]))
          return 0;
      }
      return 1;
    }
  Module["_glewIsSupported"] = _glewIsSupported;

  function _glewGetExtension(name) {
      return GLEW.extensionIsSupported(Pointer_stringify(name));
    }
  Module["_glewGetExtension"] = _glewGetExtension;

  function _glewGetErrorString(error) {
      return GLEW.errorString(error);
    }
  Module["_glewGetErrorString"] = _glewGetErrorString;

  function _glewGetString(name) {
      return GLEW.versionString(name);
    }
  Module["_glewGetString"] = _glewGetString;

  var IDBStore={indexedDB:function () {
      if (typeof indexedDB !== 'undefined') return indexedDB;
      var ret = null;
      if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      assert(ret, 'IDBStore used, but indexedDB not supported');
      return ret;
    },DB_VERSION:22,DB_STORE_NAME:"FILE_DATA",dbs:{},blobs:[0],getDB:function (name, callback) {
      // check the cache first
      var db = IDBStore.dbs[name];
      if (db) {
        return callback(null, db);
      }
      var req;
      try {
        req = IDBStore.indexedDB().open(name, IDBStore.DB_VERSION);
      } catch (e) {
        return callback(e);
      }
      req.onupgradeneeded = function(e) {
        var db = e.target.result;
        var transaction = e.target.transaction;
        var fileStore;
        if (db.objectStoreNames.contains(IDBStore.DB_STORE_NAME)) {
          fileStore = transaction.objectStore(IDBStore.DB_STORE_NAME);
        } else {
          fileStore = db.createObjectStore(IDBStore.DB_STORE_NAME);
        }
      };
      req.onsuccess = function() {
        db = req.result;
        // add to the cache
        IDBStore.dbs[name] = db;
        callback(null, db);
      };
      req.onerror = function(e) {
        callback(this.error);
        e.preventDefault();
      };
    },getStore:function (dbName, type, callback) {
      IDBStore.getDB(dbName, function(error, db) {
        if (error) return callback(error);
        var transaction = db.transaction([IDBStore.DB_STORE_NAME], type);
        transaction.onerror = function(e) {
          callback(this.error || 'unknown error');
          e.preventDefault();
        };
        var store = transaction.objectStore(IDBStore.DB_STORE_NAME);
        callback(null, store);
      });
    },getFile:function (dbName, id, callback) {
      IDBStore.getStore(dbName, 'readonly', function(err, store) {
        if (err) return callback(err);
        var req = store.get(id);
        req.onsuccess = function(event) {
          var result = event.target.result;
          if (!result) {
            return callback('file ' + id + ' not found');
          } else {
            return callback(null, result);
          }
        };
        req.onerror = function(error) {
          callback(error);
        };
      });
    },setFile:function (dbName, id, data, callback) {
      IDBStore.getStore(dbName, 'readwrite', function(err, store) {
        if (err) return callback(err);
        var req = store.put(data, id);
        req.onsuccess = function(event) {
          callback();
        };
        req.onerror = function(error) {
          callback(error);
        };
      });
    },deleteFile:function (dbName, id, callback) {
      IDBStore.getStore(dbName, 'readwrite', function(err, store) {
        if (err) return callback(err);
        var req = store.delete(id);
        req.onsuccess = function(event) {
          callback();
        };
        req.onerror = function(error) {
          callback(error);
        };
      });
    },existsFile:function (dbName, id, callback) {
      IDBStore.getStore(dbName, 'readonly', function(err, store) {
        if (err) return callback(err);
        var req = store.count(id);
        req.onsuccess = function(event) {
          callback(null, event.target.result > 0);
        };
        req.onerror = function(error) {
          callback(error);
        };
      });
    }};
  Module["IDBStore"] = IDBStore;

  function _emscripten_idb_async_load(db, id, arg, onload, onerror) {
      IDBStore.getFile(Pointer_stringify(db), Pointer_stringify(id), function(error, byteArray) {
        if (error) {
          if (onerror) Module['dynCall_vi'](onerror, arg);
          return;
        }
        var buffer = _malloc(byteArray.length);
        HEAPU8.set(byteArray, buffer);
        Module['dynCall_viii'](onload, arg, buffer, byteArray.length);
        _free(buffer);
      });
    }
  Module["_emscripten_idb_async_load"] = _emscripten_idb_async_load;

  function _emscripten_idb_async_store(db, id, ptr, num, arg, onstore, onerror) {
      // note that we copy the data here, as these are async operatins - changes to HEAPU8 meanwhile should not affect us!
      IDBStore.setFile(Pointer_stringify(db), Pointer_stringify(id), new Uint8Array(HEAPU8.subarray(ptr, ptr+num)), function(error) {
        if (error) {
          if (onerror) Module['dynCall_vi'](onerror, arg);
          return;
        }
        if (onstore) Module['dynCall_vi'](onstore, arg);
      });
    }
  Module["_emscripten_idb_async_store"] = _emscripten_idb_async_store;

  function _emscripten_idb_async_delete(db, id, arg, ondelete, onerror) {
      IDBStore.deleteFile(Pointer_stringify(db), Pointer_stringify(id), function(error) {
        if (error) {
          if (onerror) Module['dynCall_vi'](onerror, arg);
          return;
        }
        if (ondelete) Module['dynCall_vi'](ondelete, arg);
      });
    }
  Module["_emscripten_idb_async_delete"] = _emscripten_idb_async_delete;

  function _emscripten_idb_async_exists(db, id, arg, oncheck, onerror) {
      IDBStore.existsFile(Pointer_stringify(db), Pointer_stringify(id), function(error, exists) {
        if (error) {
          if (onerror) Module['dynCall_vi'](onerror, arg);
          return;
        }
        if (oncheck) Module['dynCall_vii'](oncheck, arg, exists);
      });
    }
  Module["_emscripten_idb_async_exists"] = _emscripten_idb_async_exists;

  function _emscripten_idb_load() {
      throw 'Please compile your program with async support in order to use synchronous operations like emscripten_idb_load, etc.';
    }
  Module["_emscripten_idb_load"] = _emscripten_idb_load;

  function _emscripten_idb_store() {
      throw 'Please compile your program with async support in order to use synchronous operations like emscripten_idb_store, etc.';
    }
  Module["_emscripten_idb_store"] = _emscripten_idb_store;

  function _emscripten_idb_delete() {
      throw 'Please compile your program with async support in order to use synchronous operations like emscripten_idb_delete, etc.';
    }
  Module["_emscripten_idb_delete"] = _emscripten_idb_delete;

  function _emscripten_idb_exists() {
      throw 'Please compile your program with async support in order to use synchronous operations like emscripten_idb_exists, etc.';
    }
  Module["_emscripten_idb_exists"] = _emscripten_idb_exists;

  function _emscripten_sleep() {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_sleep';
    }
  Module["_emscripten_sleep"] = _emscripten_sleep;

  function _emscripten_coroutine_create() {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_coroutine_create';
    }
  Module["_emscripten_coroutine_create"] = _emscripten_coroutine_create;

  function _emscripten_coroutine_next() {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_coroutine_next';
    }
  Module["_emscripten_coroutine_next"] = _emscripten_coroutine_next;

  function _emscripten_yield() {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_yield';
    }
  Module["_emscripten_yield"] = _emscripten_yield;

  function _emscripten_wget(url, file) {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_wget';
    }
  Module["_emscripten_wget"] = _emscripten_wget;

  function _emscripten_wget_data(url, file) {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_wget_data';
    }
  Module["_emscripten_wget_data"] = _emscripten_wget_data;

  var WebVR={EYE_LEFT:0,EYE_RIGHT:1,POSE_POSITION:1,POSE_LINEAR_VELOCITY:2,POSE_LINEAR_ACCELERATION:4,POSE_ORIENTATION:8,POSE_ANGULAR_VELOCITY:16,POSE_ANGULAR_ACCELERATION:32,initialized:false,ready:false,version:[-1,-1],displays:[],displayNames:[],init:function (callback) {
        if (WebVR.initialized) return;
  
        WebVR.initialized = true;
  
        if (!navigator.getVRDisplays) {
          /* WebVR 1.1 required, but not supported. */
          WebVR.ready = true;
          WebVR.displays = [];
          return 0;
        }
  
        WebVR.version = [1, 1];
  
        navigator.getVRDisplays().then(function(displays) {
          WebVR.ready = true;
          WebVR.displays = displays;
          WebVR.displayNames = new Array(displays.length);
          callback();
        });
  
        return 1;
      },deinit:function () {
        WebVR.displayNames.forEach(function(name) {
          _free(name);
        });
        return 1
      },dereferenceDisplayHandle:function (displayHandle) {
        /* Display handles start as 1 as 0 will be interpreted as false or null-handle
         * on errors */
        if (displayHandle < 1 || displayHandle > WebVR.displays.length) {
          console.log("library_vr dereferenceDisplayHandle invalid display handle at: " + stackTrace());
          return null;
        }
  
        return WebVR.displays[displayHandle-1];
      }};
  Module["WebVR"] = WebVR;

  function _emscripten_vr_init(func, userData) {
      return WebVR.init(function() {
        Runtime.dynCall('vi', func, [userData]);
      });
    }
  Module["_emscripten_vr_init"] = _emscripten_vr_init;

  function _emscripten_vr_deinit() {
      return WebVR.deinit();
    }
  Module["_emscripten_vr_deinit"] = _emscripten_vr_deinit;

  function _emscripten_vr_version_major() {
      return WebVR.version[0];
    }
  Module["_emscripten_vr_version_major"] = _emscripten_vr_version_major;

  function _emscripten_vr_version_minor() {
      return WebVR.version[1];
    }
  Module["_emscripten_vr_version_minor"] = _emscripten_vr_version_minor;

  function _emscripten_vr_ready() {
      return WebVR.ready ? 1 : 0;
    }
  Module["_emscripten_vr_ready"] = _emscripten_vr_ready;

  function _emscripten_vr_count_displays() {
      return WebVR.displays.length;
    }
  Module["_emscripten_vr_count_displays"] = _emscripten_vr_count_displays;

  function _emscripten_vr_get_display_handle(displayIndex) {
      if (displayIndex < 0 || displayIndex >= WebVR.displays.length) {
        return -1;
      }
  
      /* As displayHandle == 0 will be interpreted as NULL handle for errors,
       * the handle is index + 1. */
      return displayIndex + 1;
    }
  Module["_emscripten_vr_get_display_handle"] = _emscripten_vr_get_display_handle;

  function _emscripten_vr_get_display_name(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      var name = WebVR.displayNames[displayHandle-1];
      if (name) {
        return name;
      }
  
      var buffer, displayName;
      displayName = display ? display.displayName : "";
      var len = lengthBytesUTF8(displayName);
      buffer = _malloc(len + 1);
      stringToUTF8(displayName, buffer, len + 1);
  
      WebVR.displayNames[displayHandle-1] = buffer;
  
      return buffer;
    }
  Module["_emscripten_vr_get_display_name"] = _emscripten_vr_get_display_name;

  function _emscripten_vr_get_display_capabilities(displayHandle, capsPtr) {
      if (!capsPtr) return 0;
  
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      var caps = display.capabilities;
  
      HEAP32[((capsPtr)>>2)]=caps.hasPosition ? 1 : 0;
      HEAP32[(((capsPtr)+(4))>>2)]=caps.hasExternalDisplay ? 1 : 0;
      HEAP32[(((capsPtr)+(8))>>2)]=caps.canPresent ? 1 : 0;
  
      (tempI64 = [caps.maxLayers>>>0,(tempDouble=caps.maxLayers,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((capsPtr)+(12))>>2)]=tempI64[0],HEAP32[(((capsPtr)+(16))>>2)]=tempI64[1]);
  
      return 1;
    }
  Module["_emscripten_vr_get_display_capabilities"] = _emscripten_vr_get_display_capabilities;

  function _emscripten_vr_get_eye_parameters(displayHandle, whichEye, eyeParamsPtr) {
      if (!eyeParamsPtr) return 0;
  
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      var params = display.getEyeParameters(whichEye == WebVR.EYE_LEFT ? "left" : "right");
  
      HEAPF32[((eyeParamsPtr)>>2)]=params.offset[0];
      HEAPF32[(((eyeParamsPtr)+(4))>>2)]=params.offset[1];
      HEAPF32[(((eyeParamsPtr)+(8))>>2)]=params.offset[2];
  
      (tempI64 = [params.renderWidth>>>0,(tempDouble=params.renderWidth,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((eyeParamsPtr)+(12))>>2)]=tempI64[0],HEAP32[(((eyeParamsPtr)+(16))>>2)]=tempI64[1]);
      (tempI64 = [params.renderHeight>>>0,(tempDouble=params.renderHeight,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((eyeParamsPtr)+(16))>>2)]=tempI64[0],HEAP32[(((eyeParamsPtr)+(20))>>2)]=tempI64[1]);
  
      return 1;
    }
  Module["_emscripten_vr_get_eye_parameters"] = _emscripten_vr_get_eye_parameters;

  function _emscripten_vr_display_connected(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display || !display.isConnected) return 0;
      return 1;
    }
  Module["_emscripten_vr_display_connected"] = _emscripten_vr_display_connected;

  function _emscripten_vr_display_presenting(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display || !display.isPresenting) return 0;
      return 1;
    }
  Module["_emscripten_vr_display_presenting"] = _emscripten_vr_display_presenting;

  function _emscripten_vr_set_display_render_loop(displayHandle, func, arg) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      assert(!display.mainLoop || !display.mainLoop.scheduler, "emscripten_vr_set_device_main_loop: there can only be one render loop function per VRDisplay: call emscripten_vr_cancel_render_loop to cancel the previous one before setting a new one with different parameters.");
  
      var displayIterationFunc;
      if (typeof arg !== 'undefined') {
        displayIterationFunc = function() {
          dynCall('vi', func, [arg]);
        };
      } else {
        displayIterationFunc = function() {
          dynCall('v', func);
        };
      }
  
      display.mainLoop = {
        running: !display.mainLoop ? false : display.mainLoop.running,
        scheduler: function() {
          display.requestAnimationFrame(display.mainLoop.runner);
        },
        runner: function() {
          if (ABORT) return;
  
          /* Prevent scheduler being called twice when loop is changed */
          display.mainLoop.running = true;
  
  
          try {
            displayIterationFunc();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown in render loop of VR display ' + displayHandle.toString() + ': ' + [e, e.stack]);
              throw e;
            }
          }
  
  
          if (!display.mainLoop.scheduler) {
            display.mainLoop.running = false;
          } else {
            display.mainLoop.scheduler();
          }
        },
        pause: function() {
          display.mainLoop.scheduler = null;
        }
      };
  
      if (!display.mainLoop.running) {
        display.mainLoop.scheduler();
      } // otherwise called by display.mainLoop.runner()
      return 1;
    }
  Module["_emscripten_vr_set_display_render_loop"] = _emscripten_vr_set_display_render_loop;

  function _emscripten_vr_set_display_render_loop_arg(displayHandle, func, arg) {
      return _emscripten_vr_set_display_render_loop(displayHandle, func, arg);
    }
  Module["_emscripten_vr_set_display_render_loop_arg"] = _emscripten_vr_set_display_render_loop_arg;

  function _emscripten_vr_cancel_display_render_loop(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display || !display.mainLoop) return 0;
  
      display.mainLoop.pause();
      return 1;
    }
  Module["_emscripten_vr_cancel_display_render_loop"] = _emscripten_vr_cancel_display_render_loop;

  function _emscripten_vr_request_present(displayHandle, layerInitPtr, layerCount, func, userData) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      layerInit = new Array(layerCount);
      for (var i = 0; i < layerCount; ++i) {
        sourceStrPtr = HEAP32[((layerInitPtr)>>2)];
  
        var source = null;
        if (sourceStrPtr == 0) {
          source = Module['canvas'];
        } else {
          sourceStr = UTF8ToString(sourceStrPtr);
  
          if (sourceStr && sourceStr.length > 0) {
            source = document.getElementById(sourceStr);
          }
  
          if (!source) {
            return 0;
          }
        }
  
        leftBounds = new Float32Array(4);
        rightBounds = new Float32Array(4);
        var ptr = layerInitPtr;
        for (var j = 0; j < 4; ++j) {
          leftBounds[j] = HEAPF32[(((layerInitPtr)+(4+ 4*j))>>2)];
          rightBounds[j] = HEAPF32[(((layerInitPtr)+(20+ 4*j))>>2)];
          ptr += 4;
        }
  
        layerInit[i] = {
          source: source,
          leftBounds: leftBounds,
          rightBounds: rightBounds
        };
        layerInitPtr += 36;
      }
  
      display.requestPresent(layerInit).then(function() {
        if (!func) return;
        dynCall('vi', func, [userData]);
      });
  
      return 1;
    }
  Module["_emscripten_vr_request_present"] = _emscripten_vr_request_present;

  function _emscripten_vr_exit_present(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display) return 0;
  
      display.exitPresent();
      return 1;
    }
  Module["_emscripten_vr_exit_present"] = _emscripten_vr_exit_present;

  function _emscripten_vr_get_frame_data(displayHandle, frameDataPtr) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display || !display.mainLoop || !frameDataPtr) return 0;
  
      if (!display.frameData) {
        display.frameData = new VRFrameData();
      }
      display.getFrameData(display.frameData);
  
      /* Pose */
  
      /* Used to expose to C which attributes are valid (!== null) */
      var poseFlags = 0;
  
      HEAPF64[((frameDataPtr)>>3)]=display.frameData.timestamp;
  
      if (display.frameData.pose.position !== null) {
        HEAPF32[(((frameDataPtr)+(264))>>2)]=display.frameData.pose.position[0];
        HEAPF32[(((frameDataPtr)+(268))>>2)]=display.frameData.pose.position[1];
        HEAPF32[(((frameDataPtr)+(272))>>2)]=display.frameData.pose.position[2];
  
        poseFlags |= WebVR.POSE_POSITION;
      }
  
      if (display.frameData.pose.linearVelocity !== null) {
        HEAPF32[(((frameDataPtr)+(276))>>2)]=display.frameData.pose.linearVelocity[0];
        HEAPF32[(((frameDataPtr)+(280))>>2)]=display.frameData.pose.linearVelocity[1];
        HEAPF32[(((frameDataPtr)+(284))>>2)]=display.frameData.pose.linearVelocity[2];
  
        poseFlags |= WebVR.POSE_LINEAR_VELOCITY;
      }
  
      if (display.frameData.pose.linearAcceleration !== null) {
        HEAPF32[(((frameDataPtr)+(288))>>2)]=display.frameData.pose.linearAcceleration[0];
        HEAPF32[(((frameDataPtr)+(292))>>2)]=display.frameData.pose.linearAcceleration[1];
        HEAPF32[(((frameDataPtr)+(296))>>2)]=display.frameData.pose.linearAcceleration[2];
  
        poseFlags |= WebVR.POSE_LINEAR_ACCELERATION;
      }
  
      if (display.frameData.pose.orientation !== null) {
        HEAPF32[(((frameDataPtr)+(300))>>2)]=display.frameData.pose.orientation[0];
        HEAPF32[(((frameDataPtr)+(304))>>2)]=display.frameData.pose.orientation[1];
        HEAPF32[(((frameDataPtr)+(308))>>2)]=display.frameData.pose.orientation[2];
        HEAPF32[(((frameDataPtr)+(312))>>2)]=display.frameData.pose.orientation[3];
  
          poseFlags |= WebVR.POSE_ORIENTATION;
      }
  
      if (display.frameData.pose.angularVelocity !== null) {
        HEAPF32[(((frameDataPtr)+(316))>>2)]=display.frameData.pose.angularVelocity[0];
        HEAPF32[(((frameDataPtr)+(320))>>2)]=display.frameData.pose.angularVelocity[1];
        HEAPF32[(((frameDataPtr)+(324))>>2)]=display.frameData.pose.angularVelocity[2];
  
        poseFlags |= WebVR.POSE_ANGULAR_VELOCITY;
      }
  
      if (display.frameData.pose.angularAcceleration !== null) {
        HEAPF32[(((frameDataPtr)+(328))>>2)]=display.frameData.pose.angularAcceleration[0];
        HEAPF32[(((frameDataPtr)+(332))>>2)]=display.frameData.pose.angularAcceleration[1];
        HEAPF32[(((frameDataPtr)+(336))>>2)]=display.frameData.pose.angularAcceleration[0];
  
        poseFlags |= WebVR.POSE_ANGULAR_ACCELERATION;
      }
  
      HEAP32[(((frameDataPtr)+(340))>>2)]=poseFlags;
  
      /* Matrices */
  
      for (var i = 0; i < 16; ++i) {
        HEAPF32[(((frameDataPtr)+(8 + i*4))>>2)]=display.frameData.leftProjectionMatrix[i];
      }
  
      for (var i = 0; i < 16; ++i) {
        HEAPF32[(((frameDataPtr)+(72 + i*4))>>2)]=display.frameData.leftViewMatrix[i];
      }
  
      for (var i = 0; i < 16; ++i) {
        HEAPF32[(((frameDataPtr)+(136 + i*4))>>2)]=display.frameData.rightProjectionMatrix[i];
      }
  
      for (var i = 0; i < 16; ++i) {
        HEAPF32[(((frameDataPtr)+(200 + i*4))>>2)]=display.frameData.rightViewMatrix[i];
      }
  
      return 1;
    }
  Module["_emscripten_vr_get_frame_data"] = _emscripten_vr_get_frame_data;

  function _emscripten_vr_submit_frame(displayHandle) {
      var display = WebVR.dereferenceDisplayHandle(displayHandle);
      if (!display || !display.mainLoop) return 0;
  
      display.submitFrame();
  
      return 1;
    }
  Module["_emscripten_vr_submit_frame"] = _emscripten_vr_submit_frame;

  function _emscripten_has_threading_support() {
      return 0;
    }
  Module["_emscripten_has_threading_support"] = _emscripten_has_threading_support;

  function _emscripten_num_logical_cores() {
      return 1;
    }
  Module["_emscripten_num_logical_cores"] = _emscripten_num_logical_cores;

  function _emscripten_force_num_logical_cores(cores) {
      // Ignored, no threading available.
    }
  Module["_emscripten_force_num_logical_cores"] = _emscripten_force_num_logical_cores;

  function _emscripten_is_main_runtime_thread() {
      return 1;
    }
  Module["_emscripten_is_main_runtime_thread"] = _emscripten_is_main_runtime_thread;

  function _emscripten_is_main_browser_thread() {
      return !ENVIRONMENT_IS_WORKER;
    }
  Module["_emscripten_is_main_browser_thread"] = _emscripten_is_main_browser_thread;

  function _emscripten_main_thread_process_queued_calls() {
      // We will never have any queued calls to process, so no-op.
    }
  Module["_emscripten_main_thread_process_queued_calls"] = _emscripten_main_thread_process_queued_calls;

  function _pthread_barrier_init() {}
  Module["_pthread_barrier_init"] = _pthread_barrier_init;

  function _pthread_barrier_wait() {}
  Module["_pthread_barrier_wait"] = _pthread_barrier_wait;

  function _pthread_barrier_destroy() {}
  Module["_pthread_barrier_destroy"] = _pthread_barrier_destroy;




  function _pthread_mutexattr_setschedparam() {}
  Module["_pthread_mutexattr_setschedparam"] = _pthread_mutexattr_setschedparam;

  function _pthread_mutexattr_setprotocol() {}
  Module["_pthread_mutexattr_setprotocol"] = _pthread_mutexattr_setprotocol;






  function _pthread_mutexattr_setpshared(attr, pshared) {
      // XXX implement if/when getpshared is required
      return 0;
    }
  Module["_pthread_mutexattr_setpshared"] = _pthread_mutexattr_setpshared;

  function _pthread_cond_init() { return 0; }
  Module["_pthread_cond_init"] = _pthread_cond_init;





  function _pthread_condattr_init() { return 0; }
  Module["_pthread_condattr_init"] = _pthread_condattr_init;

  function _pthread_condattr_destroy() { return 0; }
  Module["_pthread_condattr_destroy"] = _pthread_condattr_destroy;

  function _pthread_condattr_setclock() { return 0; }
  Module["_pthread_condattr_setclock"] = _pthread_condattr_setclock;

  function _pthread_condattr_setpshared() { return 0; }
  Module["_pthread_condattr_setpshared"] = _pthread_condattr_setpshared;

  function _pthread_condattr_getclock() { return 0; }
  Module["_pthread_condattr_getclock"] = _pthread_condattr_getclock;

  function _pthread_condattr_getpshared() { return 0; }
  Module["_pthread_condattr_getpshared"] = _pthread_condattr_getpshared;


  function _pthread_attr_init(attr) {
      /* int pthread_attr_init(pthread_attr_t *attr); */
      //FIXME: should allocate a pthread_attr_t
      return 0;
    }
  Module["_pthread_attr_init"] = _pthread_attr_init;

  function _pthread_getattr_np(thread, attr) {
      /* int pthread_getattr_np(pthread_t thread, pthread_attr_t *attr); */
      //FIXME: should fill in attributes of the given thread in pthread_attr_t
      return 0;
    }
  Module["_pthread_getattr_np"] = _pthread_getattr_np;

  function _pthread_attr_destroy(attr) {
      /* int pthread_attr_destroy(pthread_attr_t *attr); */
      //FIXME: should destroy the pthread_attr_t struct
      return 0;
    }
  Module["_pthread_attr_destroy"] = _pthread_attr_destroy;

  function _pthread_attr_getstack(attr, stackaddr, stacksize) {
      /* int pthread_attr_getstack(const pthread_attr_t *restrict attr,
         void **restrict stackaddr, size_t *restrict stacksize); */
      /*FIXME: assumes that there is only one thread, and that attr is the
        current thread*/
      HEAP32[((stackaddr)>>2)]=STACK_BASE;
      HEAP32[((stacksize)>>2)]=TOTAL_STACK;
      return 0;
    }
  Module["_pthread_attr_getstack"] = _pthread_attr_getstack;








  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }
  Module["_pthread_key_delete"] = _pthread_key_delete;



  function __pthread_cleanup_push() {
  return _pthread_cleanup_push.apply(null, arguments)
  }
  Module["__pthread_cleanup_push"] = __pthread_cleanup_push;

  function __pthread_cleanup_pop() {
  return _pthread_cleanup_pop.apply(null, arguments)
  }
  Module["__pthread_cleanup_pop"] = __pthread_cleanup_pop;

  function _pthread_rwlock_init() { return 0; }
  Module["_pthread_rwlock_init"] = _pthread_rwlock_init;

  function _pthread_rwlock_destroy() { return 0; }
  Module["_pthread_rwlock_destroy"] = _pthread_rwlock_destroy;

  function _pthread_rwlock_rdlock() { return 0; }
  Module["_pthread_rwlock_rdlock"] = _pthread_rwlock_rdlock;

  function _pthread_rwlock_tryrdlock() { return 0; }
  Module["_pthread_rwlock_tryrdlock"] = _pthread_rwlock_tryrdlock;

  function _pthread_rwlock_timedrdlock() { return 0; }
  Module["_pthread_rwlock_timedrdlock"] = _pthread_rwlock_timedrdlock;

  function _pthread_rwlock_wrlock() { return 0; }
  Module["_pthread_rwlock_wrlock"] = _pthread_rwlock_wrlock;

  function _pthread_rwlock_trywrlock() { return 0; }
  Module["_pthread_rwlock_trywrlock"] = _pthread_rwlock_trywrlock;

  function _pthread_rwlock_timedwrlock() { return 0; }
  Module["_pthread_rwlock_timedwrlock"] = _pthread_rwlock_timedwrlock;

  function _pthread_rwlock_unlock() { return 0; }
  Module["_pthread_rwlock_unlock"] = _pthread_rwlock_unlock;

  function _pthread_rwlockattr_init() { return 0; }
  Module["_pthread_rwlockattr_init"] = _pthread_rwlockattr_init;

  function _pthread_rwlockattr_destroy() { return 0; }
  Module["_pthread_rwlockattr_destroy"] = _pthread_rwlockattr_destroy;

  function _pthread_rwlockattr_setpshared() { return 0; }
  Module["_pthread_rwlockattr_setpshared"] = _pthread_rwlockattr_setpshared;

  function _pthread_rwlockattr_getpshared() { return 0; }
  Module["_pthread_rwlockattr_getpshared"] = _pthread_rwlockattr_getpshared;

  function _pthread_spin_init() { return 0; }
  Module["_pthread_spin_init"] = _pthread_spin_init;

  function _pthread_spin_destroy() { return 0; }
  Module["_pthread_spin_destroy"] = _pthread_spin_destroy;

  function _pthread_spin_lock() { return 0; }
  Module["_pthread_spin_lock"] = _pthread_spin_lock;

  function _pthread_spin_trylock() { return 0; }
  Module["_pthread_spin_trylock"] = _pthread_spin_trylock;

  function _pthread_spin_unlock() { return 0; }
  Module["_pthread_spin_unlock"] = _pthread_spin_unlock;

  function _pthread_attr_setdetachstate() {}
  Module["_pthread_attr_setdetachstate"] = _pthread_attr_setdetachstate;

  function _pthread_attr_setschedparam() {}
  Module["_pthread_attr_setschedparam"] = _pthread_attr_setschedparam;

  function _pthread_attr_setstacksize() {}
  Module["_pthread_attr_setstacksize"] = _pthread_attr_setstacksize;

  function _pthread_create() {
      return 11;
    }
  Module["_pthread_create"] = _pthread_create;

  function _pthread_cancel() {}
  Module["_pthread_cancel"] = _pthread_cancel;

  function _pthread_exit(status) {
      _exit(status);
    }
  Module["_pthread_exit"] = _pthread_exit;




  function _sem_init() {}
  Module["_sem_init"] = _sem_init;

  function _sem_post() {}
  Module["_sem_post"] = _sem_post;

  function _sem_wait() {}
  Module["_sem_wait"] = _sem_wait;

  function _sem_trywait() {}
  Module["_sem_trywait"] = _sem_trywait;

  function _sem_destroy() {}
  Module["_sem_destroy"] = _sem_destroy;



  function _llvm_memory_barrier(){}
  Module["_llvm_memory_barrier"] = _llvm_memory_barrier;

  function _llvm_atomic_load_add_i32_p0i32(ptr, delta) {
      var ret = HEAP32[((ptr)>>2)];
      HEAP32[((ptr)>>2)]=ret+delta;
      return ret;
    }
  Module["_llvm_atomic_load_add_i32_p0i32"] = _llvm_atomic_load_add_i32_p0i32;

  function ___atomic_is_lock_free(size, ptr) {
      return size <= 4 && (size & (size-1)) == 0 && (ptr&(size-1)) == 0;
    }
  Module["___atomic_is_lock_free"] = ___atomic_is_lock_free;

  function ___atomic_load_8(ptr, memmodel) {
      return ((setTempRet0(HEAP32[(((ptr)+(4))>>2)]),HEAP32[((ptr)>>2)])|0);
    }
  Module["___atomic_load_8"] = ___atomic_load_8;

  function ___atomic_store_8(ptr, vall, valh, memmodel) {
      HEAP32[((ptr)>>2)]=vall;
      HEAP32[(((ptr)+(4))>>2)]=valh;
    }
  Module["___atomic_store_8"] = ___atomic_store_8;

  function ___atomic_exchange_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=vall;
      HEAP32[(((ptr)+(4))>>2)]=valh;
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_exchange_8"] = ___atomic_exchange_8;

  function ___atomic_compare_exchange_8(ptr, expected, desiredl, desiredh, weak, success_memmodel, failure_memmodel) {
      var pl = HEAP32[((ptr)>>2)];
      var ph = HEAP32[(((ptr)+(4))>>2)];
      var el = HEAP32[((expected)>>2)];
      var eh = HEAP32[(((expected)+(4))>>2)];
      if (pl === el && ph === eh) {
        HEAP32[((ptr)>>2)]=desiredl;
        HEAP32[(((ptr)+(4))>>2)]=desiredh;
        return 1;
      } else {
        HEAP32[((expected)>>2)]=pl;
        HEAP32[(((expected)+(4))>>2)]=ph;
        return 0;
      }
    }
  Module["___atomic_compare_exchange_8"] = ___atomic_compare_exchange_8;

  function ___atomic_fetch_add_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=_i64Add(l, h, vall, valh);
      HEAP32[(((ptr)+(4))>>2)]=getTempRet0();
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_fetch_add_8"] = ___atomic_fetch_add_8;

  function ___atomic_fetch_sub_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=_i64Subtract(l, h, vall, valh);
      HEAP32[(((ptr)+(4))>>2)]=getTempRet0();
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_fetch_sub_8"] = ___atomic_fetch_sub_8;

  function ___atomic_fetch_and_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=l&vall;
      HEAP32[(((ptr)+(4))>>2)]=h&valh;
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_fetch_and_8"] = ___atomic_fetch_and_8;

  function ___atomic_fetch_or_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=l|vall;
      HEAP32[(((ptr)+(4))>>2)]=h|valh;
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_fetch_or_8"] = ___atomic_fetch_or_8;

  function ___atomic_fetch_xor_8(ptr, vall, valh, memmodel) {
      var l = HEAP32[((ptr)>>2)];
      var h = HEAP32[(((ptr)+(4))>>2)];
      HEAP32[((ptr)>>2)]=l^vall;
      HEAP32[(((ptr)+(4))>>2)]=h^valh;
      return ((setTempRet0(h),l)|0);
    }
  Module["___atomic_fetch_xor_8"] = ___atomic_fetch_xor_8;

  function _emscripten_atomic_add_u32() {
  return _llvm_atomic_load_add_i32_p0i32.apply(null, arguments)
  }
  Module["_emscripten_atomic_add_u32"] = _emscripten_atomic_add_u32;

  function _emscripten_atomic_load_u64() {
  return ___atomic_load_8.apply(null, arguments)
  }
  Module["_emscripten_atomic_load_u64"] = _emscripten_atomic_load_u64;

  function _emscripten_atomic_store_u64() {
  return ___atomic_store_8.apply(null, arguments)
  }
  Module["_emscripten_atomic_store_u64"] = _emscripten_atomic_store_u64;

  function _emscripten_atomic_cas_u64() {
  return ___atomic_compare_exchange_8.apply(null, arguments)
  }
  Module["_emscripten_atomic_cas_u64"] = _emscripten_atomic_cas_u64;

  function _emscripten_atomic_exchange_u64() {
  return ___atomic_exchange_8.apply(null, arguments)
  }
  Module["_emscripten_atomic_exchange_u64"] = _emscripten_atomic_exchange_u64;

  function __emscripten_atomic_fetch_and_add_u64() {
  return ___atomic_fetch_add_8.apply(null, arguments)
  }
  Module["__emscripten_atomic_fetch_and_add_u64"] = __emscripten_atomic_fetch_and_add_u64;

  function __emscripten_atomic_fetch_and_sub_u64() {
  return ___atomic_fetch_sub_8.apply(null, arguments)
  }
  Module["__emscripten_atomic_fetch_and_sub_u64"] = __emscripten_atomic_fetch_and_sub_u64;

  function __emscripten_atomic_fetch_and_and_u64() {
  return ___atomic_fetch_and_8.apply(null, arguments)
  }
  Module["__emscripten_atomic_fetch_and_and_u64"] = __emscripten_atomic_fetch_and_and_u64;

  function __emscripten_atomic_fetch_and_or_u64() {
  return ___atomic_fetch_or_8.apply(null, arguments)
  }
  Module["__emscripten_atomic_fetch_and_or_u64"] = __emscripten_atomic_fetch_and_or_u64;

  function __emscripten_atomic_fetch_and_xor_u64() {
  return ___atomic_fetch_xor_8.apply(null, arguments)
  }
  Module["__emscripten_atomic_fetch_and_xor_u64"] = __emscripten_atomic_fetch_and_xor_u64;

Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
__ATINIT__.push(function() { PIPEFS.root = FS.mount(PIPEFS, {}, null); });;
___buildEnvironment(ENV);;
JSEvents.staticInit();;
var GLctx; GL.init();
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



Module['wasmTableSize'] = 4096;
var gb = GLOBAL_BASE, fb = 0;
var g$___environ = function() {  return Module["___environ"] };

function invoke_X(index) {
  try {
    return Module["dynCall_X"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_X(x) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'X'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)();
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_d(x) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)();
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_dd(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_ddd(index,a1,a2) {
  try {
    return Module["dynCall_ddd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ddd(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_dddd(index,a1,a2,a3) {
  try {
    return Module["dynCall_dddd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_dddd(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'dddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_dddi(index,a1,a2,a3) {
  try {
    return Module["dynCall_dddi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_dddi(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'dddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_ddi(index,a1,a2) {
  try {
    return Module["dynCall_ddi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ddi(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_di(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_did(index,a1,a2) {
  try {
    return Module["dynCall_did"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_did(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'did'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_dii(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_diii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_fd(index,a1) {
  try {
    return Module["dynCall_fd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fd(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_fdi(index,a1,a2) {
  try {
    return Module["dynCall_fdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fdi(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_ff(index,a1) {
  try {
    return Module["dynCall_ff"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ff(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_ffd(index,a1,a2) {
  try {
    return Module["dynCall_ffd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ffd(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ffd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_fff(index,a1,a2) {
  try {
    return Module["dynCall_fff"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fff(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_ffff(index,a1,a2,a3) {
  try {
    return Module["dynCall_ffff"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ffff(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_fffi(index,a1,a2,a3) {
  try {
    return Module["dynCall_fffi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fffi(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_ffi(index,a1,a2) {
  try {
    return Module["dynCall_ffi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ffi(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_fi(index,a1) {
  try {
    return Module["dynCall_fi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fi(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_fif(index,a1,a2) {
  try {
    return Module["dynCall_fif"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fif(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_fii(index,a1,a2) {
  try {
    return Module["dynCall_fii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fii(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_fiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_fiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_fiii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'fiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_i(x) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)();
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_id(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_idi(index,a1,a2) {
  try {
    return Module["dynCall_idi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_idi(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'idi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_idii(index,a1,a2,a3) {
  try {
    return Module["dynCall_idii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_idii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'idii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_idiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_idiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_idiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'idiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3);
}

function invoke_if(index,a1) {
  try {
    return Module["dynCall_if"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_if(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'if'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_ifi(index,a1,a2) {
  try {
    return Module["dynCall_ifi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ifi(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ifi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_ii(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iid(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_iif(index,a1,a2) {
  try {
    return Module["dynCall_iif"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iif(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iii(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3);
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiid(x, a0, a1, a2, a3, a4) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiii(x, a0, a1, a2, a3, a4) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4);
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiid(x, a0, a1, a2, a3, a4, a5) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiii(x, a0, a1, a2, a3, a4, a5) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5);
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiii(x, a0, a1, a2, a3, a4, a5, a6) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6);
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7);
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8);
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_v(x) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)();
}

function invoke_vdii(index,a1,a2,a3) {
  try {
    Module["dynCall_vdii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vdii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vdii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_vfii(index,a1,a2,a3) {
  try {
    Module["dynCall_vfii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vfii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vfii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vi(x, a0) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0);
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vid(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_vif(index,a1,a2) {
  try {
    Module["dynCall_vif"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vif(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_vii(x, a0, a1) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1);
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viid(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_viif(index,a1,a2,a3) {
  try {
    Module["dynCall_viif"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viif(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viii(x, a0, a1, a2) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiii(x, a0, a1, a2, a3, a4) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiiii(x, a0, a1, a2, a3, a4, a5) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5);
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiiiii(x, a0, a1, a2, a3, a4, a5, a6) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6);
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7);
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function ftCall_viiiiiiiiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  if (x < 0 || x >= Module['wasmTable'].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return Module['wasmTable'].get(x)(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}


var dynCall_X = ftCall_X;


var dynCall_d = ftCall_d;


var dynCall_dd = ftCall_dd;


var dynCall_ddd = ftCall_ddd;


var dynCall_dddd = ftCall_dddd;


var dynCall_dddi = ftCall_dddi;


var dynCall_ddi = ftCall_ddi;


var dynCall_di = ftCall_di;


var dynCall_did = ftCall_did;


var dynCall_dii = ftCall_dii;


var dynCall_diii = ftCall_diii;


var dynCall_fd = ftCall_fd;


var dynCall_fdi = ftCall_fdi;


var dynCall_ff = ftCall_ff;


var dynCall_ffd = ftCall_ffd;


var dynCall_fff = ftCall_fff;


var dynCall_ffff = ftCall_ffff;


var dynCall_fffi = ftCall_fffi;


var dynCall_ffi = ftCall_ffi;


var dynCall_fi = ftCall_fi;


var dynCall_fif = ftCall_fif;


var dynCall_fii = ftCall_fii;


var dynCall_fiii = ftCall_fiii;


var dynCall_i = ftCall_i;


var dynCall_id = ftCall_id;


var dynCall_idi = ftCall_idi;


var dynCall_idii = ftCall_idii;


var dynCall_idiii = ftCall_idiii;


var dynCall_if = ftCall_if;


var dynCall_ifi = ftCall_ifi;


var dynCall_ii = ftCall_ii;


var dynCall_iid = ftCall_iid;


var dynCall_iif = ftCall_iif;


var dynCall_iii = ftCall_iii;


var dynCall_iiii = ftCall_iiii;


var dynCall_iiiii = ftCall_iiiii;


var dynCall_iiiiid = ftCall_iiiiid;


var dynCall_iiiiii = ftCall_iiiiii;


var dynCall_iiiiiid = ftCall_iiiiiid;


var dynCall_iiiiiii = ftCall_iiiiiii;


var dynCall_iiiiiiii = ftCall_iiiiiiii;


var dynCall_iiiiiiiii = ftCall_iiiiiiiii;


var dynCall_iiiiiiiiii = ftCall_iiiiiiiiii;


var dynCall_iiiiiiiiiii = ftCall_iiiiiiiiiii;


var dynCall_iiiiiiiiiiii = ftCall_iiiiiiiiiiii;


var dynCall_iiiiiiiiiiiii = ftCall_iiiiiiiiiiiii;


var dynCall_v = ftCall_v;


var dynCall_vdii = ftCall_vdii;


var dynCall_vfii = ftCall_vfii;


var dynCall_vi = ftCall_vi;


var dynCall_vid = ftCall_vid;


var dynCall_vif = ftCall_vif;


var dynCall_vii = ftCall_vii;


var dynCall_viid = ftCall_viid;


var dynCall_viif = ftCall_viif;


var dynCall_viii = ftCall_viii;


var dynCall_viiii = ftCall_viiii;


var dynCall_viiiii = ftCall_viiiii;


var dynCall_viiiiii = ftCall_viiiiii;


var dynCall_viiiiiii = ftCall_viiiiiii;


var dynCall_viiiiiiii = ftCall_viiiiiiii;


var dynCall_viiiiiiiiii = ftCall_viiiiiiiiii;


var dynCall_viiiiiiiiiiiiiii = ftCall_viiiiiiiiiiiiiii;


Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "invoke_X": invoke_X, "invoke_d": invoke_d, "invoke_dd": invoke_dd, "invoke_ddd": invoke_ddd, "invoke_dddd": invoke_dddd, "invoke_dddi": invoke_dddi, "invoke_ddi": invoke_ddi, "invoke_di": invoke_di, "invoke_did": invoke_did, "invoke_dii": invoke_dii, "invoke_diii": invoke_diii, "invoke_fd": invoke_fd, "invoke_fdi": invoke_fdi, "invoke_ff": invoke_ff, "invoke_ffd": invoke_ffd, "invoke_fff": invoke_fff, "invoke_ffff": invoke_ffff, "invoke_fffi": invoke_fffi, "invoke_ffi": invoke_ffi, "invoke_fi": invoke_fi, "invoke_fif": invoke_fif, "invoke_fii": invoke_fii, "invoke_fiii": invoke_fiii, "invoke_i": invoke_i, "invoke_id": invoke_id, "invoke_idi": invoke_idi, "invoke_idii": invoke_idii, "invoke_idiii": invoke_idiii, "invoke_if": invoke_if, "invoke_ifi": invoke_ifi, "invoke_ii": invoke_ii, "invoke_iid": invoke_iid, "invoke_iif": invoke_iif, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_v": invoke_v, "invoke_vdii": invoke_vdii, "invoke_vfii": invoke_vfii, "invoke_vi": invoke_vi, "invoke_vid": invoke_vid, "invoke_vif": invoke_vif, "invoke_vii": invoke_vii, "invoke_viid": invoke_viid, "invoke_viif": invoke_viif, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "_IMG_Init": _IMG_Init, "_IMG_Load": _IMG_Load, "_IMG_Load_RW": _IMG_Load_RW, "_IMG_Quit": _IMG_Quit, "_Mix_AllocateChannels": _Mix_AllocateChannels, "_Mix_ChannelFinished": _Mix_ChannelFinished, "_Mix_CloseAudio": _Mix_CloseAudio, "_Mix_FadeInChannelTimed": _Mix_FadeInChannelTimed, "_Mix_FadeInMusicPos": _Mix_FadeInMusicPos, "_Mix_FadeOutChannel": _Mix_FadeOutChannel, "_Mix_FadeOutMusic": _Mix_FadeOutMusic, "_Mix_FadingChannel": _Mix_FadingChannel, "_Mix_FreeChunk": _Mix_FreeChunk, "_Mix_FreeMusic": _Mix_FreeMusic, "_Mix_HaltChannel": _Mix_HaltChannel, "_Mix_HaltMusic": _Mix_HaltMusic, "_Mix_HookMusicFinished": _Mix_HookMusicFinished, "_Mix_Init": _Mix_Init, "_Mix_Linked_Version": _Mix_Linked_Version, "_Mix_LoadMUS": _Mix_LoadMUS, "_Mix_LoadMUS_RW": _Mix_LoadMUS_RW, "_Mix_LoadWAV": _Mix_LoadWAV, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_Mix_OpenAudio": _Mix_OpenAudio, "_Mix_Pause": _Mix_Pause, "_Mix_PauseMusic": _Mix_PauseMusic, "_Mix_Paused": _Mix_Paused, "_Mix_PausedMusic": _Mix_PausedMusic, "_Mix_PlayChannel": _Mix_PlayChannel, "_Mix_PlayChannelTimed": _Mix_PlayChannelTimed, "_Mix_PlayMusic": _Mix_PlayMusic, "_Mix_Playing": _Mix_Playing, "_Mix_PlayingMusic": _Mix_PlayingMusic, "_Mix_QuerySpec": _Mix_QuerySpec, "_Mix_QuickLoad_RAW": _Mix_QuickLoad_RAW, "_Mix_Quit": _Mix_Quit, "_Mix_ReserveChannels": _Mix_ReserveChannels, "_Mix_Resume": _Mix_Resume, "_Mix_ResumeMusic": _Mix_ResumeMusic, "_Mix_SetPanning": _Mix_SetPanning, "_Mix_SetPosition": _Mix_SetPosition, "_Mix_SetPostMix": _Mix_SetPostMix, "_Mix_Volume": _Mix_Volume, "_Mix_VolumeChunk": _Mix_VolumeChunk, "_Mix_VolumeMusic": _Mix_VolumeMusic, "_SDL_AddTimer": _SDL_AddTimer, "_SDL_AllocRW": _SDL_AllocRW, "_SDL_AudioDriverName": _SDL_AudioDriverName, "_SDL_AudioQuit": _SDL_AudioQuit, "_SDL_BlitScaled": _SDL_BlitScaled, "_SDL_BlitSurface": _SDL_BlitSurface, "_SDL_ClearError": _SDL_ClearError, "_SDL_CloseAudio": _SDL_CloseAudio, "_SDL_CondBroadcast": _SDL_CondBroadcast, "_SDL_CondSignal": _SDL_CondSignal, "_SDL_CondWait": _SDL_CondWait, "_SDL_CondWaitTimeout": _SDL_CondWaitTimeout, "_SDL_ConvertSurface": _SDL_ConvertSurface, "_SDL_CreateCond": _SDL_CreateCond, "_SDL_CreateMutex": _SDL_CreateMutex, "_SDL_CreateRGBSurface": _SDL_CreateRGBSurface, "_SDL_CreateRGBSurfaceFrom": _SDL_CreateRGBSurfaceFrom, "_SDL_CreateThread": _SDL_CreateThread, "_SDL_Delay": _SDL_Delay, "_SDL_DestroyCond": _SDL_DestroyCond, "_SDL_DestroyMutex": _SDL_DestroyMutex, "_SDL_DestroyRenderer": _SDL_DestroyRenderer, "_SDL_DestroyWindow": _SDL_DestroyWindow, "_SDL_DisplayFormatAlpha": _SDL_DisplayFormatAlpha, "_SDL_EnableKeyRepeat": _SDL_EnableKeyRepeat, "_SDL_EnableUNICODE": _SDL_EnableUNICODE, "_SDL_FillRect": _SDL_FillRect, "_SDL_Flip": _SDL_Flip, "_SDL_FreeRW": _SDL_FreeRW, "_SDL_FreeSurface": _SDL_FreeSurface, "_SDL_GL_DeleteContext": _SDL_GL_DeleteContext, "_SDL_GL_ExtensionSupported": _SDL_GL_ExtensionSupported, "_SDL_GL_GetAttribute": _SDL_GL_GetAttribute, "_SDL_GL_GetProcAddress": _SDL_GL_GetProcAddress, "_SDL_GL_GetSwapInterval": _SDL_GL_GetSwapInterval, "_SDL_GL_MakeCurrent": _SDL_GL_MakeCurrent, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_SDL_GL_SetSwapInterval": _SDL_GL_SetSwapInterval, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_SDL_GL_SwapWindow": _SDL_GL_SwapWindow, "_SDL_GetAppState": _SDL_GetAppState, "_SDL_GetAudioDriver": _SDL_GetAudioDriver, "_SDL_GetClipRect": _SDL_GetClipRect, "_SDL_GetCurrentAudioDriver": _SDL_GetCurrentAudioDriver, "_SDL_GetError": _SDL_GetError, "_SDL_GetKeyName": _SDL_GetKeyName, "_SDL_GetKeyState": _SDL_GetKeyState, "_SDL_GetKeyboardState": _SDL_GetKeyboardState, "_SDL_GetModState": _SDL_GetModState, "_SDL_GetMouseState": _SDL_GetMouseState, "_SDL_GetNumAudioDrivers": _SDL_GetNumAudioDrivers, "_SDL_GetRGB": _SDL_GetRGB, "_SDL_GetRGBA": _SDL_GetRGBA, "_SDL_GetThreadID": _SDL_GetThreadID, "_SDL_GetTicks": _SDL_GetTicks, "_SDL_GetVideoInfo": _SDL_GetVideoInfo, "_SDL_GetVideoSurface": _SDL_GetVideoSurface, "_SDL_GetWindowFlags": _SDL_GetWindowFlags, "_SDL_GetWindowSize": _SDL_GetWindowSize, "_SDL_Has3DNow": _SDL_Has3DNow, "_SDL_Has3DNowExt": _SDL_Has3DNowExt, "_SDL_HasAltiVec": _SDL_HasAltiVec, "_SDL_HasMMX": _SDL_HasMMX, "_SDL_HasMMXExt": _SDL_HasMMXExt, "_SDL_HasRDTSC": _SDL_HasRDTSC, "_SDL_HasSSE": _SDL_HasSSE, "_SDL_HasSSE2": _SDL_HasSSE2, "_SDL_Init": _SDL_Init, "_SDL_InitSubSystem": _SDL_InitSubSystem, "_SDL_JoystickClose": _SDL_JoystickClose, "_SDL_JoystickEventState": _SDL_JoystickEventState, "_SDL_JoystickGetAxis": _SDL_JoystickGetAxis, "_SDL_JoystickGetBall": _SDL_JoystickGetBall, "_SDL_JoystickGetButton": _SDL_JoystickGetButton, "_SDL_JoystickGetHat": _SDL_JoystickGetHat, "_SDL_JoystickIndex": _SDL_JoystickIndex, "_SDL_JoystickName": _SDL_JoystickName, "_SDL_JoystickNumAxes": _SDL_JoystickNumAxes, "_SDL_JoystickNumBalls": _SDL_JoystickNumBalls, "_SDL_JoystickNumButtons": _SDL_JoystickNumButtons, "_SDL_JoystickNumHats": _SDL_JoystickNumHats, "_SDL_JoystickOpen": _SDL_JoystickOpen, "_SDL_JoystickOpened": _SDL_JoystickOpened, "_SDL_JoystickUpdate": _SDL_JoystickUpdate, "_SDL_Linked_Version": _SDL_Linked_Version, "_SDL_ListModes": _SDL_ListModes, "_SDL_LoadBMP": _SDL_LoadBMP, "_SDL_LoadBMP_RW": _SDL_LoadBMP_RW, "_SDL_LockAudio": _SDL_LockAudio, "_SDL_LockMutex": _SDL_LockMutex, "_SDL_LockSurface": _SDL_LockSurface, "_SDL_LogSetOutputFunction": _SDL_LogSetOutputFunction, "_SDL_LowerBlit": _SDL_LowerBlit, "_SDL_LowerBlitScaled": _SDL_LowerBlitScaled, "_SDL_MapRGB": _SDL_MapRGB, "_SDL_MapRGBA": _SDL_MapRGBA, "_SDL_NumJoysticks": _SDL_NumJoysticks, "_SDL_OpenAudio": _SDL_OpenAudio, "_SDL_PauseAudio": _SDL_PauseAudio, "_SDL_PeepEvents": _SDL_PeepEvents, "_SDL_PollEvent": _SDL_PollEvent, "_SDL_PumpEvents": _SDL_PumpEvents, "_SDL_PushEvent": _SDL_PushEvent, "_SDL_Quit": _SDL_Quit, "_SDL_QuitSubSystem": _SDL_QuitSubSystem, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_SDL_RWFromFile": _SDL_RWFromFile, "_SDL_RWFromMem": _SDL_RWFromMem, "_SDL_RemoveTimer": _SDL_RemoveTimer, "_SDL_SaveBMP_RW": _SDL_SaveBMP_RW, "_SDL_SetAlpha": _SDL_SetAlpha, "_SDL_SetClipRect": _SDL_SetClipRect, "_SDL_SetColorKey": _SDL_SetColorKey, "_SDL_SetColors": _SDL_SetColors, "_SDL_SetError": _SDL_SetError, "_SDL_SetGamma": _SDL_SetGamma, "_SDL_SetGammaRamp": _SDL_SetGammaRamp, "_SDL_SetPalette": _SDL_SetPalette, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_SDL_SetWindowFullscreen": _SDL_SetWindowFullscreen, "_SDL_SetWindowTitle": _SDL_SetWindowTitle, "_SDL_ShowCursor": _SDL_ShowCursor, "_SDL_StartTextInput": _SDL_StartTextInput, "_SDL_StopTextInput": _SDL_StopTextInput, "_SDL_ThreadID": _SDL_ThreadID, "_SDL_UnlockAudio": _SDL_UnlockAudio, "_SDL_UnlockMutex": _SDL_UnlockMutex, "_SDL_UnlockSurface": _SDL_UnlockSurface, "_SDL_UpdateRect": _SDL_UpdateRect, "_SDL_UpdateRects": _SDL_UpdateRects, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_SDL_VideoDriverName": _SDL_VideoDriverName, "_SDL_VideoModeOK": _SDL_VideoModeOK, "_SDL_VideoQuit": _SDL_VideoQuit, "_SDL_WM_GrabInput": _SDL_WM_GrabInput, "_SDL_WM_IconifyWindow": _SDL_WM_IconifyWindow, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_SDL_WM_SetIcon": _SDL_WM_SetIcon, "_SDL_WM_ToggleFullScreen": _SDL_WM_ToggleFullScreen, "_SDL_WaitThread": _SDL_WaitThread, "_SDL_WarpMouse": _SDL_WarpMouse, "_SDL_WasInit": _SDL_WasInit, "_SDL_free": _SDL_free, "_SDL_getenv": _SDL_getenv, "_SDL_malloc": _SDL_malloc, "_SDL_mutexP": _SDL_mutexP, "_SDL_mutexV": _SDL_mutexV, "_SDL_putenv": _SDL_putenv, "_TTF_CloseFont": _TTF_CloseFont, "_TTF_FontAscent": _TTF_FontAscent, "_TTF_FontDescent": _TTF_FontDescent, "_TTF_FontHeight": _TTF_FontHeight, "_TTF_FontLineSkip": _TTF_FontLineSkip, "_TTF_GlyphMetrics": _TTF_GlyphMetrics, "_TTF_Init": _TTF_Init, "_TTF_OpenFont": _TTF_OpenFont, "_TTF_Quit": _TTF_Quit, "_TTF_RenderText_Blended": _TTF_RenderText_Blended, "_TTF_RenderText_Shaded": _TTF_RenderText_Shaded, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_TTF_RenderUTF8_Solid": _TTF_RenderUTF8_Solid, "_TTF_SizeText": _TTF_SizeText, "_TTF_SizeUTF8": _TTF_SizeUTF8, "_XChangeWindowAttributes": _XChangeWindowAttributes, "_XCreateWindow": _XCreateWindow, "_XInternAtom": _XInternAtom, "_XMapWindow": _XMapWindow, "_XOpenDisplay": _XOpenDisplay, "_XPending": _XPending, "_XSendEvent": _XSendEvent, "_XSetWMHints": _XSetWMHints, "_XStoreName": _XStoreName, "__Exit": __Exit, "__Unwind_Backtrace": __Unwind_Backtrace, "__Unwind_DeleteException": __Unwind_DeleteException, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "__Unwind_RaiseException": __Unwind_RaiseException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___assert_func": ___assert_func, "___atomic_compare_exchange_8": ___atomic_compare_exchange_8, "___atomic_exchange_8": ___atomic_exchange_8, "___atomic_fetch_add_8": ___atomic_fetch_add_8, "___atomic_fetch_and_8": ___atomic_fetch_and_8, "___atomic_fetch_or_8": ___atomic_fetch_or_8, "___atomic_fetch_sub_8": ___atomic_fetch_sub_8, "___atomic_fetch_xor_8": ___atomic_fetch_xor_8, "___atomic_is_lock_free": ___atomic_is_lock_free, "___atomic_load_8": ___atomic_load_8, "___atomic_store_8": ___atomic_store_8, "___block_all_sigs": ___block_all_sigs, "___buildEnvironment": ___buildEnvironment, "___builtin_prefetch": ___builtin_prefetch, "___clock_gettime": ___clock_gettime, "___clone": ___clone, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_atexit": ___cxa_atexit, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_call_unexpected": ___cxa_call_unexpected, "___cxa_current_primary_exception": ___cxa_current_primary_exception, "___cxa_decrement_exception_refcount": ___cxa_decrement_exception_refcount, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_get_exception_ptr": ___cxa_get_exception_ptr, "___cxa_increment_exception_refcount": ___cxa_increment_exception_refcount, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_rethrow": ___cxa_rethrow, "___cxa_rethrow_primary_exception": ___cxa_rethrow_primary_exception, "___cxa_thread_atexit": ___cxa_thread_atexit, "___cxa_thread_atexit_impl": ___cxa_thread_atexit_impl, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___execvpe": ___execvpe, "___gcc_personality_v0": ___gcc_personality_v0, "___gxx_personality_v0": ___gxx_personality_v0, "___libc_current_sigrtmax": ___libc_current_sigrtmax, "___libc_current_sigrtmin": ___libc_current_sigrtmin, "___lock": ___lock, "___map_file": ___map_file, "___muldc3": ___muldc3, "___mulsc3": ___mulsc3, "___restore_sigs": ___restore_sigs, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___set_network_callback": ___set_network_callback, "___syscall1": ___syscall1, "___syscall10": ___syscall10, "___syscall102": ___syscall102, "___syscall104": ___syscall104, "___syscall114": ___syscall114, "___syscall118": ___syscall118, "___syscall12": ___syscall12, "___syscall121": ___syscall121, "___syscall122": ___syscall122, "___syscall125": ___syscall125, "___syscall132": ___syscall132, "___syscall133": ___syscall133, "___syscall14": ___syscall14, "___syscall140": ___syscall140, "___syscall142": ___syscall142, "___syscall144": ___syscall144, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall147": ___syscall147, "___syscall148": ___syscall148, "___syscall15": ___syscall15, "___syscall150": ___syscall150, "___syscall151": ___syscall151, "___syscall152": ___syscall152, "___syscall153": ___syscall153, "___syscall163": ___syscall163, "___syscall168": ___syscall168, "___syscall178": ___syscall178, "___syscall180": ___syscall180, "___syscall181": ___syscall181, "___syscall183": ___syscall183, "___syscall191": ___syscall191, "___syscall192": ___syscall192, "___syscall193": ___syscall193, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall196": ___syscall196, "___syscall197": ___syscall197, "___syscall198": ___syscall198, "___syscall199": ___syscall199, "___syscall20": ___syscall20, "___syscall200": ___syscall200, "___syscall201": ___syscall201, "___syscall202": ___syscall202, "___syscall203": ___syscall203, "___syscall204": ___syscall204, "___syscall205": ___syscall205, "___syscall207": ___syscall207, "___syscall208": ___syscall208, "___syscall209": ___syscall209, "___syscall210": ___syscall210, "___syscall211": ___syscall211, "___syscall212": ___syscall212, "___syscall213": ___syscall213, "___syscall214": ___syscall214, "___syscall218": ___syscall218, "___syscall219": ___syscall219, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall265": ___syscall265, "___syscall268": ___syscall268, "___syscall269": ___syscall269, "___syscall272": ___syscall272, "___syscall29": ___syscall29, "___syscall295": ___syscall295, "___syscall296": ___syscall296, "___syscall297": ___syscall297, "___syscall298": ___syscall298, "___syscall299": ___syscall299, "___syscall3": ___syscall3, "___syscall300": ___syscall300, "___syscall301": ___syscall301, "___syscall302": ___syscall302, "___syscall303": ___syscall303, "___syscall304": ___syscall304, "___syscall305": ___syscall305, "___syscall306": ___syscall306, "___syscall307": ___syscall307, "___syscall308": ___syscall308, "___syscall320": ___syscall320, "___syscall324": ___syscall324, "___syscall33": ___syscall33, "___syscall330": ___syscall330, "___syscall331": ___syscall331, "___syscall333": ___syscall333, "___syscall334": ___syscall334, "___syscall337": ___syscall337, "___syscall34": ___syscall34, "___syscall340": ___syscall340, "___syscall345": ___syscall345, "___syscall36": ___syscall36, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall4": ___syscall4, "___syscall40": ___syscall40, "___syscall41": ___syscall41, "___syscall42": ___syscall42, "___syscall5": ___syscall5, "___syscall51": ___syscall51, "___syscall54": ___syscall54, "___syscall57": ___syscall57, "___syscall6": ___syscall6, "___syscall60": ___syscall60, "___syscall63": ___syscall63, "___syscall64": ___syscall64, "___syscall65": ___syscall65, "___syscall66": ___syscall66, "___syscall75": ___syscall75, "___syscall77": ___syscall77, "___syscall83": ___syscall83, "___syscall85": ___syscall85, "___syscall9": ___syscall9, "___syscall91": ___syscall91, "___syscall94": ___syscall94, "___syscall96": ___syscall96, "___syscall97": ___syscall97, "___ubsan_handle_float_cast_overflow": ___ubsan_handle_float_cast_overflow, "___unlock": ___unlock, "___wait": ___wait, "__addDays": __addDays, "__arraySum": __arraySum, "__emscripten_atomic_fetch_and_add_u64": __emscripten_atomic_fetch_and_add_u64, "__emscripten_atomic_fetch_and_and_u64": __emscripten_atomic_fetch_and_and_u64, "__emscripten_atomic_fetch_and_or_u64": __emscripten_atomic_fetch_and_or_u64, "__emscripten_atomic_fetch_and_sub_u64": __emscripten_atomic_fetch_and_sub_u64, "__emscripten_atomic_fetch_and_xor_u64": __emscripten_atomic_fetch_and_xor_u64, "__emscripten_push_main_loop_blocker": __emscripten_push_main_loop_blocker, "__emscripten_push_uncounted_main_loop_blocker": __emscripten_push_uncounted_main_loop_blocker, "__emscripten_sample_gamepad_data": __emscripten_sample_gamepad_data, "__emscripten_traverse_stack": __emscripten_traverse_stack, "__exit": __exit, "__formatString": __formatString, "__hideEverythingExceptGivenElement": __hideEverythingExceptGivenElement, "__inet_ntop4_raw": __inet_ntop4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "__inet_pton4_raw": __inet_pton4_raw, "__inet_pton6": __inet_pton6, "__inet_pton6_raw": __inet_pton6_raw, "__isLeapYear": __isLeapYear, "__pthread_cleanup_pop": __pthread_cleanup_pop, "__pthread_cleanup_push": __pthread_cleanup_push, "__read_sockaddr": __read_sockaddr, "__reallyNegative": __reallyNegative, "__registerRestoreOldStyle": __registerRestoreOldStyle, "__restoreHiddenElements": __restoreHiddenElements, "__setLetterbox": __setLetterbox, "__softFullscreenResizeWebGLRenderTarget": __softFullscreenResizeWebGLRenderTarget, "__write_sockaddr": __write_sockaddr, "_abort": _abort, "_abs": _abs, "_alBuffer3f": _alBuffer3f, "_alBuffer3i": _alBuffer3i, "_alBufferData": _alBufferData, "_alBufferf": _alBufferf, "_alBufferfv": _alBufferfv, "_alBufferi": _alBufferi, "_alBufferiv": _alBufferiv, "_alDeleteBuffers": _alDeleteBuffers, "_alDeleteSources": _alDeleteSources, "_alDisable": _alDisable, "_alDistanceModel": _alDistanceModel, "_alDopplerFactor": _alDopplerFactor, "_alDopplerVelocity": _alDopplerVelocity, "_alEnable": _alEnable, "_alGenBuffers": _alGenBuffers, "_alGenSources": _alGenSources, "_alGetBoolean": _alGetBoolean, "_alGetBooleanv": _alGetBooleanv, "_alGetBuffer3f": _alGetBuffer3f, "_alGetBuffer3i": _alGetBuffer3i, "_alGetBufferf": _alGetBufferf, "_alGetBufferfv": _alGetBufferfv, "_alGetBufferi": _alGetBufferi, "_alGetBufferiv": _alGetBufferiv, "_alGetDouble": _alGetDouble, "_alGetDoublev": _alGetDoublev, "_alGetEnumValue": _alGetEnumValue, "_alGetError": _alGetError, "_alGetFloat": _alGetFloat, "_alGetFloatv": _alGetFloatv, "_alGetInteger": _alGetInteger, "_alGetIntegerv": _alGetIntegerv, "_alGetListener3f": _alGetListener3f, "_alGetListener3i": _alGetListener3i, "_alGetListenerf": _alGetListenerf, "_alGetListenerfv": _alGetListenerfv, "_alGetListeneri": _alGetListeneri, "_alGetListeneriv": _alGetListeneriv, "_alGetProcAddress": _alGetProcAddress, "_alGetSource3f": _alGetSource3f, "_alGetSource3i": _alGetSource3i, "_alGetSourcef": _alGetSourcef, "_alGetSourcefv": _alGetSourcefv, "_alGetSourcei": _alGetSourcei, "_alGetSourceiv": _alGetSourceiv, "_alGetString": _alGetString, "_alIsBuffer": _alIsBuffer, "_alIsEnabled": _alIsEnabled, "_alIsExtensionPresent": _alIsExtensionPresent, "_alIsSource": _alIsSource, "_alListener3f": _alListener3f, "_alListener3i": _alListener3i, "_alListenerf": _alListenerf, "_alListenerfv": _alListenerfv, "_alListeneri": _alListeneri, "_alListeneriv": _alListeneriv, "_alSource3f": _alSource3f, "_alSource3i": _alSource3i, "_alSourcePause": _alSourcePause, "_alSourcePausev": _alSourcePausev, "_alSourcePlay": _alSourcePlay, "_alSourcePlayv": _alSourcePlayv, "_alSourceQueueBuffers": _alSourceQueueBuffers, "_alSourceRewind": _alSourceRewind, "_alSourceRewindv": _alSourceRewindv, "_alSourceStop": _alSourceStop, "_alSourceStopv": _alSourceStopv, "_alSourceUnqueueBuffers": _alSourceUnqueueBuffers, "_alSourcef": _alSourcef, "_alSourcefv": _alSourcefv, "_alSourcei": _alSourcei, "_alSourceiv": _alSourceiv, "_alSpeedOfSound": _alSpeedOfSound, "_alarm": _alarm, "_alcCaptureCloseDevice": _alcCaptureCloseDevice, "_alcCaptureOpenDevice": _alcCaptureOpenDevice, "_alcCaptureSamples": _alcCaptureSamples, "_alcCaptureStart": _alcCaptureStart, "_alcCaptureStop": _alcCaptureStop, "_alcCloseDevice": _alcCloseDevice, "_alcCreateContext": _alcCreateContext, "_alcDestroyContext": _alcDestroyContext, "_alcGetContextsDevice": _alcGetContextsDevice, "_alcGetCurrentContext": _alcGetCurrentContext, "_alcGetEnumValue": _alcGetEnumValue, "_alcGetError": _alcGetError, "_alcGetIntegerv": _alcGetIntegerv, "_alcGetProcAddress": _alcGetProcAddress, "_alcGetString": _alcGetString, "_alcIsExtensionPresent": _alcIsExtensionPresent, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_alcOpenDevice": _alcOpenDevice, "_alcProcessContext": _alcProcessContext, "_alcSuspendContext": _alcSuspendContext, "_arc4random": _arc4random, "_asctime": _asctime, "_asctime_r": _asctime_r, "_atexit": _atexit, "_boxColor": _boxColor, "_boxRGBA": _boxRGBA, "_ceil": _ceil, "_ceilf": _ceilf, "_ceill": _ceill, "_chroot": _chroot, "_clearenv": _clearenv, "_clock": _clock, "_clock_getcpuclockid": _clock_getcpuclockid, "_clock_getres": _clock_getres, "_clock_gettime": _clock_gettime, "_clock_settime": _clock_settime, "_confstr": _confstr, "_ctime": _ctime, "_ctime_r": _ctime_r, "_difftime": _difftime, "_dladdr": _dladdr, "_dlclose": _dlclose, "_dlerror": _dlerror, "_dlopen": _dlopen, "_dlsym": _dlsym, "_dysize": _dysize, "_eglBindAPI": _eglBindAPI, "_eglChooseConfig": _eglChooseConfig, "_eglCreateContext": _eglCreateContext, "_eglCreateWindowSurface": _eglCreateWindowSurface, "_eglDestroyContext": _eglDestroyContext, "_eglDestroySurface": _eglDestroySurface, "_eglGetConfigAttrib": _eglGetConfigAttrib, "_eglGetConfigs": _eglGetConfigs, "_eglGetCurrentContext": _eglGetCurrentContext, "_eglGetCurrentDisplay": _eglGetCurrentDisplay, "_eglGetCurrentSurface": _eglGetCurrentSurface, "_eglGetDisplay": _eglGetDisplay, "_eglGetError": _eglGetError, "_eglGetProcAddress": _eglGetProcAddress, "_eglInitialize": _eglInitialize, "_eglMakeCurrent": _eglMakeCurrent, "_eglQueryAPI": _eglQueryAPI, "_eglQueryContext": _eglQueryContext, "_eglQueryString": _eglQueryString, "_eglQuerySurface": _eglQuerySurface, "_eglReleaseThread": _eglReleaseThread, "_eglSwapBuffers": _eglSwapBuffers, "_eglSwapInterval": _eglSwapInterval, "_eglTerminate": _eglTerminate, "_eglWaitClient": _eglWaitClient, "_eglWaitGL": _eglWaitGL, "_eglWaitNative": _eglWaitNative, "_ellipseColor": _ellipseColor, "_ellipseRGBA": _ellipseRGBA, "_emscripten_SDL_SetEventHandler": _emscripten_SDL_SetEventHandler, "_emscripten_alcDevicePauseSOFT": _emscripten_alcDevicePauseSOFT, "_emscripten_alcDeviceResumeSOFT": _emscripten_alcDeviceResumeSOFT, "_emscripten_alcGetStringiSOFT": _emscripten_alcGetStringiSOFT, "_emscripten_alcResetDeviceSOFT": _emscripten_alcResetDeviceSOFT, "_emscripten_async_call": _emscripten_async_call, "_emscripten_async_load_script": _emscripten_async_load_script, "_emscripten_async_run_script": _emscripten_async_run_script, "_emscripten_async_wget": _emscripten_async_wget, "_emscripten_async_wget2": _emscripten_async_wget2, "_emscripten_async_wget2_abort": _emscripten_async_wget2_abort, "_emscripten_async_wget2_data": _emscripten_async_wget2_data, "_emscripten_async_wget_data": _emscripten_async_wget_data, "_emscripten_atomic_add_u32": _emscripten_atomic_add_u32, "_emscripten_atomic_cas_u64": _emscripten_atomic_cas_u64, "_emscripten_atomic_exchange_u64": _emscripten_atomic_exchange_u64, "_emscripten_atomic_load_u64": _emscripten_atomic_load_u64, "_emscripten_atomic_store_u64": _emscripten_atomic_store_u64, "_emscripten_autodebug_double": _emscripten_autodebug_double, "_emscripten_autodebug_float": _emscripten_autodebug_float, "_emscripten_autodebug_i16": _emscripten_autodebug_i16, "_emscripten_autodebug_i32": _emscripten_autodebug_i32, "_emscripten_autodebug_i64": _emscripten_autodebug_i64, "_emscripten_autodebug_i8": _emscripten_autodebug_i8, "_emscripten_call_worker": _emscripten_call_worker, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_emscripten_coroutine_create": _emscripten_coroutine_create, "_emscripten_coroutine_next": _emscripten_coroutine_next, "_emscripten_create_worker": _emscripten_create_worker, "_emscripten_debugger": _emscripten_debugger, "_emscripten_destroy_worker": _emscripten_destroy_worker, "_emscripten_do_request_fullscreen": _emscripten_do_request_fullscreen, "_emscripten_enter_soft_fullscreen": _emscripten_enter_soft_fullscreen, "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_exit_soft_fullscreen": _emscripten_exit_soft_fullscreen, "_emscripten_exit_with_live_runtime": _emscripten_exit_with_live_runtime, "_emscripten_force_exit": _emscripten_force_exit, "_emscripten_force_num_logical_cores": _emscripten_force_num_logical_cores, "_emscripten_get_battery_status": _emscripten_get_battery_status, "_emscripten_get_callstack": _emscripten_get_callstack, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_emscripten_get_canvas_element_size": _emscripten_get_canvas_element_size, "_emscripten_get_canvas_size": _emscripten_get_canvas_size, "_emscripten_get_compiler_setting": _emscripten_get_compiler_setting, "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio, "_emscripten_get_devicemotion_status": _emscripten_get_devicemotion_status, "_emscripten_get_deviceorientation_status": _emscripten_get_deviceorientation_status, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_fullscreen_status": _emscripten_get_fullscreen_status, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_main_loop_timing": _emscripten_get_main_loop_timing, "_emscripten_get_mouse_status": _emscripten_get_mouse_status, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_get_now_res": _emscripten_get_now_res, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_orientation_status": _emscripten_get_orientation_status, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_get_preloaded_image_data": _emscripten_get_preloaded_image_data, "_emscripten_get_preloaded_image_data_from_FILE": _emscripten_get_preloaded_image_data_from_FILE, "_emscripten_get_visibility_status": _emscripten_get_visibility_status, "_emscripten_get_worker_queue_size": _emscripten_get_worker_queue_size, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBegin": _emscripten_glBegin, "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "_emscripten_glDrawArraysInstancedARB": _emscripten_glDrawArraysInstancedARB, "_emscripten_glDrawArraysInstancedEXT": _emscripten_glDrawArraysInstancedEXT, "_emscripten_glDrawArraysInstancedNV": _emscripten_glDrawArraysInstancedNV, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glDrawBuffersEXT": _emscripten_glDrawBuffersEXT, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "_emscripten_glDrawElementsInstancedARB": _emscripten_glDrawElementsInstancedARB, "_emscripten_glDrawElementsInstancedEXT": _emscripten_glDrawElementsInstancedEXT, "_emscripten_glDrawElementsInstancedNV": _emscripten_glDrawElementsInstancedNV, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArray": _emscripten_glIsVertexArray, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "_emscripten_glVertexAttribDivisorARB": _emscripten_glVertexAttribDivisorARB, "_emscripten_glVertexAttribDivisorEXT": _emscripten_glVertexAttribDivisorEXT, "_emscripten_glVertexAttribDivisorNV": _emscripten_glVertexAttribDivisorNV, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_gluLookAt": _emscripten_gluLookAt, "_emscripten_gluOrtho2D": _emscripten_gluOrtho2D, "_emscripten_gluPerspective": _emscripten_gluPerspective, "_emscripten_gluProject": _emscripten_gluProject, "_emscripten_gluUnProject": _emscripten_gluUnProject, "_emscripten_has_threading_support": _emscripten_has_threading_support, "_emscripten_hide_mouse": _emscripten_hide_mouse, "_emscripten_idb_async_delete": _emscripten_idb_async_delete, "_emscripten_idb_async_exists": _emscripten_idb_async_exists, "_emscripten_idb_async_load": _emscripten_idb_async_load, "_emscripten_idb_async_store": _emscripten_idb_async_store, "_emscripten_idb_delete": _emscripten_idb_delete, "_emscripten_idb_exists": _emscripten_idb_exists, "_emscripten_idb_load": _emscripten_idb_load, "_emscripten_idb_store": _emscripten_idb_store, "_emscripten_is_main_browser_thread": _emscripten_is_main_browser_thread, "_emscripten_is_main_runtime_thread": _emscripten_is_main_runtime_thread, "_emscripten_is_webgl_context_lost": _emscripten_is_webgl_context_lost, "_emscripten_lock_orientation": _emscripten_lock_orientation, "_emscripten_log": _emscripten_log, "_emscripten_log_js": _emscripten_log_js, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_main_thread_process_queued_calls": _emscripten_main_thread_process_queued_calls, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_num_logical_cores": _emscripten_num_logical_cores, "_emscripten_pause_main_loop": _emscripten_pause_main_loop, "_emscripten_print_double": _emscripten_print_double, "_emscripten_random": _emscripten_random, "_emscripten_request_fullscreen": _emscripten_request_fullscreen, "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_resume_main_loop": _emscripten_resume_main_loop, "_emscripten_run_preload_plugins": _emscripten_run_preload_plugins, "_emscripten_run_preload_plugins_data": _emscripten_run_preload_plugins_data, "_emscripten_run_script": _emscripten_run_script, "_emscripten_run_script_int": _emscripten_run_script_int, "_emscripten_run_script_string": _emscripten_run_script_string, "_emscripten_set_batterychargingchange_callback": _emscripten_set_batterychargingchange_callback, "_emscripten_set_batterylevelchange_callback": _emscripten_set_batterylevelchange_callback, "_emscripten_set_beforeunload_callback": _emscripten_set_beforeunload_callback, "_emscripten_set_blur_callback": _emscripten_set_blur_callback, "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "_emscripten_set_canvas_size": _emscripten_set_canvas_size, "_emscripten_set_click_callback": _emscripten_set_click_callback, "_emscripten_set_dblclick_callback": _emscripten_set_dblclick_callback, "_emscripten_set_devicemotion_callback": _emscripten_set_devicemotion_callback, "_emscripten_set_deviceorientation_callback": _emscripten_set_deviceorientation_callback, "_emscripten_set_element_css_size": _emscripten_set_element_css_size, "_emscripten_set_focus_callback": _emscripten_set_focus_callback, "_emscripten_set_focusin_callback": _emscripten_set_focusin_callback, "_emscripten_set_focusout_callback": _emscripten_set_focusout_callback, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback, "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback, "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback, "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback, "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg, "_emscripten_set_main_loop_expected_blockers": _emscripten_set_main_loop_expected_blockers, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback, "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback, "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_emscripten_set_mouseout_callback": _emscripten_set_mouseout_callback, "_emscripten_set_mouseover_callback": _emscripten_set_mouseover_callback, "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback, "_emscripten_set_orientationchange_callback": _emscripten_set_orientationchange_callback, "_emscripten_set_pointerlockchange_callback": _emscripten_set_pointerlockchange_callback, "_emscripten_set_pointerlockerror_callback": _emscripten_set_pointerlockerror_callback, "_emscripten_set_resize_callback": _emscripten_set_resize_callback, "_emscripten_set_scroll_callback": _emscripten_set_scroll_callback, "_emscripten_set_socket_close_callback": _emscripten_set_socket_close_callback, "_emscripten_set_socket_connection_callback": _emscripten_set_socket_connection_callback, "_emscripten_set_socket_error_callback": _emscripten_set_socket_error_callback, "_emscripten_set_socket_listen_callback": _emscripten_set_socket_listen_callback, "_emscripten_set_socket_message_callback": _emscripten_set_socket_message_callback, "_emscripten_set_socket_open_callback": _emscripten_set_socket_open_callback, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_emscripten_set_visibilitychange_callback": _emscripten_set_visibilitychange_callback, "_emscripten_set_webglcontextlost_callback": _emscripten_set_webglcontextlost_callback, "_emscripten_set_webglcontextrestored_callback": _emscripten_set_webglcontextrestored_callback, "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback, "_emscripten_sleep": _emscripten_sleep, "_emscripten_unlock_orientation": _emscripten_unlock_orientation, "_emscripten_vibrate": _emscripten_vibrate, "_emscripten_vibrate_pattern": _emscripten_vibrate_pattern, "_emscripten_vr_cancel_display_render_loop": _emscripten_vr_cancel_display_render_loop, "_emscripten_vr_count_displays": _emscripten_vr_count_displays, "_emscripten_vr_deinit": _emscripten_vr_deinit, "_emscripten_vr_display_connected": _emscripten_vr_display_connected, "_emscripten_vr_display_presenting": _emscripten_vr_display_presenting, "_emscripten_vr_exit_present": _emscripten_vr_exit_present, "_emscripten_vr_get_display_capabilities": _emscripten_vr_get_display_capabilities, "_emscripten_vr_get_display_handle": _emscripten_vr_get_display_handle, "_emscripten_vr_get_display_name": _emscripten_vr_get_display_name, "_emscripten_vr_get_eye_parameters": _emscripten_vr_get_eye_parameters, "_emscripten_vr_get_frame_data": _emscripten_vr_get_frame_data, "_emscripten_vr_init": _emscripten_vr_init, "_emscripten_vr_ready": _emscripten_vr_ready, "_emscripten_vr_request_present": _emscripten_vr_request_present, "_emscripten_vr_set_display_render_loop": _emscripten_vr_set_display_render_loop, "_emscripten_vr_set_display_render_loop_arg": _emscripten_vr_set_display_render_loop_arg, "_emscripten_vr_submit_frame": _emscripten_vr_submit_frame, "_emscripten_vr_version_major": _emscripten_vr_version_major, "_emscripten_vr_version_minor": _emscripten_vr_version_minor, "_emscripten_webgl_commit_frame": _emscripten_webgl_commit_frame, "_emscripten_webgl_create_context": _emscripten_webgl_create_context, "_emscripten_webgl_destroy_context": _emscripten_webgl_destroy_context, "_emscripten_webgl_enable_extension": _emscripten_webgl_enable_extension, "_emscripten_webgl_get_current_context": _emscripten_webgl_get_current_context, "_emscripten_webgl_get_drawing_buffer_size": _emscripten_webgl_get_drawing_buffer_size, "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes, "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current, "_emscripten_wget": _emscripten_wget, "_emscripten_wget_data": _emscripten_wget_data, "_emscripten_worker_respond": _emscripten_worker_respond, "_emscripten_worker_respond_provisionally": _emscripten_worker_respond_provisionally, "_emscripten_yield": _emscripten_yield, "_endgrent": _endgrent, "_endprotoent": _endprotoent, "_endpwent": _endpwent, "_execl": _execl, "_execle": _execle, "_execlp": _execlp, "_execv": _execv, "_execve": _execve, "_execvp": _execvp, "_exit": _exit, "_fabs": _fabs, "_fabsf": _fabsf, "_fabsl": _fabsl, "_fexecve": _fexecve, "_filledEllipseColor": _filledEllipseColor, "_filledEllipseRGBA": _filledEllipseRGBA, "_flock": _flock, "_floor": _floor, "_floorf": _floorf, "_floorl": _floorl, "_fork": _fork, "_fpathconf": _fpathconf, "_ftime": _ftime, "_gai_strerror": _gai_strerror, "_getaddrinfo": _getaddrinfo, "_getdate": _getdate, "_getenv": _getenv, "_getgrent": _getgrent, "_gethostbyaddr": _gethostbyaddr, "_gethostbyname": _gethostbyname, "_gethostbyname_r": _gethostbyname_r, "_getitimer": _getitimer, "_getloadavg": _getloadavg, "_getnameinfo": _getnameinfo, "_getpagesize": _getpagesize, "_getprotobyname": _getprotobyname, "_getprotobynumber": _getprotobynumber, "_getprotoent": _getprotoent, "_getpwent": _getpwent, "_getpwnam": _getpwnam, "_getpwuid": _getpwuid, "_gettimeofday": _gettimeofday, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBegin": _glBegin, "_glBeginQueryEXT": _glBeginQueryEXT, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindFramebuffer": _glBindFramebuffer, "_glBindRenderbuffer": _glBindRenderbuffer, "_glBindTexture": _glBindTexture, "_glBindVertexArray": _glBindVertexArray, "_glBindVertexArrayOES": _glBindVertexArrayOES, "_glBlendColor": _glBlendColor, "_glBlendEquation": _glBlendEquation, "_glBlendEquationSeparate": _glBlendEquationSeparate, "_glBlendFunc": _glBlendFunc, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepth": _glClearDepth, "_glClearDepthf": _glClearDepthf, "_glClearStencil": _glClearStencil, "_glColorMask": _glColorMask, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCompressedTexSubImage2D": _glCompressedTexSubImage2D, "_glCopyTexImage2D": _glCopyTexImage2D, "_glCopyTexSubImage2D": _glCopyTexSubImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteQueriesEXT": _glDeleteQueriesEXT, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDeleteVertexArrays": _glDeleteVertexArrays, "_glDeleteVertexArraysOES": _glDeleteVertexArraysOES, "_glDepthFunc": _glDepthFunc, "_glDepthMask": _glDepthMask, "_glDepthRange": _glDepthRange, "_glDepthRangef": _glDepthRangef, "_glDetachShader": _glDetachShader, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glDrawArraysInstanced": _glDrawArraysInstanced, "_glDrawArraysInstancedANGLE": _glDrawArraysInstancedANGLE, "_glDrawArraysInstancedARB": _glDrawArraysInstancedARB, "_glDrawArraysInstancedEXT": _glDrawArraysInstancedEXT, "_glDrawArraysInstancedNV": _glDrawArraysInstancedNV, "_glDrawBuffers": _glDrawBuffers, "_glDrawBuffersEXT": _glDrawBuffersEXT, "_glDrawElements": _glDrawElements, "_glDrawElementsInstanced": _glDrawElementsInstanced, "_glDrawElementsInstancedANGLE": _glDrawElementsInstancedANGLE, "_glDrawElementsInstancedARB": _glDrawElementsInstancedARB, "_glDrawElementsInstancedEXT": _glDrawElementsInstancedEXT, "_glDrawElementsInstancedNV": _glDrawElementsInstancedNV, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glEndQueryEXT": _glEndQueryEXT, "_glFinish": _glFinish, "_glFlush": _glFlush, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenFramebuffers": _glGenFramebuffers, "_glGenQueriesEXT": _glGenQueriesEXT, "_glGenRenderbuffers": _glGenRenderbuffers, "_glGenTextures": _glGenTextures, "_glGenVertexArrays": _glGenVertexArrays, "_glGenVertexArraysOES": _glGenVertexArraysOES, "_glGenerateMipmap": _glGenerateMipmap, "_glGetActiveAttrib": _glGetActiveAttrib, "_glGetActiveUniform": _glGetActiveUniform, "_glGetAttachedShaders": _glGetAttachedShaders, "_glGetAttribLocation": _glGetAttribLocation, "_glGetBooleanv": _glGetBooleanv, "_glGetBufferParameteriv": _glGetBufferParameteriv, "_glGetError": _glGetError, "_glGetFloatv": _glGetFloatv, "_glGetFramebufferAttachmentParameteriv": _glGetFramebufferAttachmentParameteriv, "_glGetIntegerv": _glGetIntegerv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetQueryObjecti64vEXT": _glGetQueryObjecti64vEXT, "_glGetQueryObjectivEXT": _glGetQueryObjectivEXT, "_glGetQueryObjectui64vEXT": _glGetQueryObjectui64vEXT, "_glGetQueryObjectuivEXT": _glGetQueryObjectuivEXT, "_glGetQueryivEXT": _glGetQueryivEXT, "_glGetRenderbufferParameteriv": _glGetRenderbufferParameteriv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderPrecisionFormat": _glGetShaderPrecisionFormat, "_glGetShaderSource": _glGetShaderSource, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetTexParameterfv": _glGetTexParameterfv, "_glGetTexParameteriv": _glGetTexParameteriv, "_glGetUniformLocation": _glGetUniformLocation, "_glGetUniformfv": _glGetUniformfv, "_glGetUniformiv": _glGetUniformiv, "_glGetVertexAttribPointerv": _glGetVertexAttribPointerv, "_glGetVertexAttribfv": _glGetVertexAttribfv, "_glGetVertexAttribiv": _glGetVertexAttribiv, "_glHint": _glHint, "_glIsBuffer": _glIsBuffer, "_glIsEnabled": _glIsEnabled, "_glIsFramebuffer": _glIsFramebuffer, "_glIsProgram": _glIsProgram, "_glIsQueryEXT": _glIsQueryEXT, "_glIsRenderbuffer": _glIsRenderbuffer, "_glIsShader": _glIsShader, "_glIsTexture": _glIsTexture, "_glIsVertexArray": _glIsVertexArray, "_glLineWidth": _glLineWidth, "_glLinkProgram": _glLinkProgram, "_glLoadIdentity": _glLoadIdentity, "_glMatrixMode": _glMatrixMode, "_glPixelStorei": _glPixelStorei, "_glPolygonOffset": _glPolygonOffset, "_glQueryCounterEXT": _glQueryCounterEXT, "_glReadPixels": _glReadPixels, "_glReleaseShaderCompiler": _glReleaseShaderCompiler, "_glRenderbufferStorage": _glRenderbufferStorage, "_glSampleCoverage": _glSampleCoverage, "_glScissor": _glScissor, "_glShaderBinary": _glShaderBinary, "_glShaderSource": _glShaderSource, "_glStencilFunc": _glStencilFunc, "_glStencilFuncSeparate": _glStencilFuncSeparate, "_glStencilMask": _glStencilMask, "_glStencilMaskSeparate": _glStencilMaskSeparate, "_glStencilOp": _glStencilOp, "_glStencilOpSeparate": _glStencilOpSeparate, "_glTexImage2D": _glTexImage2D, "_glTexParameterf": _glTexParameterf, "_glTexParameterfv": _glTexParameterfv, "_glTexParameteri": _glTexParameteri, "_glTexParameteriv": _glTexParameteriv, "_glTexSubImage2D": _glTexSubImage2D, "_glUniform1f": _glUniform1f, "_glUniform1fv": _glUniform1fv, "_glUniform1i": _glUniform1i, "_glUniform1iv": _glUniform1iv, "_glUniform2f": _glUniform2f, "_glUniform2fv": _glUniform2fv, "_glUniform2i": _glUniform2i, "_glUniform2iv": _glUniform2iv, "_glUniform3f": _glUniform3f, "_glUniform3fv": _glUniform3fv, "_glUniform3i": _glUniform3i, "_glUniform3iv": _glUniform3iv, "_glUniform4f": _glUniform4f, "_glUniform4fv": _glUniform4fv, "_glUniform4i": _glUniform4i, "_glUniform4iv": _glUniform4iv, "_glUniformMatrix2fv": _glUniformMatrix2fv, "_glUniformMatrix3fv": _glUniformMatrix3fv, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glValidateProgram": _glValidateProgram, "_glVertexAttrib1f": _glVertexAttrib1f, "_glVertexAttrib1fv": _glVertexAttrib1fv, "_glVertexAttrib2f": _glVertexAttrib2f, "_glVertexAttrib2fv": _glVertexAttrib2fv, "_glVertexAttrib3f": _glVertexAttrib3f, "_glVertexAttrib3fv": _glVertexAttrib3fv, "_glVertexAttrib4f": _glVertexAttrib4f, "_glVertexAttrib4fv": _glVertexAttrib4fv, "_glVertexAttribDivisor": _glVertexAttribDivisor, "_glVertexAttribDivisorANGLE": _glVertexAttribDivisorANGLE, "_glVertexAttribDivisorARB": _glVertexAttribDivisorARB, "_glVertexAttribDivisorEXT": _glVertexAttribDivisorEXT, "_glVertexAttribDivisorNV": _glVertexAttribDivisorNV, "_glVertexAttribPointer": _glVertexAttribPointer, "_glVertexPointer": _glVertexPointer, "_glViewport": _glViewport, "_glewGetErrorString": _glewGetErrorString, "_glewGetExtension": _glewGetExtension, "_glewGetString": _glewGetString, "_glewInit": _glewInit, "_glewIsSupported": _glewIsSupported, "_glfwBroadcastCond": _glfwBroadcastCond, "_glfwCloseWindow": _glfwCloseWindow, "_glfwCreateCond": _glfwCreateCond, "_glfwCreateMutex": _glfwCreateMutex, "_glfwCreateThread": _glfwCreateThread, "_glfwDestroyCond": _glfwDestroyCond, "_glfwDestroyMutex": _glfwDestroyMutex, "_glfwDestroyThread": _glfwDestroyThread, "_glfwDisable": _glfwDisable, "_glfwEnable": _glfwEnable, "_glfwExtensionSupported": _glfwExtensionSupported, "_glfwFreeImage": _glfwFreeImage, "_glfwGetDesktopMode": _glfwGetDesktopMode, "_glfwGetGLVersion": _glfwGetGLVersion, "_glfwGetKey": _glfwGetKey, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetMousePos": _glfwGetMousePos, "_glfwGetMouseWheel": _glfwGetMouseWheel, "_glfwGetNumberOfProcessors": _glfwGetNumberOfProcessors, "_glfwGetProcAddress": _glfwGetProcAddress, "_glfwGetThreadID": _glfwGetThreadID, "_glfwGetTime": _glfwGetTime, "_glfwGetVersion": _glfwGetVersion, "_glfwGetWindowParam": _glfwGetWindowParam, "_glfwGetWindowPos": _glfwGetWindowPos, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwIconifyWindow": _glfwIconifyWindow, "_glfwInit": _glfwInit, "_glfwLoadMemoryTexture2D": _glfwLoadMemoryTexture2D, "_glfwLoadTexture2D": _glfwLoadTexture2D, "_glfwLoadTextureImage2D": _glfwLoadTextureImage2D, "_glfwLockMutex": _glfwLockMutex, "_glfwOpenWindow": _glfwOpenWindow, "_glfwOpenWindowHint": _glfwOpenWindowHint, "_glfwPollEvents": _glfwPollEvents, "_glfwReadImage": _glfwReadImage, "_glfwReadMemoryImage": _glfwReadMemoryImage, "_glfwRestoreWindow": _glfwRestoreWindow, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetMousePos": _glfwSetMousePos, "_glfwSetMousePosCallback": _glfwSetMousePosCallback, "_glfwSetMouseWheel": _glfwSetMouseWheel, "_glfwSetMouseWheelCallback": _glfwSetMouseWheelCallback, "_glfwSetTime": _glfwSetTime, "_glfwSetWindowCloseCallback": _glfwSetWindowCloseCallback, "_glfwSetWindowPos": _glfwSetWindowPos, "_glfwSetWindowRefreshCallback": _glfwSetWindowRefreshCallback, "_glfwSetWindowSize": _glfwSetWindowSize, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSetWindowTitle": _glfwSetWindowTitle, "_glfwSignalCond": _glfwSignalCond, "_glfwSleep": _glfwSleep, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwUnlockMutex": _glfwUnlockMutex, "_glfwWaitCond": _glfwWaitCond, "_glfwWaitEvents": _glfwWaitEvents, "_glfwWaitThread": _glfwWaitThread, "_gluLookAt": _gluLookAt, "_gluOrtho2D": _gluOrtho2D, "_gluPerspective": _gluPerspective, "_gluProject": _gluProject, "_gluUnProject": _gluUnProject, "_glutCreateWindow": _glutCreateWindow, "_glutDestroyWindow": _glutDestroyWindow, "_glutDisplayFunc": _glutDisplayFunc, "_glutFullScreen": _glutFullScreen, "_glutGet": _glutGet, "_glutGetModifiers": _glutGetModifiers, "_glutIdleFunc": _glutIdleFunc, "_glutInit": _glutInit, "_glutInitDisplayMode": _glutInitDisplayMode, "_glutInitWindowPosition": _glutInitWindowPosition, "_glutInitWindowSize": _glutInitWindowSize, "_glutKeyboardFunc": _glutKeyboardFunc, "_glutKeyboardUpFunc": _glutKeyboardUpFunc, "_glutMainLoop": _glutMainLoop, "_glutMotionFunc": _glutMotionFunc, "_glutMouseFunc": _glutMouseFunc, "_glutPassiveMotionFunc": _glutPassiveMotionFunc, "_glutPositionWindow": _glutPositionWindow, "_glutPostRedisplay": _glutPostRedisplay, "_glutReshapeFunc": _glutReshapeFunc, "_glutReshapeWindow": _glutReshapeWindow, "_glutSetCursor": _glutSetCursor, "_glutSpecialFunc": _glutSpecialFunc, "_glutSpecialUpFunc": _glutSpecialUpFunc, "_glutSwapBuffers": _glutSwapBuffers, "_glutTimerFunc": _glutTimerFunc, "_gmtime": _gmtime, "_gmtime_r": _gmtime_r, "_gnu_dev_major": _gnu_dev_major, "_gnu_dev_makedev": _gnu_dev_makedev, "_gnu_dev_minor": _gnu_dev_minor, "_inet_addr": _inet_addr, "_kill": _kill, "_killpg": _killpg, "_lineColor": _lineColor, "_lineRGBA": _lineRGBA, "_llvm_atomic_load_add_i32_p0i32": _llvm_atomic_load_add_i32_p0i32, "_llvm_bswap_i64": _llvm_bswap_i64, "_llvm_ceil_f32": _llvm_ceil_f32, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_copysign_f32": _llvm_copysign_f32, "_llvm_copysign_f64": _llvm_copysign_f64, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_cttz_i64": _llvm_cttz_i64, "_llvm_eh_exception": _llvm_eh_exception, "_llvm_eh_selector": _llvm_eh_selector, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_exp2_f64": _llvm_exp2_f64, "_llvm_exp_f32": _llvm_exp_f32, "_llvm_exp_f64": _llvm_exp_f64, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f32": _llvm_floor_f32, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_flt_rounds": _llvm_flt_rounds, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_log2_f32": _llvm_log2_f32, "_llvm_log2_f64": _llvm_log2_f64, "_llvm_log_f32": _llvm_log_f32, "_llvm_log_f64": _llvm_log_f64, "_llvm_memory_barrier": _llvm_memory_barrier, "_llvm_mono_load_i16_p0i16": _llvm_mono_load_i16_p0i16, "_llvm_mono_load_i32_p0i32": _llvm_mono_load_i32_p0i32, "_llvm_mono_load_i8_p0i8": _llvm_mono_load_i8_p0i8, "_llvm_mono_store_i16_p0i16": _llvm_mono_store_i16_p0i16, "_llvm_mono_store_i32_p0i32": _llvm_mono_store_i32_p0i32, "_llvm_mono_store_i8_p0i8": _llvm_mono_store_i8_p0i8, "_llvm_objectsize_i32": _llvm_objectsize_i32, "_llvm_pow_f32": _llvm_pow_f32, "_llvm_pow_f64": _llvm_pow_f64, "_llvm_powi_f32": _llvm_powi_f32, "_llvm_powi_f64": _llvm_powi_f64, "_llvm_prefetch": _llvm_prefetch, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_sin_f64": _llvm_sin_f64, "_llvm_sqrt_f32": _llvm_sqrt_f32, "_llvm_sqrt_f64": _llvm_sqrt_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_llvm_trunc_f32": _llvm_trunc_f32, "_llvm_trunc_f64": _llvm_trunc_f64, "_llvm_va_copy": _llvm_va_copy, "_llvm_va_end": _llvm_va_end, "_localtime": _localtime, "_localtime_r": _localtime_r, "_longjmp": _longjmp, "_major": _major, "_makedev": _makedev, "_minor": _minor, "_mktime": _mktime, "_nanosleep": _nanosleep, "_pathconf": _pathconf, "_pixelRGBA": _pixelRGBA, "_posix_spawn": _posix_spawn, "_posix_spawn_file_actions_adddup2": _posix_spawn_file_actions_adddup2, "_posix_spawn_file_actions_destroy": _posix_spawn_file_actions_destroy, "_posix_spawn_file_actions_init": _posix_spawn_file_actions_init, "_posix_spawnp": _posix_spawnp, "_pthread_attr_destroy": _pthread_attr_destroy, "_pthread_attr_getstack": _pthread_attr_getstack, "_pthread_attr_init": _pthread_attr_init, "_pthread_attr_setdetachstate": _pthread_attr_setdetachstate, "_pthread_attr_setschedparam": _pthread_attr_setschedparam, "_pthread_attr_setstacksize": _pthread_attr_setstacksize, "_pthread_barrier_destroy": _pthread_barrier_destroy, "_pthread_barrier_init": _pthread_barrier_init, "_pthread_barrier_wait": _pthread_barrier_wait, "_pthread_cancel": _pthread_cancel, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cleanup_push": _pthread_cleanup_push, "_pthread_cond_destroy": _pthread_cond_destroy, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_condattr_destroy": _pthread_condattr_destroy, "_pthread_condattr_getclock": _pthread_condattr_getclock, "_pthread_condattr_getpshared": _pthread_condattr_getpshared, "_pthread_condattr_init": _pthread_condattr_init, "_pthread_condattr_setclock": _pthread_condattr_setclock, "_pthread_condattr_setpshared": _pthread_condattr_setpshared, "_pthread_create": _pthread_create, "_pthread_detach": _pthread_detach, "_pthread_equal": _pthread_equal, "_pthread_exit": _pthread_exit, "_pthread_getattr_np": _pthread_getattr_np, "_pthread_getspecific": _pthread_getspecific, "_pthread_join": _pthread_join, "_pthread_key_create": _pthread_key_create, "_pthread_key_delete": _pthread_key_delete, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_mutexattr_setprotocol": _pthread_mutexattr_setprotocol, "_pthread_mutexattr_setpshared": _pthread_mutexattr_setpshared, "_pthread_mutexattr_setschedparam": _pthread_mutexattr_setschedparam, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_pthread_once": _pthread_once, "_pthread_rwlock_destroy": _pthread_rwlock_destroy, "_pthread_rwlock_init": _pthread_rwlock_init, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "_pthread_rwlock_timedrdlock": _pthread_rwlock_timedrdlock, "_pthread_rwlock_timedwrlock": _pthread_rwlock_timedwrlock, "_pthread_rwlock_tryrdlock": _pthread_rwlock_tryrdlock, "_pthread_rwlock_trywrlock": _pthread_rwlock_trywrlock, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "_pthread_rwlock_wrlock": _pthread_rwlock_wrlock, "_pthread_rwlockattr_destroy": _pthread_rwlockattr_destroy, "_pthread_rwlockattr_getpshared": _pthread_rwlockattr_getpshared, "_pthread_rwlockattr_init": _pthread_rwlockattr_init, "_pthread_rwlockattr_setpshared": _pthread_rwlockattr_setpshared, "_pthread_setcancelstate": _pthread_setcancelstate, "_pthread_setspecific": _pthread_setspecific, "_pthread_sigmask": _pthread_sigmask, "_pthread_spin_destroy": _pthread_spin_destroy, "_pthread_spin_init": _pthread_spin_init, "_pthread_spin_lock": _pthread_spin_lock, "_pthread_spin_trylock": _pthread_spin_trylock, "_pthread_spin_unlock": _pthread_spin_unlock, "_putenv": _putenv, "_raise": _raise, "_rectangleColor": _rectangleColor, "_rectangleRGBA": _rectangleRGBA, "_res_query": _res_query, "_rotozoomSurface": _rotozoomSurface, "_sched_yield": _sched_yield, "_sem_destroy": _sem_destroy, "_sem_init": _sem_init, "_sem_post": _sem_post, "_sem_trywait": _sem_trywait, "_sem_wait": _sem_wait, "_setenv": _setenv, "_setgrent": _setgrent, "_setgroups": _setgroups, "_setitimer": _setitimer, "_setprotoent": _setprotoent, "_setpwent": _setpwent, "_sigaction": _sigaction, "_sigaddset": _sigaddset, "_sigdelset": _sigdelset, "_sigemptyset": _sigemptyset, "_sigfillset": _sigfillset, "_siginterrupt": _siginterrupt, "_sigismember": _sigismember, "_siglongjmp": _siglongjmp, "_signal": _signal, "_sigpending": _sigpending, "_sigprocmask": _sigprocmask, "_sqrt": _sqrt, "_sqrtf": _sqrtf, "_sqrtl": _sqrtl, "_stime": _stime, "_strftime": _strftime, "_strftime_l": _strftime_l, "_strptime": _strptime, "_strptime_l": _strptime_l, "_sysconf": _sysconf, "_system": _system, "_terminate": _terminate, "_time": _time, "_timegm": _timegm, "_timelocal": _timelocal, "_times": _times, "_tzset": _tzset, "_unsetenv": _unsetenv, "_usleep": _usleep, "_utime": _utime, "_utimes": _utimes, "_uuid_clear": _uuid_clear, "_uuid_compare": _uuid_compare, "_uuid_copy": _uuid_copy, "_uuid_generate": _uuid_generate, "_uuid_is_null": _uuid_is_null, "_uuid_parse": _uuid_parse, "_uuid_type": _uuid_type, "_uuid_unparse": _uuid_unparse, "_uuid_unparse_lower": _uuid_unparse_lower, "_uuid_unparse_upper": _uuid_unparse_upper, "_uuid_variant": _uuid_variant, "_vfork": _vfork, "_wait": _wait, "_wait3": _wait3, "_wait4": _wait4, "_waitid": _waitid, "_waitpid": _waitpid, "_zoomSurface": _zoomSurface, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "g$___environ": g$___environ, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "gb": gb, "fb": fb };
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _BF_crypt = Module["_BF_crypt"] = asm["_BF_crypt"];
var _BF_decode = Module["_BF_decode"] = asm["_BF_decode"];
var _BF_encode = Module["_BF_encode"] = asm["_BF_encode"];
var _BF_encrypt = Module["_BF_encrypt"] = asm["_BF_encrypt"];
var _BF_set_key = Module["_BF_set_key"] = asm["_BF_set_key"];
var _BF_swap = Module["_BF_swap"] = asm["_BF_swap"];
var _S = Module["_S"] = asm["_S"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __ZL25default_terminate_handlerv = Module["__ZL25default_terminate_handlerv"] = asm["__ZL25default_terminate_handlerv"];
var __ZL26default_unexpected_handlerv = Module["__ZL26default_unexpected_handlerv"] = asm["__ZL26default_unexpected_handlerv"];
var __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb = Module["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb"];
var __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj = Module["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj"];
var __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj"];
var __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE = Module["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_ = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_ = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_ = Module["__ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_"];
var __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj = Module["__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj"];
var __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj = Module["__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj"];
var __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_ = Module["__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_"];
var __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_ = Module["__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_"];
var __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_ = Module["__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"];
var __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_ = Module["__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_"];
var __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE = Module["__ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE"] = asm["__ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE"];
var __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_ = Module["__ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri = Module["__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri"] = asm["__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri"];
var __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_ = Module["__ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_"] = asm["__ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_"];
var __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = Module["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"];
var __ZN10__cxxabiv116__enum_type_infoD0Ev = Module["__ZN10__cxxabiv116__enum_type_infoD0Ev"] = asm["__ZN10__cxxabiv116__enum_type_infoD0Ev"];
var __ZN10__cxxabiv116__shim_type_infoD0Ev = Module["__ZN10__cxxabiv116__shim_type_infoD0Ev"] = asm["__ZN10__cxxabiv116__shim_type_infoD0Ev"];
var __ZN10__cxxabiv116__shim_type_infoD2Ev = Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"];
var __ZN10__cxxabiv117__array_type_infoD0Ev = Module["__ZN10__cxxabiv117__array_type_infoD0Ev"] = asm["__ZN10__cxxabiv117__array_type_infoD0Ev"];
var __ZN10__cxxabiv117__class_type_infoD0Ev = Module["__ZN10__cxxabiv117__class_type_infoD0Ev"] = asm["__ZN10__cxxabiv117__class_type_infoD0Ev"];
var __ZN10__cxxabiv117__pbase_type_infoD0Ev = Module["__ZN10__cxxabiv117__pbase_type_infoD0Ev"] = asm["__ZN10__cxxabiv117__pbase_type_infoD0Ev"];
var __ZN10__cxxabiv119__pointer_type_infoD0Ev = Module["__ZN10__cxxabiv119__pointer_type_infoD0Ev"] = asm["__ZN10__cxxabiv119__pointer_type_infoD0Ev"];
var __ZN10__cxxabiv120__function_type_infoD0Ev = Module["__ZN10__cxxabiv120__function_type_infoD0Ev"] = asm["__ZN10__cxxabiv120__function_type_infoD0Ev"];
var __ZN10__cxxabiv120__si_class_type_infoD0Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"];
var __ZN10__cxxabiv121__vmi_class_type_infoD0Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = asm["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"];
var __ZN10__cxxabiv123__fundamental_type_infoD0Ev = Module["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"] = asm["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"];
var __ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev = Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"] = asm["__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"];
var __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = Module["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"];
var __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv = Module["__ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv"] = asm["__ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv"];
var __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv116__shim_type_info5noop1Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"];
var __ZNK10__cxxabiv116__shim_type_info5noop2Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"];
var __ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"];
var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"];
var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNKSt10bad_typeid4whatEv = Module["__ZNKSt10bad_typeid4whatEv"] = asm["__ZNKSt10bad_typeid4whatEv"];
var __ZNKSt11logic_error4whatEv = Module["__ZNKSt11logic_error4whatEv"] = asm["__ZNKSt11logic_error4whatEv"];
var __ZNKSt12bad_any_cast4whatEv = Module["__ZNKSt12bad_any_cast4whatEv"] = asm["__ZNKSt12bad_any_cast4whatEv"];
var __ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv = Module["__ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv"] = asm["__ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv"];
var __ZNKSt13bad_exception4whatEv = Module["__ZNKSt13bad_exception4whatEv"] = asm["__ZNKSt13bad_exception4whatEv"];
var __ZNKSt13runtime_error4whatEv = Module["__ZNKSt13runtime_error4whatEv"] = asm["__ZNKSt13runtime_error4whatEv"];
var __ZNKSt16bad_array_length4whatEv = Module["__ZNKSt16bad_array_length4whatEv"] = asm["__ZNKSt16bad_array_length4whatEv"];
var __ZNKSt16nested_exception14rethrow_nestedEv = Module["__ZNKSt16nested_exception14rethrow_nestedEv"] = asm["__ZNKSt16nested_exception14rethrow_nestedEv"];
var __ZNKSt18bad_variant_access4whatEv = Module["__ZNKSt18bad_variant_access4whatEv"] = asm["__ZNKSt18bad_variant_access4whatEv"];
var __ZNKSt19bad_optional_access4whatEv = Module["__ZNKSt19bad_optional_access4whatEv"] = asm["__ZNKSt19bad_optional_access4whatEv"];
var __ZNKSt20bad_array_new_length4whatEv = Module["__ZNKSt20bad_array_new_length4whatEv"] = asm["__ZNKSt20bad_array_new_length4whatEv"];
var __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = asm["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"];
var __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = asm["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"];
var __ZNKSt3__210error_code7messageEv = Module["__ZNKSt3__210error_code7messageEv"] = asm["__ZNKSt3__210error_code7messageEv"];
var __ZNKSt3__210moneypunctIcLb0EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE10neg_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE10neg_formatEv"];
var __ZNKSt3__210moneypunctIcLb0EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE10pos_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE10pos_formatEv"];
var __ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv"];
var __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"];
var __ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv"];
var __ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv"];
var __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"];
var __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"];
var __ZNKSt3__210moneypunctIcLb0EE13negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE13negative_signEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13negative_signEv"];
var __ZNKSt3__210moneypunctIcLb0EE13positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE13positive_signEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13positive_signEv"];
var __ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv"];
var __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"];
var __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"];
var __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"];
var __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"];
var __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"];
var __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"];
var __ZNKSt3__210moneypunctIcLb0EE8groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE8groupingEv"] = asm["__ZNKSt3__210moneypunctIcLb0EE8groupingEv"];
var __ZNKSt3__210moneypunctIcLb1EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE10neg_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE10neg_formatEv"];
var __ZNKSt3__210moneypunctIcLb1EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE10pos_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE10pos_formatEv"];
var __ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv"];
var __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"];
var __ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv"];
var __ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv"];
var __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"];
var __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"];
var __ZNKSt3__210moneypunctIcLb1EE13negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE13negative_signEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13negative_signEv"];
var __ZNKSt3__210moneypunctIcLb1EE13positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE13positive_signEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13positive_signEv"];
var __ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv"];
var __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"];
var __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"];
var __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"];
var __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"];
var __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"];
var __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"];
var __ZNKSt3__210moneypunctIcLb1EE8groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE8groupingEv"] = asm["__ZNKSt3__210moneypunctIcLb1EE8groupingEv"];
var __ZNKSt3__210moneypunctIwLb0EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE10neg_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE10neg_formatEv"];
var __ZNKSt3__210moneypunctIwLb0EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE10pos_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE10pos_formatEv"];
var __ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv"];
var __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"];
var __ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv"];
var __ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv"];
var __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"];
var __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"];
var __ZNKSt3__210moneypunctIwLb0EE13negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE13negative_signEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13negative_signEv"];
var __ZNKSt3__210moneypunctIwLb0EE13positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE13positive_signEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13positive_signEv"];
var __ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv"];
var __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"];
var __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"];
var __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"];
var __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"];
var __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"];
var __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"];
var __ZNKSt3__210moneypunctIwLb0EE8groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE8groupingEv"] = asm["__ZNKSt3__210moneypunctIwLb0EE8groupingEv"];
var __ZNKSt3__210moneypunctIwLb1EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE10neg_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE10neg_formatEv"];
var __ZNKSt3__210moneypunctIwLb1EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE10pos_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE10pos_formatEv"];
var __ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv"];
var __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"];
var __ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv"];
var __ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv"];
var __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"];
var __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"];
var __ZNKSt3__210moneypunctIwLb1EE13negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE13negative_signEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13negative_signEv"];
var __ZNKSt3__210moneypunctIwLb1EE13positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE13positive_signEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13positive_signEv"];
var __ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv"];
var __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"];
var __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"];
var __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"];
var __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"];
var __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"];
var __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"];
var __ZNKSt3__210moneypunctIwLb1EE8groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE8groupingEv"] = asm["__ZNKSt3__210moneypunctIwLb1EE8groupingEv"];
var __ZNKSt3__211__libcpp_db15__decrementableEPKv = Module["__ZNKSt3__211__libcpp_db15__decrementableEPKv"] = asm["__ZNKSt3__211__libcpp_db15__decrementableEPKv"];
var __ZNKSt3__211__libcpp_db15__find_c_from_iEPv = Module["__ZNKSt3__211__libcpp_db15__find_c_from_iEPv"] = asm["__ZNKSt3__211__libcpp_db15__find_c_from_iEPv"];
var __ZNKSt3__211__libcpp_db15__find_iteratorEPKv = Module["__ZNKSt3__211__libcpp_db15__find_iteratorEPKv"] = asm["__ZNKSt3__211__libcpp_db15__find_iteratorEPKv"];
var __ZNKSt3__211__libcpp_db15__subscriptableEPKvi = Module["__ZNKSt3__211__libcpp_db15__subscriptableEPKvi"] = asm["__ZNKSt3__211__libcpp_db15__subscriptableEPKvi"];
var __ZNKSt3__211__libcpp_db17__dereferenceableEPKv = Module["__ZNKSt3__211__libcpp_db17__dereferenceableEPKv"] = asm["__ZNKSt3__211__libcpp_db17__dereferenceableEPKv"];
var __ZNKSt3__211__libcpp_db17__find_c_and_lockEPv = Module["__ZNKSt3__211__libcpp_db17__find_c_and_lockEPv"] = asm["__ZNKSt3__211__libcpp_db17__find_c_and_lockEPv"];
var __ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_ = Module["__ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_"] = asm["__ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_"];
var __ZNKSt3__211__libcpp_db6unlockEv = Module["__ZNKSt3__211__libcpp_db6unlockEv"] = asm["__ZNKSt3__211__libcpp_db6unlockEv"];
var __ZNKSt3__211__libcpp_db8__find_cEPv = Module["__ZNKSt3__211__libcpp_db8__find_cEPv"] = asm["__ZNKSt3__211__libcpp_db8__find_cEPv"];
var __ZNKSt3__211__libcpp_db9__addableEPKvi = Module["__ZNKSt3__211__libcpp_db9__addableEPKvi"] = asm["__ZNKSt3__211__libcpp_db9__addableEPKvi"];
var __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv = Module["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"] = asm["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEeLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEeLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEeLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEExLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEExLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEExLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEdLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEdLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEdLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEeLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEeLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEeLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEfLb1EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEfLb1EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEfLb1EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEiLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEiLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEiLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEjLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEjLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEjLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEElLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEElLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEElLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEmLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEmLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEmLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEExLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEExLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEExLb0EEclEv"];
var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEyLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEyLb0EEclEv"] = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEyLb0EEclEv"];
var __ZNKSt3__212__do_message7messageEi = Module["__ZNKSt3__212__do_message7messageEi"] = asm["__ZNKSt3__212__do_message7messageEi"];
var __ZNKSt3__212bad_weak_ptr4whatEv = Module["__ZNKSt3__212bad_weak_ptr4whatEv"] = asm["__ZNKSt3__212bad_weak_ptr4whatEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12__invariantsEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12__invariantsEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12__invariantsEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4cendEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4cendEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4cendEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5crendEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5crendEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5crendEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindENS_17basic_string_viewIcS2_EEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindENS_17basic_string_viewIcS2_EEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindENS_17basic_string_viewIcS2_EEj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindERKS5_j = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindERKS5_j"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindERKS5_j"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6cbeginEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6cbeginEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6cbeginEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6substrEjj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6substrEjj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6substrEjj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareENS_17basic_string_viewIcS2_EE = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareENS_17basic_string_viewIcS2_EE"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareENS_17basic_string_viewIcS2_EE"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareERKS5_ = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareERKS5_"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareERKS5_"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjNS_17basic_string_viewIcS2_EE = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjNS_17basic_string_viewIcS2_EE"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjNS_17basic_string_viewIcS2_EE"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKc = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKc"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKc"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_ = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_jj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_jj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_jj"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7crbeginEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7crbeginEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7crbeginEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv"];
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj"] = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12__invariantsEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12__invariantsEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12__invariantsEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13get_allocatorEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13get_allocatorEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13get_allocatorEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4cendEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4cendEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4cendEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5crendEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5crendEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5crendEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindENS_17basic_string_viewIwS2_EEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindENS_17basic_string_viewIwS2_EEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindENS_17basic_string_viewIwS2_EEj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindERKS5_j = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindERKS5_j"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindERKS5_j"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6cbeginEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6cbeginEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6cbeginEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6lengthEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6lengthEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6lengthEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6substrEjj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6substrEjj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6substrEjj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareENS_17basic_string_viewIwS2_EE = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareENS_17basic_string_viewIwS2_EE"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareENS_17basic_string_viewIwS2_EE"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareERKS5_ = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareERKS5_"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareERKS5_"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjNS_17basic_string_viewIwS2_EE = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjNS_17basic_string_viewIwS2_EE"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjNS_17basic_string_viewIwS2_EE"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKw = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKw"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKw"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKwj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKwj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKwj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_ = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_jj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_jj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_jj"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7crbeginEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7crbeginEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7crbeginEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv"];
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj"] = asm["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj"];
var __ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc = Module["__ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc"] = asm["__ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc"];
var __ZNKSt3__212ctype_bynameIcE10do_tolowerEc = Module["__ZNKSt3__212ctype_bynameIcE10do_tolowerEc"] = asm["__ZNKSt3__212ctype_bynameIcE10do_tolowerEc"];
var __ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc = Module["__ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc"] = asm["__ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc"];
var __ZNKSt3__212ctype_bynameIcE10do_toupperEc = Module["__ZNKSt3__212ctype_bynameIcE10do_toupperEc"] = asm["__ZNKSt3__212ctype_bynameIcE10do_toupperEc"];
var __ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_"] = asm["__ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_"];
var __ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw = Module["__ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw"] = asm["__ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw"];
var __ZNKSt3__212ctype_bynameIwE10do_tolowerEw = Module["__ZNKSt3__212ctype_bynameIwE10do_tolowerEw"] = asm["__ZNKSt3__212ctype_bynameIwE10do_tolowerEw"];
var __ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw = Module["__ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw"] = asm["__ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw"];
var __ZNKSt3__212ctype_bynameIwE10do_toupperEw = Module["__ZNKSt3__212ctype_bynameIwE10do_toupperEw"] = asm["__ZNKSt3__212ctype_bynameIwE10do_toupperEw"];
var __ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_"] = asm["__ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_"];
var __ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt"] = asm["__ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt"];
var __ZNKSt3__212ctype_bynameIwE5do_isEtw = Module["__ZNKSt3__212ctype_bynameIwE5do_isEtw"] = asm["__ZNKSt3__212ctype_bynameIwE5do_isEtw"];
var __ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw"] = asm["__ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw"];
var __ZNKSt3__212ctype_bynameIwE8do_widenEc = Module["__ZNKSt3__212ctype_bynameIwE8do_widenEc"] = asm["__ZNKSt3__212ctype_bynameIwE8do_widenEc"];
var __ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc"] = asm["__ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc"];
var __ZNKSt3__212ctype_bynameIwE9do_narrowEwc = Module["__ZNKSt3__212ctype_bynameIwE9do_narrowEwc"] = asm["__ZNKSt3__212ctype_bynameIwE9do_narrowEwc"];
var __ZNKSt3__212strstreambuf6pcountEv = Module["__ZNKSt3__212strstreambuf6pcountEv"] = asm["__ZNKSt3__212strstreambuf6pcountEv"];
var __ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6gcountEv = Module["__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6gcountEv"] = asm["__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6gcountEv"];
var __ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv = Module["__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv"] = asm["__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv"];
var __ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6gcountEv = Module["__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6gcountEv"] = asm["__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6gcountEv"];
var __ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv = Module["__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv"] = asm["__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv"];
var __ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv = Module["__ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv"] = asm["__ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv"];
var __ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv = Module["__ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv"] = asm["__ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv"];
var __ZNKSt3__213random_device7entropyEv = Module["__ZNKSt3__213random_device7entropyEv"] = asm["__ZNKSt3__213random_device7entropyEv"];
var __ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv"] = asm["__ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv"];
var __ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv"] = asm["__ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv"];
var __ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv"] = asm["__ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv"];
var __ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv"] = asm["__ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv"];
var __ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv"] = asm["__ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv"];
var __ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv"] = asm["__ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv"];
var __ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__214__codecvt_utf8IwE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IwE11do_encodingEv"] = asm["__ZNKSt3__214__codecvt_utf8IwE11do_encodingEv"];
var __ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv"] = asm["__ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv"];
var __ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv"] = asm["__ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv"];
var __ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"];
var __ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_"] = asm["__ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_"];
var __ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_ = Module["__ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_"] = asm["__ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_"];
var __ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_"] = asm["__ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_"];
var __ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_ = Module["__ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_"] = asm["__ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_"];
var __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi = Module["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"] = asm["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"];
var __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE = Module["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"] = asm["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"];
var __ZNKSt3__214error_category23default_error_conditionEi = Module["__ZNKSt3__214error_category23default_error_conditionEi"] = asm["__ZNKSt3__214error_category23default_error_conditionEi"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"];
var __ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv"];
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv"] = asm["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4gptrEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4gptrEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4gptrEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4pptrEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4pptrEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4pptrEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5ebackEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5ebackEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5ebackEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5egptrEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5egptrEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5egptrEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5epptrEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5epptrEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5epptrEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbaseEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbaseEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbaseEv"];
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv"] = asm["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv"];
var __ZNKSt3__215error_condition7messageEv = Module["__ZNKSt3__215error_condition7messageEv"] = asm["__ZNKSt3__215error_condition7messageEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"];
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"] = asm["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"];
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"] = asm["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"];
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_ = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_"] = asm["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_"];
var __ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_ = Module["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_"] = asm["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv"];
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv"];
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv"] = asm["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv"];
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv"];
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv"] = asm["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv"];
var __ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv = Module["__ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv"] = asm["__ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv"];
var __ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv = Module["__ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv"] = asm["__ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv"];
var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv = Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"];
var __ZNKSt3__218__libcpp_refstring5c_strEv = Module["__ZNKSt3__218__libcpp_refstring5c_strEv"] = asm["__ZNKSt3__218__libcpp_refstring5c_strEv"];
var __ZNKSt3__218__time_get_storageIcE15__do_date_orderEv = Module["__ZNKSt3__218__time_get_storageIcE15__do_date_orderEv"] = asm["__ZNKSt3__218__time_get_storageIcE15__do_date_orderEv"];
var __ZNKSt3__218__time_get_storageIwE15__do_date_orderEv = Module["__ZNKSt3__218__time_get_storageIwE15__do_date_orderEv"] = asm["__ZNKSt3__218__time_get_storageIwE15__do_date_orderEv"];
var __ZNKSt3__219__iostream_category4nameEv = Module["__ZNKSt3__219__iostream_category4nameEv"] = asm["__ZNKSt3__219__iostream_category4nameEv"];
var __ZNKSt3__219__iostream_category7messageEi = Module["__ZNKSt3__219__iostream_category7messageEi"] = asm["__ZNKSt3__219__iostream_category7messageEi"];
var __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info = Module["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"] = asm["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"];
var __ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_j = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_j"] = asm["__ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_j"];
var __ZNKSt3__220__time_get_c_storageIcE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE3__XEv"];
var __ZNKSt3__220__time_get_c_storageIcE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE3__cEv"];
var __ZNKSt3__220__time_get_c_storageIcE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE3__rEv"];
var __ZNKSt3__220__time_get_c_storageIcE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE3__xEv"];
var __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"];
var __ZNKSt3__220__time_get_c_storageIcE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"];
var __ZNKSt3__220__time_get_c_storageIcE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = asm["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"];
var __ZNKSt3__220__time_get_c_storageIwE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE3__XEv"];
var __ZNKSt3__220__time_get_c_storageIwE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE3__cEv"];
var __ZNKSt3__220__time_get_c_storageIwE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE3__rEv"];
var __ZNKSt3__220__time_get_c_storageIwE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE3__xEv"];
var __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"];
var __ZNKSt3__220__time_get_c_storageIwE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"];
var __ZNKSt3__220__time_get_c_storageIwE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = asm["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"];
var __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"];
var __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv"] = asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv"];
var __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"];
var __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"] = asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"];
var __ZNKSt3__223__future_error_category4nameEv = Module["__ZNKSt3__223__future_error_category4nameEv"] = asm["__ZNKSt3__223__future_error_category4nameEv"];
var __ZNKSt3__223__future_error_category7messageEi = Module["__ZNKSt3__223__future_error_category7messageEi"] = asm["__ZNKSt3__223__future_error_category7messageEi"];
var __ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"] = asm["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"];
var __ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE = Module["__ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE"] = asm["__ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE"];
var __ZNKSt3__223__system_error_category23default_error_conditionEi = Module["__ZNKSt3__223__system_error_category23default_error_conditionEi"] = asm["__ZNKSt3__223__system_error_category23default_error_conditionEi"];
var __ZNKSt3__223__system_error_category4nameEv = Module["__ZNKSt3__223__system_error_category4nameEv"] = asm["__ZNKSt3__223__system_error_category4nameEv"];
var __ZNKSt3__223__system_error_category7messageEi = Module["__ZNKSt3__223__system_error_category7messageEi"] = asm["__ZNKSt3__223__system_error_category7messageEi"];
var __ZNKSt3__224__generic_error_category4nameEv = Module["__ZNKSt3__224__generic_error_category4nameEv"] = asm["__ZNKSt3__224__generic_error_category4nameEv"];
var __ZNKSt3__224__generic_error_category7messageEi = Module["__ZNKSt3__224__generic_error_category7messageEi"] = asm["__ZNKSt3__224__generic_error_category7messageEi"];
var __ZNKSt3__224__libcpp_debug_exception4whatEv = Module["__ZNKSt3__224__libcpp_debug_exception4whatEv"] = asm["__ZNKSt3__224__libcpp_debug_exception4whatEv"];
var __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = asm["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"];
var __ZNKSt3__25ctypeIcE10do_tolowerEc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = asm["__ZNKSt3__25ctypeIcE10do_tolowerEc"];
var __ZNKSt3__25ctypeIcE10do_toupperEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = asm["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"];
var __ZNKSt3__25ctypeIcE10do_toupperEc = Module["__ZNKSt3__25ctypeIcE10do_toupperEc"] = asm["__ZNKSt3__25ctypeIcE10do_toupperEc"];
var __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = Module["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = asm["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"];
var __ZNKSt3__25ctypeIcE8do_widenEc = Module["__ZNKSt3__25ctypeIcE8do_widenEc"] = asm["__ZNKSt3__25ctypeIcE8do_widenEc"];
var __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = Module["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = asm["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"];
var __ZNKSt3__25ctypeIcE9do_narrowEcc = Module["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = asm["__ZNKSt3__25ctypeIcE9do_narrowEcc"];
var __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = asm["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"];
var __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = asm["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"];
var __ZNKSt3__25ctypeIwE10do_tolowerEw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = asm["__ZNKSt3__25ctypeIwE10do_tolowerEw"];
var __ZNKSt3__25ctypeIwE10do_toupperEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = asm["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"];
var __ZNKSt3__25ctypeIwE10do_toupperEw = Module["__ZNKSt3__25ctypeIwE10do_toupperEw"] = asm["__ZNKSt3__25ctypeIwE10do_toupperEw"];
var __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = asm["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"];
var __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = asm["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"];
var __ZNKSt3__25ctypeIwE5do_isEtw = Module["__ZNKSt3__25ctypeIwE5do_isEtw"] = asm["__ZNKSt3__25ctypeIwE5do_isEtw"];
var __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = asm["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"];
var __ZNKSt3__25ctypeIwE8do_widenEc = Module["__ZNKSt3__25ctypeIwE8do_widenEc"] = asm["__ZNKSt3__25ctypeIwE8do_widenEc"];
var __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = asm["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"];
var __ZNKSt3__25ctypeIwE9do_narrowEwc = Module["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = asm["__ZNKSt3__25ctypeIwE9do_narrowEwc"];
var __ZNKSt3__26locale4nameEv = Module["__ZNKSt3__26locale4nameEv"] = asm["__ZNKSt3__26locale4nameEv"];
var __ZNKSt3__26locale5__imp4nameEv = Module["__ZNKSt3__26locale5__imp4nameEv"] = asm["__ZNKSt3__26locale5__imp4nameEv"];
var __ZNKSt3__26locale5__imp9has_facetEl = Module["__ZNKSt3__26locale5__imp9has_facetEl"] = asm["__ZNKSt3__26locale5__imp9has_facetEl"];
var __ZNKSt3__26locale5__imp9use_facetEl = Module["__ZNKSt3__26locale5__imp9use_facetEl"] = asm["__ZNKSt3__26locale5__imp9use_facetEl"];
var __ZNKSt3__26locale9has_facetERNS0_2idE = Module["__ZNKSt3__26locale9has_facetERNS0_2idE"] = asm["__ZNKSt3__26locale9has_facetERNS0_2idE"];
var __ZNKSt3__26locale9use_facetERNS0_2idE = Module["__ZNKSt3__26locale9use_facetERNS0_2idE"] = asm["__ZNKSt3__26locale9use_facetERNS0_2idE"];
var __ZNKSt3__26localeeqERKS0_ = Module["__ZNKSt3__26localeeqERKS0_"] = asm["__ZNKSt3__26localeeqERKS0_"];
var __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv = Module["__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv"] = asm["__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv"];
var __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv = Module["__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv"] = asm["__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv"];
var __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv = Module["__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv"] = asm["__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv"];
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv"] = asm["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv"];
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv"] = asm["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv"];
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"] = asm["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"];
var __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"] = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"];
var __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"];
var __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"];
var __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"];
var __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = asm["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"];
var __ZNKSt3__27collateIcE12do_transformEPKcS3_ = Module["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = asm["__ZNKSt3__27collateIcE12do_transformEPKcS3_"];
var __ZNKSt3__27collateIcE4hashEPKcS3_ = Module["__ZNKSt3__27collateIcE4hashEPKcS3_"] = asm["__ZNKSt3__27collateIcE4hashEPKcS3_"];
var __ZNKSt3__27collateIcE7compareEPKcS3_S3_S3_ = Module["__ZNKSt3__27collateIcE7compareEPKcS3_S3_S3_"] = asm["__ZNKSt3__27collateIcE7compareEPKcS3_S3_S3_"];
var __ZNKSt3__27collateIcE7do_hashEPKcS3_ = Module["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = asm["__ZNKSt3__27collateIcE7do_hashEPKcS3_"];
var __ZNKSt3__27collateIcE9transformEPKcS3_ = Module["__ZNKSt3__27collateIcE9transformEPKcS3_"] = asm["__ZNKSt3__27collateIcE9transformEPKcS3_"];
var __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = asm["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"];
var __ZNKSt3__27collateIwE12do_transformEPKwS3_ = Module["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = asm["__ZNKSt3__27collateIwE12do_transformEPKwS3_"];
var __ZNKSt3__27collateIwE4hashEPKwS3_ = Module["__ZNKSt3__27collateIwE4hashEPKwS3_"] = asm["__ZNKSt3__27collateIwE4hashEPKwS3_"];
var __ZNKSt3__27collateIwE7compareEPKwS3_S3_S3_ = Module["__ZNKSt3__27collateIwE7compareEPKwS3_S3_S3_"] = asm["__ZNKSt3__27collateIwE7compareEPKwS3_S3_S3_"];
var __ZNKSt3__27collateIwE7do_hashEPKwS3_ = Module["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = asm["__ZNKSt3__27collateIwE7do_hashEPKwS3_"];
var __ZNKSt3__27collateIwE9transformEPKwS3_ = Module["__ZNKSt3__27collateIwE9transformEPKwS3_"] = asm["__ZNKSt3__27collateIwE9transformEPKwS3_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"];
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"];
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"];
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"];
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"];
var __ZNKSt3__28ios_base6getlocEv = Module["__ZNKSt3__28ios_base6getlocEv"] = asm["__ZNKSt3__28ios_base6getlocEv"];
var __ZNKSt3__28messagesIcE3getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNKSt3__28messagesIcE3getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNKSt3__28messagesIcE3getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNKSt3__28messagesIcE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIcE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = asm["__ZNKSt3__28messagesIcE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
var __ZNKSt3__28messagesIcE5closeEi = Module["__ZNKSt3__28messagesIcE5closeEi"] = asm["__ZNKSt3__28messagesIcE5closeEi"];
var __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = asm["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
var __ZNKSt3__28messagesIcE8do_closeEi = Module["__ZNKSt3__28messagesIcE8do_closeEi"] = asm["__ZNKSt3__28messagesIcE8do_closeEi"];
var __ZNKSt3__28messagesIwE3getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = Module["__ZNKSt3__28messagesIwE3getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = asm["__ZNKSt3__28messagesIwE3getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"];
var __ZNKSt3__28messagesIwE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIwE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = asm["__ZNKSt3__28messagesIwE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
var __ZNKSt3__28messagesIwE5closeEi = Module["__ZNKSt3__28messagesIwE5closeEi"] = asm["__ZNKSt3__28messagesIwE5closeEi"];
var __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = Module["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = asm["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"];
var __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = asm["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
var __ZNKSt3__28messagesIwE8do_closeEi = Module["__ZNKSt3__28messagesIwE8do_closeEi"] = asm["__ZNKSt3__28messagesIwE8do_closeEi"];
var __ZNKSt3__28numpunctIcE11do_groupingEv = Module["__ZNKSt3__28numpunctIcE11do_groupingEv"] = asm["__ZNKSt3__28numpunctIcE11do_groupingEv"];
var __ZNKSt3__28numpunctIcE11do_truenameEv = Module["__ZNKSt3__28numpunctIcE11do_truenameEv"] = asm["__ZNKSt3__28numpunctIcE11do_truenameEv"];
var __ZNKSt3__28numpunctIcE12do_falsenameEv = Module["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = asm["__ZNKSt3__28numpunctIcE12do_falsenameEv"];
var __ZNKSt3__28numpunctIcE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = asm["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"];
var __ZNKSt3__28numpunctIcE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = asm["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"];
var __ZNKSt3__28numpunctIwE11do_groupingEv = Module["__ZNKSt3__28numpunctIwE11do_groupingEv"] = asm["__ZNKSt3__28numpunctIwE11do_groupingEv"];
var __ZNKSt3__28numpunctIwE11do_truenameEv = Module["__ZNKSt3__28numpunctIwE11do_truenameEv"] = asm["__ZNKSt3__28numpunctIwE11do_truenameEv"];
var __ZNKSt3__28numpunctIwE12do_falsenameEv = Module["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = asm["__ZNKSt3__28numpunctIwE12do_falsenameEv"];
var __ZNKSt3__28numpunctIwE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = asm["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"];
var __ZNKSt3__28numpunctIwE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = asm["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10date_orderEv = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10date_orderEv"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10date_orderEv"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10date_orderEv = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10date_orderEv"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10date_orderEv"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm"];
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"];
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_ = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_"] = asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_"];
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmcc = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmcc"] = asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmcc"];
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"];
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_ = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_"] = asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_"];
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmcc = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmcc"] = asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmcc"];
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3badEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3badEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3badEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3eofEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3eofEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3eofEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE6narrowEcc = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE6narrowEcc"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE6narrowEcc"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEcvbEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEcvbEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEcvbEv"];
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEntEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEntEv"] = asm["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEntEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3badEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3badEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3badEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3eofEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3eofEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3eofEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4failEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4failEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4failEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE6narrowEwc = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE6narrowEwc"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE6narrowEwc"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEcvbEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEcvbEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEcvbEv"];
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEntEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEntEv"] = asm["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEntEv"];
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRe"] = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRe"];
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"];
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRe"] = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRe"];
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"];
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEce = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEce"] = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEce"];
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"];
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwe = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwe"] = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwe"];
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"];
var __ZNKSt8bad_cast4whatEv = Module["__ZNKSt8bad_cast4whatEv"] = asm["__ZNKSt8bad_cast4whatEv"];
var __ZNKSt9bad_alloc4whatEv = Module["__ZNKSt9bad_alloc4whatEv"] = asm["__ZNKSt9bad_alloc4whatEv"];
var __ZNKSt9exception4whatEv = Module["__ZNKSt9exception4whatEv"] = asm["__ZNKSt9exception4whatEv"];
var __ZNSt10bad_typeidC2Ev = Module["__ZNSt10bad_typeidC2Ev"] = asm["__ZNSt10bad_typeidC2Ev"];
var __ZNSt10bad_typeidD0Ev = Module["__ZNSt10bad_typeidD0Ev"] = asm["__ZNSt10bad_typeidD0Ev"];
var __ZNSt10bad_typeidD2Ev = Module["__ZNSt10bad_typeidD2Ev"] = asm["__ZNSt10bad_typeidD2Ev"];
var __ZNSt11logic_errorC2EPKc = Module["__ZNSt11logic_errorC2EPKc"] = asm["__ZNSt11logic_errorC2EPKc"];
var __ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = asm["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"];
var __ZNSt11logic_errorC2ERKS_ = Module["__ZNSt11logic_errorC2ERKS_"] = asm["__ZNSt11logic_errorC2ERKS_"];
var __ZNSt11logic_errorD0Ev = Module["__ZNSt11logic_errorD0Ev"] = asm["__ZNSt11logic_errorD0Ev"];
var __ZNSt11logic_errorD2Ev = Module["__ZNSt11logic_errorD2Ev"] = asm["__ZNSt11logic_errorD2Ev"];
var __ZNSt11logic_erroraSERKS_ = Module["__ZNSt11logic_erroraSERKS_"] = asm["__ZNSt11logic_erroraSERKS_"];
var __ZNSt11range_errorD0Ev = Module["__ZNSt11range_errorD0Ev"] = asm["__ZNSt11range_errorD0Ev"];
var __ZNSt12bad_any_castD0Ev = Module["__ZNSt12bad_any_castD0Ev"] = asm["__ZNSt12bad_any_castD0Ev"];
var __ZNSt12domain_errorD0Ev = Module["__ZNSt12domain_errorD0Ev"] = asm["__ZNSt12domain_errorD0Ev"];
var __ZNSt12experimental15fundamentals_v112bad_any_castD0Ev = Module["__ZNSt12experimental15fundamentals_v112bad_any_castD0Ev"] = asm["__ZNSt12experimental15fundamentals_v112bad_any_castD0Ev"];
var __ZNSt12experimental19bad_optional_accessD0Ev = Module["__ZNSt12experimental19bad_optional_accessD0Ev"] = asm["__ZNSt12experimental19bad_optional_accessD0Ev"];
var __ZNSt12experimental19bad_optional_accessD2Ev = Module["__ZNSt12experimental19bad_optional_accessD2Ev"] = asm["__ZNSt12experimental19bad_optional_accessD2Ev"];
var __ZNSt12length_errorD0Ev = Module["__ZNSt12length_errorD0Ev"] = asm["__ZNSt12length_errorD0Ev"];
var __ZNSt12out_of_rangeD0Ev = Module["__ZNSt12out_of_rangeD0Ev"] = asm["__ZNSt12out_of_rangeD0Ev"];
var __ZNSt13bad_exceptionD0Ev = Module["__ZNSt13bad_exceptionD0Ev"] = asm["__ZNSt13bad_exceptionD0Ev"];
var __ZNSt13exception_ptrC2ERKS_ = Module["__ZNSt13exception_ptrC2ERKS_"] = asm["__ZNSt13exception_ptrC2ERKS_"];
var __ZNSt13exception_ptrD2Ev = Module["__ZNSt13exception_ptrD2Ev"] = asm["__ZNSt13exception_ptrD2Ev"];
var __ZNSt13exception_ptraSERKS_ = Module["__ZNSt13exception_ptraSERKS_"] = asm["__ZNSt13exception_ptraSERKS_"];
var __ZNSt13runtime_errorC2EPKc = Module["__ZNSt13runtime_errorC2EPKc"] = asm["__ZNSt13runtime_errorC2EPKc"];
var __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = asm["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"];
var __ZNSt13runtime_errorC2ERKS_ = Module["__ZNSt13runtime_errorC2ERKS_"] = asm["__ZNSt13runtime_errorC2ERKS_"];
var __ZNSt13runtime_errorD0Ev = Module["__ZNSt13runtime_errorD0Ev"] = asm["__ZNSt13runtime_errorD0Ev"];
var __ZNSt13runtime_errorD2Ev = Module["__ZNSt13runtime_errorD2Ev"] = asm["__ZNSt13runtime_errorD2Ev"];
var __ZNSt13runtime_erroraSERKS_ = Module["__ZNSt13runtime_erroraSERKS_"] = asm["__ZNSt13runtime_erroraSERKS_"];
var __ZNSt14overflow_errorD0Ev = Module["__ZNSt14overflow_errorD0Ev"] = asm["__ZNSt14overflow_errorD0Ev"];
var __ZNSt15underflow_errorD0Ev = Module["__ZNSt15underflow_errorD0Ev"] = asm["__ZNSt15underflow_errorD0Ev"];
var __ZNSt16bad_array_lengthC2Ev = Module["__ZNSt16bad_array_lengthC2Ev"] = asm["__ZNSt16bad_array_lengthC2Ev"];
var __ZNSt16bad_array_lengthD0Ev = Module["__ZNSt16bad_array_lengthD0Ev"] = asm["__ZNSt16bad_array_lengthD0Ev"];
var __ZNSt16invalid_argumentD0Ev = Module["__ZNSt16invalid_argumentD0Ev"] = asm["__ZNSt16invalid_argumentD0Ev"];
var __ZNSt16nested_exceptionC2Ev = Module["__ZNSt16nested_exceptionC2Ev"] = asm["__ZNSt16nested_exceptionC2Ev"];
var __ZNSt16nested_exceptionD0Ev = Module["__ZNSt16nested_exceptionD0Ev"] = asm["__ZNSt16nested_exceptionD0Ev"];
var __ZNSt16nested_exceptionD2Ev = Module["__ZNSt16nested_exceptionD2Ev"] = asm["__ZNSt16nested_exceptionD2Ev"];
var __ZNSt18bad_variant_accessD0Ev = Module["__ZNSt18bad_variant_accessD0Ev"] = asm["__ZNSt18bad_variant_accessD0Ev"];
var __ZNSt19bad_optional_accessD0Ev = Module["__ZNSt19bad_optional_accessD0Ev"] = asm["__ZNSt19bad_optional_accessD0Ev"];
var __ZNSt19bad_optional_accessD2Ev = Module["__ZNSt19bad_optional_accessD2Ev"] = asm["__ZNSt19bad_optional_accessD2Ev"];
var __ZNSt20bad_array_new_lengthC2Ev = Module["__ZNSt20bad_array_new_lengthC2Ev"] = asm["__ZNSt20bad_array_new_lengthC2Ev"];
var __ZNSt20bad_array_new_lengthD0Ev = Module["__ZNSt20bad_array_new_lengthD0Ev"] = asm["__ZNSt20bad_array_new_lengthD0Ev"];
var __ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_ = Module["__ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"] = asm["__ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"];
var __ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_ = Module["__ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"] = asm["__ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"];
var __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"] = asm["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"];
var __ZNSt3__210__stdinbufIcE5uflowEv = Module["__ZNSt3__210__stdinbufIcE5uflowEv"] = asm["__ZNSt3__210__stdinbufIcE5uflowEv"];
var __ZNSt3__210__stdinbufIcE9__getcharEb = Module["__ZNSt3__210__stdinbufIcE9__getcharEb"] = asm["__ZNSt3__210__stdinbufIcE9__getcharEb"];
var __ZNSt3__210__stdinbufIcE9pbackfailEi = Module["__ZNSt3__210__stdinbufIcE9pbackfailEi"] = asm["__ZNSt3__210__stdinbufIcE9pbackfailEi"];
var __ZNSt3__210__stdinbufIcE9underflowEv = Module["__ZNSt3__210__stdinbufIcE9underflowEv"] = asm["__ZNSt3__210__stdinbufIcE9underflowEv"];
var __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"] = asm["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"];
var __ZNSt3__210__stdinbufIcED0Ev = Module["__ZNSt3__210__stdinbufIcED0Ev"] = asm["__ZNSt3__210__stdinbufIcED0Ev"];
var __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"] = asm["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"];
var __ZNSt3__210__stdinbufIwE5uflowEv = Module["__ZNSt3__210__stdinbufIwE5uflowEv"] = asm["__ZNSt3__210__stdinbufIwE5uflowEv"];
var __ZNSt3__210__stdinbufIwE9__getcharEb = Module["__ZNSt3__210__stdinbufIwE9__getcharEb"] = asm["__ZNSt3__210__stdinbufIwE9__getcharEb"];
var __ZNSt3__210__stdinbufIwE9pbackfailEj = Module["__ZNSt3__210__stdinbufIwE9pbackfailEj"] = asm["__ZNSt3__210__stdinbufIwE9pbackfailEj"];
var __ZNSt3__210__stdinbufIwE9underflowEv = Module["__ZNSt3__210__stdinbufIwE9underflowEv"] = asm["__ZNSt3__210__stdinbufIwE9underflowEv"];
var __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"] = asm["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"];
var __ZNSt3__210__stdinbufIwED0Ev = Module["__ZNSt3__210__stdinbufIwED0Ev"] = asm["__ZNSt3__210__stdinbufIwED0Ev"];
var __ZNSt3__210__time_getC2EPKc = Module["__ZNSt3__210__time_getC2EPKc"] = asm["__ZNSt3__210__time_getC2EPKc"];
var __ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__210__time_getD2Ev = Module["__ZNSt3__210__time_getD2Ev"] = asm["__ZNSt3__210__time_getD2Ev"];
var __ZNSt3__210__time_putC2EPKc = Module["__ZNSt3__210__time_putC2EPKc"] = asm["__ZNSt3__210__time_putC2EPKc"];
var __ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__210__time_putD2Ev = Module["__ZNSt3__210__time_putD2Ev"] = asm["__ZNSt3__210__time_putD2Ev"];
var __ZNSt3__210istrstreamD0Ev = Module["__ZNSt3__210istrstreamD0Ev"] = asm["__ZNSt3__210istrstreamD0Ev"];
var __ZNSt3__210istrstreamD1Ev = Module["__ZNSt3__210istrstreamD1Ev"] = asm["__ZNSt3__210istrstreamD1Ev"];
var __ZNSt3__210istrstreamD2Ev = Module["__ZNSt3__210istrstreamD2Ev"] = asm["__ZNSt3__210istrstreamD2Ev"];
var __ZNSt3__210moneypunctIcLb0EEC2Ej = Module["__ZNSt3__210moneypunctIcLb0EEC2Ej"] = asm["__ZNSt3__210moneypunctIcLb0EEC2Ej"];
var __ZNSt3__210moneypunctIcLb0EED0Ev = Module["__ZNSt3__210moneypunctIcLb0EED0Ev"] = asm["__ZNSt3__210moneypunctIcLb0EED0Ev"];
var __ZNSt3__210moneypunctIcLb0EED2Ev = Module["__ZNSt3__210moneypunctIcLb0EED2Ev"] = asm["__ZNSt3__210moneypunctIcLb0EED2Ev"];
var __ZNSt3__210moneypunctIcLb1EEC2Ej = Module["__ZNSt3__210moneypunctIcLb1EEC2Ej"] = asm["__ZNSt3__210moneypunctIcLb1EEC2Ej"];
var __ZNSt3__210moneypunctIcLb1EED0Ev = Module["__ZNSt3__210moneypunctIcLb1EED0Ev"] = asm["__ZNSt3__210moneypunctIcLb1EED0Ev"];
var __ZNSt3__210moneypunctIcLb1EED2Ev = Module["__ZNSt3__210moneypunctIcLb1EED2Ev"] = asm["__ZNSt3__210moneypunctIcLb1EED2Ev"];
var __ZNSt3__210moneypunctIwLb0EEC2Ej = Module["__ZNSt3__210moneypunctIwLb0EEC2Ej"] = asm["__ZNSt3__210moneypunctIwLb0EEC2Ej"];
var __ZNSt3__210moneypunctIwLb0EED0Ev = Module["__ZNSt3__210moneypunctIwLb0EED0Ev"] = asm["__ZNSt3__210moneypunctIwLb0EED0Ev"];
var __ZNSt3__210moneypunctIwLb0EED2Ev = Module["__ZNSt3__210moneypunctIwLb0EED2Ev"] = asm["__ZNSt3__210moneypunctIwLb0EED2Ev"];
var __ZNSt3__210moneypunctIwLb1EEC2Ej = Module["__ZNSt3__210moneypunctIwLb1EEC2Ej"] = asm["__ZNSt3__210moneypunctIwLb1EEC2Ej"];
var __ZNSt3__210moneypunctIwLb1EED0Ev = Module["__ZNSt3__210moneypunctIwLb1EED0Ev"] = asm["__ZNSt3__210moneypunctIwLb1EED0Ev"];
var __ZNSt3__210moneypunctIwLb1EED2Ev = Module["__ZNSt3__210moneypunctIwLb1EED2Ev"] = asm["__ZNSt3__210moneypunctIwLb1EED2Ev"];
var __ZNSt3__210ostrstreamD0Ev = Module["__ZNSt3__210ostrstreamD0Ev"] = asm["__ZNSt3__210ostrstreamD0Ev"];
var __ZNSt3__210ostrstreamD1Ev = Module["__ZNSt3__210ostrstreamD1Ev"] = asm["__ZNSt3__210ostrstreamD1Ev"];
var __ZNSt3__210ostrstreamD2Ev = Module["__ZNSt3__210ostrstreamD2Ev"] = asm["__ZNSt3__210ostrstreamD2Ev"];
var __ZNSt3__210to_wstringEd = Module["__ZNSt3__210to_wstringEd"] = asm["__ZNSt3__210to_wstringEd"];
var __ZNSt3__210to_wstringEe = Module["__ZNSt3__210to_wstringEe"] = asm["__ZNSt3__210to_wstringEe"];
var __ZNSt3__210to_wstringEf = Module["__ZNSt3__210to_wstringEf"] = asm["__ZNSt3__210to_wstringEf"];
var __ZNSt3__210to_wstringEi = Module["__ZNSt3__210to_wstringEi"] = asm["__ZNSt3__210to_wstringEi"];
var __ZNSt3__210to_wstringEj = Module["__ZNSt3__210to_wstringEj"] = asm["__ZNSt3__210to_wstringEj"];
var __ZNSt3__210to_wstringEl = Module["__ZNSt3__210to_wstringEl"] = asm["__ZNSt3__210to_wstringEl"];
var __ZNSt3__210to_wstringEm = Module["__ZNSt3__210to_wstringEm"] = asm["__ZNSt3__210to_wstringEm"];
var __ZNSt3__210to_wstringEx = Module["__ZNSt3__210to_wstringEx"] = asm["__ZNSt3__210to_wstringEx"];
var __ZNSt3__210to_wstringEy = Module["__ZNSt3__210to_wstringEy"] = asm["__ZNSt3__210to_wstringEy"];
var __ZNSt3__211__call_onceERVmPvPFvS2_E = Module["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = asm["__ZNSt3__211__call_onceERVmPvPFvS2_E"];
var __ZNSt3__211__libcpp_db10__insert_cEPv = Module["__ZNSt3__211__libcpp_db10__insert_cEPv"] = asm["__ZNSt3__211__libcpp_db10__insert_cEPv"];
var __ZNSt3__211__libcpp_db10__insert_iEPv = Module["__ZNSt3__211__libcpp_db10__insert_iEPv"] = asm["__ZNSt3__211__libcpp_db10__insert_iEPv"];
var __ZNSt3__211__libcpp_db11__insert_icEPvPKv = Module["__ZNSt3__211__libcpp_db11__insert_icEPvPKv"] = asm["__ZNSt3__211__libcpp_db11__insert_icEPvPKv"];
var __ZNSt3__211__libcpp_db15__iterator_copyEPvPKv = Module["__ZNSt3__211__libcpp_db15__iterator_copyEPvPKv"] = asm["__ZNSt3__211__libcpp_db15__iterator_copyEPvPKv"];
var __ZNSt3__211__libcpp_db16__invalidate_allEPv = Module["__ZNSt3__211__libcpp_db16__invalidate_allEPv"] = asm["__ZNSt3__211__libcpp_db16__invalidate_allEPv"];
var __ZNSt3__211__libcpp_db17__insert_iteratorEPv = Module["__ZNSt3__211__libcpp_db17__insert_iteratorEPv"] = asm["__ZNSt3__211__libcpp_db17__insert_iteratorEPv"];
var __ZNSt3__211__libcpp_db4swapEPvS1_ = Module["__ZNSt3__211__libcpp_db4swapEPvS1_"] = asm["__ZNSt3__211__libcpp_db4swapEPvS1_"];
var __ZNSt3__211__libcpp_db9__erase_cEPv = Module["__ZNSt3__211__libcpp_db9__erase_cEPv"] = asm["__ZNSt3__211__libcpp_db9__erase_cEPv"];
var __ZNSt3__211__libcpp_db9__erase_iEPv = Module["__ZNSt3__211__libcpp_db9__erase_iEPv"] = asm["__ZNSt3__211__libcpp_db9__erase_iEPv"];
var __ZNSt3__211__libcpp_dbC2Ev = Module["__ZNSt3__211__libcpp_dbC2Ev"] = asm["__ZNSt3__211__libcpp_dbC2Ev"];
var __ZNSt3__211__libcpp_dbD2Ev = Module["__ZNSt3__211__libcpp_dbD2Ev"] = asm["__ZNSt3__211__libcpp_dbD2Ev"];
var __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = Module["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = asm["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"];
var __ZNSt3__211__money_getIcEC2Ev = Module["__ZNSt3__211__money_getIcEC2Ev"] = asm["__ZNSt3__211__money_getIcEC2Ev"];
var __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = Module["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = asm["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"];
var __ZNSt3__211__money_getIwEC2Ev = Module["__ZNSt3__211__money_getIwEC2Ev"] = asm["__ZNSt3__211__money_getIwEC2Ev"];
var __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = Module["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = asm["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"];
var __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = Module["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = asm["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"];
var __ZNSt3__211__money_putIcEC2Ev = Module["__ZNSt3__211__money_putIcEC2Ev"] = asm["__ZNSt3__211__money_putIcEC2Ev"];
var __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = Module["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = asm["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"];
var __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = Module["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = asm["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"];
var __ZNSt3__211__money_putIwEC2Ev = Module["__ZNSt3__211__money_putIwEC2Ev"] = asm["__ZNSt3__211__money_putIwEC2Ev"];
var __ZNSt3__211__stdoutbufIcE4syncEv = Module["__ZNSt3__211__stdoutbufIcE4syncEv"] = asm["__ZNSt3__211__stdoutbufIcE4syncEv"];
var __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"] = asm["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"];
var __ZNSt3__211__stdoutbufIcE6xsputnEPKci = Module["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"] = asm["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"];
var __ZNSt3__211__stdoutbufIcE8overflowEi = Module["__ZNSt3__211__stdoutbufIcE8overflowEi"] = asm["__ZNSt3__211__stdoutbufIcE8overflowEi"];
var __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"] = asm["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"];
var __ZNSt3__211__stdoutbufIcED0Ev = Module["__ZNSt3__211__stdoutbufIcED0Ev"] = asm["__ZNSt3__211__stdoutbufIcED0Ev"];
var __ZNSt3__211__stdoutbufIwE4syncEv = Module["__ZNSt3__211__stdoutbufIwE4syncEv"] = asm["__ZNSt3__211__stdoutbufIwE4syncEv"];
var __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"] = asm["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"];
var __ZNSt3__211__stdoutbufIwE6xsputnEPKwi = Module["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"] = asm["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"];
var __ZNSt3__211__stdoutbufIwE8overflowEj = Module["__ZNSt3__211__stdoutbufIwE8overflowEj"] = asm["__ZNSt3__211__stdoutbufIwE8overflowEj"];
var __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"] = asm["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"];
var __ZNSt3__211__stdoutbufIwED0Ev = Module["__ZNSt3__211__stdoutbufIwED0Ev"] = asm["__ZNSt3__211__stdoutbufIwED0Ev"];
var __ZNSt3__211char_traitsIcE11eq_int_typeEii = Module["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = asm["__ZNSt3__211char_traitsIcE11eq_int_typeEii"];
var __ZNSt3__211char_traitsIcE11to_int_typeEc = Module["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = asm["__ZNSt3__211char_traitsIcE11to_int_typeEc"];
var __ZNSt3__211char_traitsIcE12to_char_typeEi = Module["__ZNSt3__211char_traitsIcE12to_char_typeEi"] = asm["__ZNSt3__211char_traitsIcE12to_char_typeEi"];
var __ZNSt3__211char_traitsIcE2eqEcc = Module["__ZNSt3__211char_traitsIcE2eqEcc"] = asm["__ZNSt3__211char_traitsIcE2eqEcc"];
var __ZNSt3__211char_traitsIcE3eofEv = Module["__ZNSt3__211char_traitsIcE3eofEv"] = asm["__ZNSt3__211char_traitsIcE3eofEv"];
var __ZNSt3__211char_traitsIcE4copyEPcPKcj = Module["__ZNSt3__211char_traitsIcE4copyEPcPKcj"] = asm["__ZNSt3__211char_traitsIcE4copyEPcPKcj"];
var __ZNSt3__211char_traitsIcE4findEPKcjRS2_ = Module["__ZNSt3__211char_traitsIcE4findEPKcjRS2_"] = asm["__ZNSt3__211char_traitsIcE4findEPKcjRS2_"];
var __ZNSt3__211char_traitsIcE4moveEPcPKcj = Module["__ZNSt3__211char_traitsIcE4moveEPcPKcj"] = asm["__ZNSt3__211char_traitsIcE4moveEPcPKcj"];
var __ZNSt3__211char_traitsIcE6assignEPcjc = Module["__ZNSt3__211char_traitsIcE6assignEPcjc"] = asm["__ZNSt3__211char_traitsIcE6assignEPcjc"];
var __ZNSt3__211char_traitsIcE6assignERcRKc = Module["__ZNSt3__211char_traitsIcE6assignERcRKc"] = asm["__ZNSt3__211char_traitsIcE6assignERcRKc"];
var __ZNSt3__211char_traitsIcE6lengthEPKc = Module["__ZNSt3__211char_traitsIcE6lengthEPKc"] = asm["__ZNSt3__211char_traitsIcE6lengthEPKc"];
var __ZNSt3__211char_traitsIcE7compareEPKcS3_j = Module["__ZNSt3__211char_traitsIcE7compareEPKcS3_j"] = asm["__ZNSt3__211char_traitsIcE7compareEPKcS3_j"];
var __ZNSt3__211char_traitsIcE7not_eofEi = Module["__ZNSt3__211char_traitsIcE7not_eofEi"] = asm["__ZNSt3__211char_traitsIcE7not_eofEi"];
var __ZNSt3__211char_traitsIwE11eq_int_typeEjj = Module["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = asm["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"];
var __ZNSt3__211char_traitsIwE11to_int_typeEw = Module["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = asm["__ZNSt3__211char_traitsIwE11to_int_typeEw"];
var __ZNSt3__211char_traitsIwE12to_char_typeEj = Module["__ZNSt3__211char_traitsIwE12to_char_typeEj"] = asm["__ZNSt3__211char_traitsIwE12to_char_typeEj"];
var __ZNSt3__211char_traitsIwE2eqEww = Module["__ZNSt3__211char_traitsIwE2eqEww"] = asm["__ZNSt3__211char_traitsIwE2eqEww"];
var __ZNSt3__211char_traitsIwE3eofEv = Module["__ZNSt3__211char_traitsIwE3eofEv"] = asm["__ZNSt3__211char_traitsIwE3eofEv"];
var __ZNSt3__211char_traitsIwE4copyEPwPKwj = Module["__ZNSt3__211char_traitsIwE4copyEPwPKwj"] = asm["__ZNSt3__211char_traitsIwE4copyEPwPKwj"];
var __ZNSt3__211char_traitsIwE4findEPKwjRS2_ = Module["__ZNSt3__211char_traitsIwE4findEPKwjRS2_"] = asm["__ZNSt3__211char_traitsIwE4findEPKwjRS2_"];
var __ZNSt3__211char_traitsIwE4moveEPwPKwj = Module["__ZNSt3__211char_traitsIwE4moveEPwPKwj"] = asm["__ZNSt3__211char_traitsIwE4moveEPwPKwj"];
var __ZNSt3__211char_traitsIwE6assignEPwjw = Module["__ZNSt3__211char_traitsIwE6assignEPwjw"] = asm["__ZNSt3__211char_traitsIwE6assignEPwjw"];
var __ZNSt3__211char_traitsIwE6assignERwRKw = Module["__ZNSt3__211char_traitsIwE6assignERwRKw"] = asm["__ZNSt3__211char_traitsIwE6assignERwRKw"];
var __ZNSt3__211char_traitsIwE6lengthEPKw = Module["__ZNSt3__211char_traitsIwE6lengthEPKw"] = asm["__ZNSt3__211char_traitsIwE6lengthEPKw"];
var __ZNSt3__211char_traitsIwE7compareEPKwS3_j = Module["__ZNSt3__211char_traitsIwE7compareEPKwS3_j"] = asm["__ZNSt3__211char_traitsIwE7compareEPKwS3_j"];
var __ZNSt3__211char_traitsIwE7not_eofEj = Module["__ZNSt3__211char_traitsIwE7not_eofEj"] = asm["__ZNSt3__211char_traitsIwE7not_eofEj"];
var __ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE = Module["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"] = asm["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"];
var __ZNSt3__211regex_errorD0Ev = Module["__ZNSt3__211regex_errorD0Ev"] = asm["__ZNSt3__211regex_errorD0Ev"];
var __ZNSt3__211regex_errorD2Ev = Module["__ZNSt3__211regex_errorD2Ev"] = asm["__ZNSt3__211regex_errorD2Ev"];
var __ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE = Module["__ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"] = asm["__ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"];
var __ZNSt3__211timed_mutex4lockEv = Module["__ZNSt3__211timed_mutex4lockEv"] = asm["__ZNSt3__211timed_mutex4lockEv"];
var __ZNSt3__211timed_mutex6unlockEv = Module["__ZNSt3__211timed_mutex6unlockEv"] = asm["__ZNSt3__211timed_mutex6unlockEv"];
var __ZNSt3__211timed_mutex8try_lockEv = Module["__ZNSt3__211timed_mutex8try_lockEv"] = asm["__ZNSt3__211timed_mutex8try_lockEv"];
var __ZNSt3__211timed_mutexC2Ev = Module["__ZNSt3__211timed_mutexC2Ev"] = asm["__ZNSt3__211timed_mutexC2Ev"];
var __ZNSt3__211timed_mutexD2Ev = Module["__ZNSt3__211timed_mutexD2Ev"] = asm["__ZNSt3__211timed_mutexD2Ev"];
var __ZNSt3__211unique_lockINS_5mutexEE6unlockEv = Module["__ZNSt3__211unique_lockINS_5mutexEE6unlockEv"] = asm["__ZNSt3__211unique_lockINS_5mutexEE6unlockEv"];
var __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji = Module["__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"] = asm["__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji"];
var __ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc = Module["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"] = asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"];
var __ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc = Module["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"] = asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"];
var __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_ = Module["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"] = asm["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"];
var __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212_GLOBAL__N_113do_strerror_rEi = Module["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"] = asm["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFdPKcPPcEEET_RKS7_RKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFdPKcPPcEEET_RKS7_RKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFdPKcPPcEEET_RKS7_RKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFdPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFdPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFdPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFePKcPPcEEET_RKS7_RKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFePKcPPcEEET_RKS7_RKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFePKcPPcEEET_RKS7_RKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFePKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFePKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFePKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFfPKcPPcEEET_RKS7_RKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFfPKcPPcEEET_RKS7_RKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFfPKcPPcEEET_RKS7_RKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFfPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_ = Module["__ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFfPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"] = asm["__ZNSt3__212_GLOBAL__N_115as_float_helperIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFfPKwPPwEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFlPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFlPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFlPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFmPKcPPciEEET_RKS7_RKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFmPKcPPciEEET_RKS7_RKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFmPKcPPciEEET_RKS7_RKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFmPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFmPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFmPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFxPKcPPciEEET_RKS7_RKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFxPKcPPciEEET_RKS7_RKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFxPKcPPciEEET_RKS7_RKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFxPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFxPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFxPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFyPKcPPciEEET_RKS7_RKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFyPKcPPciEEET_RKS7_RKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFyPKcPPciEEET_RKS7_RKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFyPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_ = Module["__ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFyPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"] = asm["__ZNSt3__212_GLOBAL__N_117as_integer_helperIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFyPKwPPwiEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_PjiT1_"];
var __ZNSt3__212_GLOBAL__N_121__throw_runtime_errorERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212_GLOBAL__N_121__throw_runtime_errorERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212_GLOBAL__N_121__throw_runtime_errorERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212_GLOBAL__N_13mutEv = Module["__ZNSt3__212_GLOBAL__N_13mutEv"] = asm["__ZNSt3__212_GLOBAL__N_13mutEv"];
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
var __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"] = asm["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"];
var __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"] = asm["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"];
var __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE = Module["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"] = asm["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"];
var __ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj = Module["__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"] = asm["__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEeEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEeEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEeEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEfEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEfEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEfEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEjEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEjEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEjEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczElEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczElEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczElEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEmEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEmEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEmEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczExEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczExEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczExEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEyEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEyEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEyEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEdEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEdEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEdEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEeEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEeEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEeEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEfEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEfEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEfEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEiEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEiEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEiEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEjEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEjEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEjEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzElEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzElEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzElEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEmEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEmEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEmEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzExEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzExEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzExEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEyEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEyEET_T0_SD_PKNSD_10value_typeET1_"] = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEyEET_T0_SD_PKNSD_10value_typeET1_"];
var __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_ = Module["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"] = asm["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"];
var __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_ = Module["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"] = asm["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"];
var __ZNSt3__212__do_messageD0Ev = Module["__ZNSt3__212__do_messageD0Ev"] = asm["__ZNSt3__212__do_messageD0Ev"];
var __ZNSt3__212__do_nothingEPv = Module["__ZNSt3__212__do_nothingEPv"] = asm["__ZNSt3__212__do_nothingEPv"];
var __ZNSt3__212__get_sp_mutEPKv = Module["__ZNSt3__212__get_sp_mutEPKv"] = asm["__ZNSt3__212__get_sp_mutEPKv"];
var __ZNSt3__212__next_primeEj = Module["__ZNSt3__212__next_primeEj"] = asm["__ZNSt3__212__next_primeEj"];
var __ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_ = Module["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_"] = asm["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_"];
var __ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_ = Module["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_"] = asm["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_"];
var __ZNSt3__212__rs_defaultC2ERKS0_ = Module["__ZNSt3__212__rs_defaultC2ERKS0_"] = asm["__ZNSt3__212__rs_defaultC2ERKS0_"];
var __ZNSt3__212__rs_defaultC2Ev = Module["__ZNSt3__212__rs_defaultC2Ev"] = asm["__ZNSt3__212__rs_defaultC2Ev"];
var __ZNSt3__212__rs_defaultD2Ev = Module["__ZNSt3__212__rs_defaultD2Ev"] = asm["__ZNSt3__212__rs_defaultD2Ev"];
var __ZNSt3__212__rs_defaultclEv = Module["__ZNSt3__212__rs_defaultclEv"] = asm["__ZNSt3__212__rs_defaultclEv"];
var __ZNSt3__212bad_weak_ptrD0Ev = Module["__ZNSt3__212bad_weak_ptrD0Ev"] = asm["__ZNSt3__212bad_weak_ptrD0Ev"];
var __ZNSt3__212bad_weak_ptrD2Ev = Module["__ZNSt3__212bad_weak_ptrD2Ev"] = asm["__ZNSt3__212bad_weak_ptrD2Ev"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13shrink_to_fitEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13shrink_to_fitEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13shrink_to_fitEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4swapERS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4swapERS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4swapERS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEES9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEES9_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEES9_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendENS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendENS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendENS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_jj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_jj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_jj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignENS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignENS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignENS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEOS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEOS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEOS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_jj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_jj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_jj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjNS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjNS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjNS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_jj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_jj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_jj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPcEEE4typeENSB_IS8_EESA_SA_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPcEEE4typeENSB_IS8_EESA_SA_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPcEEE4typeENSB_IS8_EESA_SA_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_NS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_NS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_NS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_RKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_RKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_RKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_j = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_j"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_j"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_St16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_St16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_St16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_jc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_jc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_jc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjNS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjNS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjNS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_jj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_jj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_jj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjjc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjjc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceIPKcEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceIPKcEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceIPKcEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EERKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EERKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EERKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_RKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_RKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcRKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcRKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcjRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcjRKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcjRKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jRKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jRKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcERKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcERKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcERKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ejc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ejc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ejc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EjcRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EjcRKS4_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EjcRKS4_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLENS_17basic_string_viewIcS2_EE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLENS_17basic_string_viewIcS2_EE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLENS_17basic_string_viewIcS2_EE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLESt16initializer_listIcE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLESt16initializer_listIcE"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLESt16initializer_listIcE"];
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc"] = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13shrink_to_fitEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13shrink_to_fitEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13shrink_to_fitEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4swapERS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4swapERS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4swapERS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEES9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEES9_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEES9_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEjj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEjj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEjj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwjj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwjj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwjj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendENS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendENS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendENS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_jj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_jj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_jj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignENS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignENS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignENS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEOS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEOS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEOS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_jj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_jj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_jj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjNS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjNS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjNS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_jj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_jj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_jj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertIPKwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPwEEE4typeENSB_IS8_EESA_SA_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertIPKwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPwEEE4typeENSB_IS8_EESA_SA_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertIPKwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPwEEE4typeENSB_IS8_EESA_SA_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_NS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_NS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_NS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_RKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_RKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_RKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_j = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_j"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_j"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_St16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_St16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_St16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_jw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_jw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_jw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjNS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjNS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjNS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_jj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_jj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_jj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjjw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjjw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjjw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceIPKwEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceIPKwEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceIPKwEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EERKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EERKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EERKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_RKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_RKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_RKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwRKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwRKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwjRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwjRKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwjRKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jRKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jRKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jjRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jjRKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jjRKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwERKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwERKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwERKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ejw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ejw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ejw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EjwRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EjwRKS4_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EjwRKS4_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLENS_17basic_string_viewIwS2_EE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLENS_17basic_string_viewIwS2_EE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLENS_17basic_string_viewIwS2_EE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEPKw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEPKw"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLERKS5_"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLERKS5_"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLESt16initializer_listIwE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLESt16initializer_listIwE"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLESt16initializer_listIwE"];
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEw"] = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEw"];
var __ZNSt3__212ctype_bynameIcEC2EPKcj = Module["__ZNSt3__212ctype_bynameIcEC2EPKcj"] = asm["__ZNSt3__212ctype_bynameIcEC2EPKcj"];
var __ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__212ctype_bynameIcED0Ev = Module["__ZNSt3__212ctype_bynameIcED0Ev"] = asm["__ZNSt3__212ctype_bynameIcED0Ev"];
var __ZNSt3__212ctype_bynameIcED2Ev = Module["__ZNSt3__212ctype_bynameIcED2Ev"] = asm["__ZNSt3__212ctype_bynameIcED2Ev"];
var __ZNSt3__212ctype_bynameIwEC2EPKcj = Module["__ZNSt3__212ctype_bynameIwEC2EPKcj"] = asm["__ZNSt3__212ctype_bynameIwEC2EPKcj"];
var __ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__212ctype_bynameIwED0Ev = Module["__ZNSt3__212ctype_bynameIwED0Ev"] = asm["__ZNSt3__212ctype_bynameIwED0Ev"];
var __ZNSt3__212ctype_bynameIwED2Ev = Module["__ZNSt3__212ctype_bynameIwED2Ev"] = asm["__ZNSt3__212ctype_bynameIwED2Ev"];
var __ZNSt3__212future_errorC2ENS_10error_codeE = Module["__ZNSt3__212future_errorC2ENS_10error_codeE"] = asm["__ZNSt3__212future_errorC2ENS_10error_codeE"];
var __ZNSt3__212future_errorC2ERKS0_ = Module["__ZNSt3__212future_errorC2ERKS0_"] = asm["__ZNSt3__212future_errorC2ERKS0_"];
var __ZNSt3__212future_errorD0Ev = Module["__ZNSt3__212future_errorD0Ev"] = asm["__ZNSt3__212future_errorD0Ev"];
var __ZNSt3__212future_errorD2Ev = Module["__ZNSt3__212future_errorD2Ev"] = asm["__ZNSt3__212future_errorD2Ev"];
var __ZNSt3__212strstreambuf3strEv = Module["__ZNSt3__212strstreambuf3strEv"] = asm["__ZNSt3__212strstreambuf3strEv"];
var __ZNSt3__212strstreambuf4swapERS0_ = Module["__ZNSt3__212strstreambuf4swapERS0_"] = asm["__ZNSt3__212strstreambuf4swapERS0_"];
var __ZNSt3__212strstreambuf6__initEPciS1_ = Module["__ZNSt3__212strstreambuf6__initEPciS1_"] = asm["__ZNSt3__212strstreambuf6__initEPciS1_"];
var __ZNSt3__212strstreambuf6freezeEb = Module["__ZNSt3__212strstreambuf6freezeEb"] = asm["__ZNSt3__212strstreambuf6freezeEb"];
var __ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj"] = asm["__ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj"];
var __ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj"] = asm["__ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj"];
var __ZNSt3__212strstreambuf8overflowEi = Module["__ZNSt3__212strstreambuf8overflowEi"] = asm["__ZNSt3__212strstreambuf8overflowEi"];
var __ZNSt3__212strstreambuf9pbackfailEi = Module["__ZNSt3__212strstreambuf9pbackfailEi"] = asm["__ZNSt3__212strstreambuf9pbackfailEi"];
var __ZNSt3__212strstreambuf9underflowEv = Module["__ZNSt3__212strstreambuf9underflowEv"] = asm["__ZNSt3__212strstreambuf9underflowEv"];
var __ZNSt3__212strstreambufC2EPFPvjEPFvS1_E = Module["__ZNSt3__212strstreambufC2EPFPvjEPFvS1_E"] = asm["__ZNSt3__212strstreambufC2EPFPvjEPFvS1_E"];
var __ZNSt3__212strstreambufC2EPKai = Module["__ZNSt3__212strstreambufC2EPKai"] = asm["__ZNSt3__212strstreambufC2EPKai"];
var __ZNSt3__212strstreambufC2EPKci = Module["__ZNSt3__212strstreambufC2EPKci"] = asm["__ZNSt3__212strstreambufC2EPKci"];
var __ZNSt3__212strstreambufC2EPKhi = Module["__ZNSt3__212strstreambufC2EPKhi"] = asm["__ZNSt3__212strstreambufC2EPKhi"];
var __ZNSt3__212strstreambufC2EPaiS1_ = Module["__ZNSt3__212strstreambufC2EPaiS1_"] = asm["__ZNSt3__212strstreambufC2EPaiS1_"];
var __ZNSt3__212strstreambufC2EPciS1_ = Module["__ZNSt3__212strstreambufC2EPciS1_"] = asm["__ZNSt3__212strstreambufC2EPciS1_"];
var __ZNSt3__212strstreambufC2EPhiS1_ = Module["__ZNSt3__212strstreambufC2EPhiS1_"] = asm["__ZNSt3__212strstreambufC2EPhiS1_"];
var __ZNSt3__212strstreambufC2Ei = Module["__ZNSt3__212strstreambufC2Ei"] = asm["__ZNSt3__212strstreambufC2Ei"];
var __ZNSt3__212strstreambufD0Ev = Module["__ZNSt3__212strstreambufD0Ev"] = asm["__ZNSt3__212strstreambufD0Ev"];
var __ZNSt3__212strstreambufD2Ev = Module["__ZNSt3__212strstreambufD2Ev"] = asm["__ZNSt3__212strstreambufD2Ev"];
var __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212system_errorC2ENS_10error_codeE = Module["__ZNSt3__212system_errorC2ENS_10error_codeE"] = asm["__ZNSt3__212system_errorC2ENS_10error_codeE"];
var __ZNSt3__212system_errorC2ENS_10error_codeEPKc = Module["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"] = asm["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"];
var __ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryE = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryE"] = asm["__ZNSt3__212system_errorC2EiRKNS_14error_categoryE"];
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc"] = asm["__ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc"];
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__212system_errorD0Ev = Module["__ZNSt3__212system_errorD0Ev"] = asm["__ZNSt3__212system_errorD0Ev"];
var __ZNSt3__212system_errorD2Ev = Module["__ZNSt3__212system_errorD2Ev"] = asm["__ZNSt3__212system_errorD2Ev"];
var __ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"] = asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"];
var __ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"] = asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"];
var __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_"] = asm["__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_"];
var __ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_ = Module["__ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_"] = asm["__ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_"];
var __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev = Module["__ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev"] = asm["__ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev"];
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"] = asm["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"];
var __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev = Module["__ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev"] = asm["__ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev"];
var __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev = Module["__ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev"] = asm["__ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev"];
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"] = asm["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"];
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = asm["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPci = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPci"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPci"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPcic = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPcic"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPcic"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERc"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERc"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4swapERS3_"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4swapERS3_"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEii = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEii"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEii"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPci = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPci"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPci"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPci = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPci"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPci"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EOS3_ = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EOS3_"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EOS3_"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EOS3_ = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EOS3_"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EOS3_"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEaSEOS3_ = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEaSEOS3_"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEaSEOS3_"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_8ios_baseES5_E = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_8ios_baseES5_E"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_8ios_baseES5_E"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_9basic_iosIcS2_EES6_E = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_9basic_iosIcS2_EES6_E"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_9basic_iosIcS2_EES6_E"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRS3_S4_E = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRS3_S4_E"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRS3_S4_E"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx"];
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy"] = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwi"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwi"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwiw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwiw"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwiw"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERw"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERw"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwi"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwi"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4swapERS3_ = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4swapERS3_"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4swapERS3_"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreEij = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreEij"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreEij"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwi"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwi"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwiw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwiw"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwiw"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwi"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwi"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EOS3_ = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EOS3_"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EOS3_"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EOS3_ = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EOS3_"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EOS3_"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEaSEOS3_ = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEaSEOS3_"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEaSEOS3_"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_8ios_baseES5_E = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_8ios_baseES5_E"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_8ios_baseES5_E"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_9basic_iosIwS2_EES6_E = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_9basic_iosIwS2_EES6_E"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_9basic_iosIwS2_EES6_E"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRS3_S4_E = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRS3_S4_E"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRS3_S4_E"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx"];
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy"] = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE4swapERS3_"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE4swapERS3_"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpENS_4fposI11__mbstate_tEE"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpENS_4fposI11__mbstate_tEE"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpExNS_8ios_base7seekdirE"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpExNS_8ios_base7seekdirE"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5tellpEv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5tellpEv"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5tellpEv"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EOS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EOS3_"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EOS3_"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EOS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EOS3_"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EOS3_"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEaSEOS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEaSEOS3_"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEaSEOS3_"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_8ios_baseES5_E = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_8ios_baseES5_E"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_8ios_baseES5_E"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_9basic_iosIcS2_EES6_E = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_9basic_iosIcS2_EES6_E"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_9basic_iosIcS2_EES6_E"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx"];
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy"] = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE4swapERS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE4swapERS3_"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE4swapERS3_"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpENS_4fposI11__mbstate_tEE"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpENS_4fposI11__mbstate_tEE"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpExNS_8ios_base7seekdirE"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpExNS_8ios_base7seekdirE"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5tellpEv = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5tellpEv"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5tellpEv"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwi = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwi"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwi"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EOS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EOS3_"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EOS3_"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EOS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EOS3_"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EOS3_"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEaSEOS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEaSEOS3_"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEaSEOS3_"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_8ios_baseES5_E = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_8ios_baseES5_E"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_8ios_baseES5_E"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_9basic_iosIwS2_EES6_E = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_9basic_iosIwS2_EES6_E"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_9basic_iosIwS2_EES6_E"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRS3_S4_E = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRS3_S4_E"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRS3_S4_E"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx"];
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy"] = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy"];
var __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__213random_deviceD2Ev = Module["__ZNSt3__213random_deviceD2Ev"] = asm["__ZNSt3__213random_deviceD2Ev"];
var __ZNSt3__213random_deviceclEv = Module["__ZNSt3__213random_deviceclEv"] = asm["__ZNSt3__213random_deviceclEv"];
var __ZNSt3__213shared_futureIvED2Ev = Module["__ZNSt3__213shared_futureIvED2Ev"] = asm["__ZNSt3__213shared_futureIvED2Ev"];
var __ZNSt3__213shared_futureIvEaSERKS1_ = Module["__ZNSt3__213shared_futureIvEaSERKS1_"] = asm["__ZNSt3__213shared_futureIvEaSERKS1_"];
var __ZNSt3__214__codecvt_utf8IDiED0Ev = Module["__ZNSt3__214__codecvt_utf8IDiED0Ev"] = asm["__ZNSt3__214__codecvt_utf8IDiED0Ev"];
var __ZNSt3__214__codecvt_utf8IDsED0Ev = Module["__ZNSt3__214__codecvt_utf8IDsED0Ev"] = asm["__ZNSt3__214__codecvt_utf8IDsED0Ev"];
var __ZNSt3__214__codecvt_utf8IwED0Ev = Module["__ZNSt3__214__codecvt_utf8IwED0Ev"] = asm["__ZNSt3__214__codecvt_utf8IwED0Ev"];
var __ZNSt3__214__get_const_dbEv = Module["__ZNSt3__214__get_const_dbEv"] = asm["__ZNSt3__214__get_const_dbEv"];
var __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = Module["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = asm["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"];
var __ZNSt3__214__num_put_base12__format_intEPcPKcbj = Module["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = asm["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"];
var __ZNSt3__214__num_put_base14__format_floatEPcPKcj = Module["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = asm["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"];
var __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = Module["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = asm["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"];
var __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = asm["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"];
var __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = asm["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"];
var __ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_ = Module["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_"] = asm["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_"];
var __ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_ = Module["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_"] = asm["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_"];
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"];
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"];
var __ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb"] = asm["__ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb"];
var __ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb"] = asm["__ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb"];
var __ZNSt3__214__shared_count12__add_sharedEv = Module["__ZNSt3__214__shared_count12__add_sharedEv"] = asm["__ZNSt3__214__shared_count12__add_sharedEv"];
var __ZNSt3__214__shared_count16__release_sharedEv = Module["__ZNSt3__214__shared_count16__release_sharedEv"] = asm["__ZNSt3__214__shared_count16__release_sharedEv"];
var __ZNSt3__214__shared_countD0Ev = Module["__ZNSt3__214__shared_countD0Ev"] = asm["__ZNSt3__214__shared_countD0Ev"];
var __ZNSt3__214__shared_countD2Ev = Module["__ZNSt3__214__shared_countD2Ev"] = asm["__ZNSt3__214__shared_countD2Ev"];
var __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_ = Module["__ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_"] = asm["__ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_"];
var __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev = Module["__ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev"] = asm["__ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev"];
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EjjS9_ = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EjjS9_"] = asm["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EjjS9_"];
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev"] = asm["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev"];
var __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_ = Module["__ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_"] = asm["__ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_"];
var __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev = Module["__ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev"] = asm["__ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev"];
var __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_ = Module["__ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_"] = asm["__ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_"];
var __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev = Module["__ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev"] = asm["__ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev"];
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EjjS5_ = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EjjS5_"] = asm["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EjjS5_"];
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev"] = asm["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev"];
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"];
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_ = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"] = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"];
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEE4swapERS3_"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEE4swapERS3_"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EOS3_ = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EOS3_"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EOS3_"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EOS3_ = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EOS3_"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EOS3_"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"];
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEaSEOS3_ = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEaSEOS3_"] = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEaSEOS3_"];
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2EPKcj = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2EPKcj"] = asm["__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2EPKcj"];
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev"] = asm["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev"];
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev"] = asm["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev"];
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2EPKcj = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2EPKcj"] = asm["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2EPKcj"];
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev"] = asm["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev"];
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev"] = asm["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev"];
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2EPKcj = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2EPKcj"] = asm["__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2EPKcj"];
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev"] = asm["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev"];
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev"] = asm["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev"];
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2EPKcj = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2EPKcj"] = asm["__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2EPKcj"];
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev"] = asm["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev"];
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev"] = asm["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev"];
var __ZNSt3__214collate_bynameIcEC2EPKcj = Module["__ZNSt3__214collate_bynameIcEC2EPKcj"] = asm["__ZNSt3__214collate_bynameIcEC2EPKcj"];
var __ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214collate_bynameIcED0Ev = Module["__ZNSt3__214collate_bynameIcED0Ev"] = asm["__ZNSt3__214collate_bynameIcED0Ev"];
var __ZNSt3__214collate_bynameIcED2Ev = Module["__ZNSt3__214collate_bynameIcED2Ev"] = asm["__ZNSt3__214collate_bynameIcED2Ev"];
var __ZNSt3__214collate_bynameIwEC2EPKcj = Module["__ZNSt3__214collate_bynameIwEC2EPKcj"] = asm["__ZNSt3__214collate_bynameIwEC2EPKcj"];
var __ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__214collate_bynameIwED0Ev = Module["__ZNSt3__214collate_bynameIwED0Ev"] = asm["__ZNSt3__214collate_bynameIwED0Ev"];
var __ZNSt3__214collate_bynameIwED2Ev = Module["__ZNSt3__214collate_bynameIwED2Ev"] = asm["__ZNSt3__214collate_bynameIwED2Ev"];
var __ZNSt3__214error_categoryD0Ev = Module["__ZNSt3__214error_categoryD0Ev"] = asm["__ZNSt3__214error_categoryD0Ev"];
var __ZNSt3__214error_categoryD2Ev = Module["__ZNSt3__214error_categoryD2Ev"] = asm["__ZNSt3__214error_categoryD2Ev"];
var __ZNSt3__215__codecvt_utf16IDiLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDiLb0EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IDiLb0EED0Ev"];
var __ZNSt3__215__codecvt_utf16IDiLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDiLb1EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IDiLb1EED0Ev"];
var __ZNSt3__215__codecvt_utf16IDsLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDsLb0EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IDsLb0EED0Ev"];
var __ZNSt3__215__codecvt_utf16IDsLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDsLb1EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IDsLb1EED0Ev"];
var __ZNSt3__215__codecvt_utf16IwLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IwLb0EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IwLb0EED0Ev"];
var __ZNSt3__215__codecvt_utf16IwLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IwLb1EED0Ev"] = asm["__ZNSt3__215__codecvt_utf16IwLb1EED0Ev"];
var __ZNSt3__215__get_classnameEPKcb = Module["__ZNSt3__215__get_classnameEPKcb"] = asm["__ZNSt3__215__get_classnameEPKcb"];
var __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = asm["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"];
var __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = asm["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"];
var __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = asm["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"];
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"];
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc"] = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc"];
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_406 = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_406"] = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_406"];
var __ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE = Module["__ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"] = asm["__ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"];
var __ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE = Module["__ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"] = asm["__ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"];
var __ZNSt3__215__thread_structC2Ev = Module["__ZNSt3__215__thread_structC2Ev"] = asm["__ZNSt3__215__thread_structC2Ev"];
var __ZNSt3__215__thread_structD2Ev = Module["__ZNSt3__215__thread_structD2Ev"] = asm["__ZNSt3__215__thread_structD2Ev"];
var __ZNSt3__215__time_get_tempIcEC2EPKc = Module["__ZNSt3__215__time_get_tempIcEC2EPKc"] = asm["__ZNSt3__215__time_get_tempIcEC2EPKc"];
var __ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__215__time_get_tempIcED0Ev = Module["__ZNSt3__215__time_get_tempIcED0Ev"] = asm["__ZNSt3__215__time_get_tempIcED0Ev"];
var __ZNSt3__215__time_get_tempIwEC2EPKc = Module["__ZNSt3__215__time_get_tempIwEC2EPKc"] = asm["__ZNSt3__215__time_get_tempIwEC2EPKc"];
var __ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__215__time_get_tempIwED0Ev = Module["__ZNSt3__215__time_get_tempIwED0Ev"] = asm["__ZNSt3__215__time_get_tempIwED0Ev"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6snextcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6snextcEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6snextcEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pubsetbufEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pubsetbufEPci"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pubsetbufEPci"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"];
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_"] = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setgEPwS4_S4_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setgEPwS4_S4_"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setgEPwS4_S4_"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setpEPwS4_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setpEPwS4_"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setpEPwS4_"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbumpEi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbumpEi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbumpEi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6snextcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6snextcEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6snextcEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8pubimbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8pubimbueERKNS_6localeE"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8pubimbueERKNS_6localeE"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pubsetbufEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pubsetbufEPwi"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pubsetbufEPwi"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"];
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_"] = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_"];
var __ZNSt3__215future_categoryEv = Module["__ZNSt3__215future_categoryEv"] = asm["__ZNSt3__215future_categoryEv"];
var __ZNSt3__215messages_bynameIcEC2EPKcj = Module["__ZNSt3__215messages_bynameIcEC2EPKcj"] = asm["__ZNSt3__215messages_bynameIcEC2EPKcj"];
var __ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215messages_bynameIcED0Ev = Module["__ZNSt3__215messages_bynameIcED0Ev"] = asm["__ZNSt3__215messages_bynameIcED0Ev"];
var __ZNSt3__215messages_bynameIcED2Ev = Module["__ZNSt3__215messages_bynameIcED2Ev"] = asm["__ZNSt3__215messages_bynameIcED2Ev"];
var __ZNSt3__215messages_bynameIwEC2EPKcj = Module["__ZNSt3__215messages_bynameIwEC2EPKcj"] = asm["__ZNSt3__215messages_bynameIwEC2EPKcj"];
var __ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215messages_bynameIwED0Ev = Module["__ZNSt3__215messages_bynameIwED0Ev"] = asm["__ZNSt3__215messages_bynameIwED0Ev"];
var __ZNSt3__215messages_bynameIwED2Ev = Module["__ZNSt3__215messages_bynameIwED2Ev"] = asm["__ZNSt3__215messages_bynameIwED2Ev"];
var __ZNSt3__215numpunct_bynameIcE6__initEPKc = Module["__ZNSt3__215numpunct_bynameIcE6__initEPKc"] = asm["__ZNSt3__215numpunct_bynameIcE6__initEPKc"];
var __ZNSt3__215numpunct_bynameIcEC2EPKcj = Module["__ZNSt3__215numpunct_bynameIcEC2EPKcj"] = asm["__ZNSt3__215numpunct_bynameIcEC2EPKcj"];
var __ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215numpunct_bynameIcED0Ev = Module["__ZNSt3__215numpunct_bynameIcED0Ev"] = asm["__ZNSt3__215numpunct_bynameIcED0Ev"];
var __ZNSt3__215numpunct_bynameIwE6__initEPKc = Module["__ZNSt3__215numpunct_bynameIwE6__initEPKc"] = asm["__ZNSt3__215numpunct_bynameIwE6__initEPKc"];
var __ZNSt3__215numpunct_bynameIwEC2EPKcj = Module["__ZNSt3__215numpunct_bynameIwEC2EPKcj"] = asm["__ZNSt3__215numpunct_bynameIwEC2EPKcj"];
var __ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215numpunct_bynameIwED0Ev = Module["__ZNSt3__215numpunct_bynameIwED0Ev"] = asm["__ZNSt3__215numpunct_bynameIwED0Ev"];
var __ZNSt3__215recursive_mutex4lockEv = Module["__ZNSt3__215recursive_mutex4lockEv"] = asm["__ZNSt3__215recursive_mutex4lockEv"];
var __ZNSt3__215recursive_mutex6unlockEv = Module["__ZNSt3__215recursive_mutex6unlockEv"] = asm["__ZNSt3__215recursive_mutex6unlockEv"];
var __ZNSt3__215recursive_mutex8try_lockEv = Module["__ZNSt3__215recursive_mutex8try_lockEv"] = asm["__ZNSt3__215recursive_mutex8try_lockEv"];
var __ZNSt3__215recursive_mutexC2Ev = Module["__ZNSt3__215recursive_mutexC2Ev"] = asm["__ZNSt3__215recursive_mutexC2Ev"];
var __ZNSt3__215recursive_mutexD2Ev = Module["__ZNSt3__215recursive_mutexD2Ev"] = asm["__ZNSt3__215recursive_mutexD2Ev"];
var __ZNSt3__215system_categoryEv = Module["__ZNSt3__215system_categoryEv"] = asm["__ZNSt3__215system_categoryEv"];
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"] = asm["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"];
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"] = asm["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"];
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"] = asm["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"];
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"] = asm["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"];
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"] = asm["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"];
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"] = asm["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"];
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"];
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = Module["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = asm["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"];
var __ZNSt3__216__narrow_to_utf8ILj16EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILj16EED0Ev"] = asm["__ZNSt3__216__narrow_to_utf8ILj16EED0Ev"];
var __ZNSt3__216__narrow_to_utf8ILj32EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"] = asm["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"];
var __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = asm["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"];
var __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = asm["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"];
var __ZNSt3__216generic_categoryEv = Module["__ZNSt3__216generic_categoryEv"] = asm["__ZNSt3__216generic_categoryEv"];
var __ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE"] = asm["__ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE"];
var __ZNSt3__217__assoc_sub_state12__make_readyEv = Module["__ZNSt3__217__assoc_sub_state12__make_readyEv"] = asm["__ZNSt3__217__assoc_sub_state12__make_readyEv"];
var __ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr = Module["__ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr"] = asm["__ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr"];
var __ZNSt3__217__assoc_sub_state16__on_zero_sharedEv = Module["__ZNSt3__217__assoc_sub_state16__on_zero_sharedEv"] = asm["__ZNSt3__217__assoc_sub_state16__on_zero_sharedEv"];
var __ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv = Module["__ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv"] = asm["__ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv"];
var __ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr = Module["__ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr"] = asm["__ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr"];
var __ZNSt3__217__assoc_sub_state4copyEv = Module["__ZNSt3__217__assoc_sub_state4copyEv"] = asm["__ZNSt3__217__assoc_sub_state4copyEv"];
var __ZNSt3__217__assoc_sub_state4waitEv = Module["__ZNSt3__217__assoc_sub_state4waitEv"] = asm["__ZNSt3__217__assoc_sub_state4waitEv"];
var __ZNSt3__217__assoc_sub_state9__executeEv = Module["__ZNSt3__217__assoc_sub_state9__executeEv"] = asm["__ZNSt3__217__assoc_sub_state9__executeEv"];
var __ZNSt3__217__assoc_sub_state9set_valueEv = Module["__ZNSt3__217__assoc_sub_state9set_valueEv"] = asm["__ZNSt3__217__assoc_sub_state9set_valueEv"];
var __ZNSt3__217__assoc_sub_stateD0Ev = Module["__ZNSt3__217__assoc_sub_stateD0Ev"] = asm["__ZNSt3__217__assoc_sub_stateD0Ev"];
var __ZNSt3__217__assoc_sub_stateD2Ev = Module["__ZNSt3__217__assoc_sub_stateD2Ev"] = asm["__ZNSt3__217__assoc_sub_stateD2Ev"];
var __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv = Module["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"] = asm["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"];
var __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = Module["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = asm["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"];
var __ZNSt3__217__widen_from_utf8ILj16EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILj16EED0Ev"] = asm["__ZNSt3__217__widen_from_utf8ILj16EED0Ev"];
var __ZNSt3__217__widen_from_utf8ILj32EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"] = asm["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"];
var __ZNSt3__217declare_reachableEPv = Module["__ZNSt3__217declare_reachableEPv"] = asm["__ZNSt3__217declare_reachableEPv"];
var __ZNSt3__217iostream_categoryEv = Module["__ZNSt3__217iostream_categoryEv"] = asm["__ZNSt3__217iostream_categoryEv"];
var __ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc"] = asm["__ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc"];
var __ZNSt3__217moneypunct_bynameIcLb0EEC2EPKcj = Module["__ZNSt3__217moneypunct_bynameIcLb0EEC2EPKcj"] = asm["__ZNSt3__217moneypunct_bynameIcLb0EEC2EPKcj"];
var __ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__217moneypunct_bynameIcLb0EED0Ev = Module["__ZNSt3__217moneypunct_bynameIcLb0EED0Ev"] = asm["__ZNSt3__217moneypunct_bynameIcLb0EED0Ev"];
var __ZNSt3__217moneypunct_bynameIcLb0EED2Ev = Module["__ZNSt3__217moneypunct_bynameIcLb0EED2Ev"] = asm["__ZNSt3__217moneypunct_bynameIcLb0EED2Ev"];
var __ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc"] = asm["__ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc"];
var __ZNSt3__217moneypunct_bynameIcLb1EEC2EPKcj = Module["__ZNSt3__217moneypunct_bynameIcLb1EEC2EPKcj"] = asm["__ZNSt3__217moneypunct_bynameIcLb1EEC2EPKcj"];
var __ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__217moneypunct_bynameIcLb1EED0Ev = Module["__ZNSt3__217moneypunct_bynameIcLb1EED0Ev"] = asm["__ZNSt3__217moneypunct_bynameIcLb1EED0Ev"];
var __ZNSt3__217moneypunct_bynameIcLb1EED2Ev = Module["__ZNSt3__217moneypunct_bynameIcLb1EED2Ev"] = asm["__ZNSt3__217moneypunct_bynameIcLb1EED2Ev"];
var __ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc"] = asm["__ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc"];
var __ZNSt3__217moneypunct_bynameIwLb0EEC2EPKcj = Module["__ZNSt3__217moneypunct_bynameIwLb0EEC2EPKcj"] = asm["__ZNSt3__217moneypunct_bynameIwLb0EEC2EPKcj"];
var __ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__217moneypunct_bynameIwLb0EED0Ev = Module["__ZNSt3__217moneypunct_bynameIwLb0EED0Ev"] = asm["__ZNSt3__217moneypunct_bynameIwLb0EED0Ev"];
var __ZNSt3__217moneypunct_bynameIwLb0EED2Ev = Module["__ZNSt3__217moneypunct_bynameIwLb0EED2Ev"] = asm["__ZNSt3__217moneypunct_bynameIwLb0EED2Ev"];
var __ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc"] = asm["__ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc"];
var __ZNSt3__217moneypunct_bynameIwLb1EEC2EPKcj = Module["__ZNSt3__217moneypunct_bynameIwLb1EEC2EPKcj"] = asm["__ZNSt3__217moneypunct_bynameIwLb1EEC2EPKcj"];
var __ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__217moneypunct_bynameIwLb1EED0Ev = Module["__ZNSt3__217moneypunct_bynameIwLb1EED0Ev"] = asm["__ZNSt3__217moneypunct_bynameIwLb1EED0Ev"];
var __ZNSt3__217moneypunct_bynameIwLb1EED2Ev = Module["__ZNSt3__217moneypunct_bynameIwLb1EED2Ev"] = asm["__ZNSt3__217moneypunct_bynameIwLb1EED2Ev"];
var __ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_ = Module["__ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_"] = asm["__ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_"];
var __ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_ = Module["__ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_"] = asm["__ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_"];
var __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_j = Module["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_j"] = asm["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_j"];
var __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEj = Module["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEj"] = asm["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEj"];
var __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_j = Module["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_j"] = asm["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_j"];
var __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEj = Module["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEj"] = asm["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEj"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_"];
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_"] = asm["__ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_"];
var __ZNSt3__218__libcpp_refstringC2EPKc = Module["__ZNSt3__218__libcpp_refstringC2EPKc"] = asm["__ZNSt3__218__libcpp_refstringC2EPKc"];
var __ZNSt3__218__libcpp_refstringC2ERKS0_ = Module["__ZNSt3__218__libcpp_refstringC2ERKS0_"] = asm["__ZNSt3__218__libcpp_refstringC2ERKS0_"];
var __ZNSt3__218__libcpp_refstringD2Ev = Module["__ZNSt3__218__libcpp_refstringD2Ev"] = asm["__ZNSt3__218__libcpp_refstringD2Ev"];
var __ZNSt3__218__libcpp_refstringaSERKS0_ = Module["__ZNSt3__218__libcpp_refstringaSERKS0_"] = asm["__ZNSt3__218__libcpp_refstringaSERKS0_"];
var __ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_ = Module["__ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_"] = asm["__ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_"];
var __ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_ = Module["__ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_"] = asm["__ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_"];
var __ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE = Module["__ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE"] = asm["__ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE"];
var __ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE = Module["__ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE"] = asm["__ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE"];
var __ZNSt3__218__time_get_storageIcEC2EPKc = Module["__ZNSt3__218__time_get_storageIcEC2EPKc"] = asm["__ZNSt3__218__time_get_storageIcEC2EPKc"];
var __ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE = Module["__ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE"] = asm["__ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE"];
var __ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE = Module["__ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE"] = asm["__ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE"];
var __ZNSt3__218__time_get_storageIwEC2EPKc = Module["__ZNSt3__218__time_get_storageIwEC2EPKc"] = asm["__ZNSt3__218__time_get_storageIwEC2EPKc"];
var __ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__218condition_variable10notify_allEv = Module["__ZNSt3__218condition_variable10notify_allEv"] = asm["__ZNSt3__218condition_variable10notify_allEv"];
var __ZNSt3__218condition_variable10notify_oneEv = Module["__ZNSt3__218condition_variable10notify_oneEv"] = asm["__ZNSt3__218condition_variable10notify_oneEv"];
var __ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE = Module["__ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE"] = asm["__ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE"];
var __ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE"] = asm["__ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE"];
var __ZNSt3__218condition_variableD2Ev = Module["__ZNSt3__218condition_variableD2Ev"] = asm["__ZNSt3__218condition_variableD2Ev"];
var __ZNSt3__218shared_timed_mutex11lock_sharedEv = Module["__ZNSt3__218shared_timed_mutex11lock_sharedEv"] = asm["__ZNSt3__218shared_timed_mutex11lock_sharedEv"];
var __ZNSt3__218shared_timed_mutex13unlock_sharedEv = Module["__ZNSt3__218shared_timed_mutex13unlock_sharedEv"] = asm["__ZNSt3__218shared_timed_mutex13unlock_sharedEv"];
var __ZNSt3__218shared_timed_mutex15try_lock_sharedEv = Module["__ZNSt3__218shared_timed_mutex15try_lock_sharedEv"] = asm["__ZNSt3__218shared_timed_mutex15try_lock_sharedEv"];
var __ZNSt3__218shared_timed_mutex4lockEv = Module["__ZNSt3__218shared_timed_mutex4lockEv"] = asm["__ZNSt3__218shared_timed_mutex4lockEv"];
var __ZNSt3__218shared_timed_mutex6unlockEv = Module["__ZNSt3__218shared_timed_mutex6unlockEv"] = asm["__ZNSt3__218shared_timed_mutex6unlockEv"];
var __ZNSt3__218shared_timed_mutex8try_lockEv = Module["__ZNSt3__218shared_timed_mutex8try_lockEv"] = asm["__ZNSt3__218shared_timed_mutex8try_lockEv"];
var __ZNSt3__218shared_timed_mutexC2Ev = Module["__ZNSt3__218shared_timed_mutexC2Ev"] = asm["__ZNSt3__218shared_timed_mutexC2Ev"];
var __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = asm["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
var __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = asm["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
var __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = asm["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
var __ZNSt3__219__iostream_categoryD0Ev = Module["__ZNSt3__219__iostream_categoryD0Ev"] = asm["__ZNSt3__219__iostream_categoryD0Ev"];
var __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = asm["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"];
var __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"] = asm["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"];
var __ZNSt3__219__shared_mutex_base11lock_sharedEv = Module["__ZNSt3__219__shared_mutex_base11lock_sharedEv"] = asm["__ZNSt3__219__shared_mutex_base11lock_sharedEv"];
var __ZNSt3__219__shared_mutex_base13unlock_sharedEv = Module["__ZNSt3__219__shared_mutex_base13unlock_sharedEv"] = asm["__ZNSt3__219__shared_mutex_base13unlock_sharedEv"];
var __ZNSt3__219__shared_mutex_base15try_lock_sharedEv = Module["__ZNSt3__219__shared_mutex_base15try_lock_sharedEv"] = asm["__ZNSt3__219__shared_mutex_base15try_lock_sharedEv"];
var __ZNSt3__219__shared_mutex_base4lockEv = Module["__ZNSt3__219__shared_mutex_base4lockEv"] = asm["__ZNSt3__219__shared_mutex_base4lockEv"];
var __ZNSt3__219__shared_mutex_base6unlockEv = Module["__ZNSt3__219__shared_mutex_base6unlockEv"] = asm["__ZNSt3__219__shared_mutex_base6unlockEv"];
var __ZNSt3__219__shared_mutex_base8try_lockEv = Module["__ZNSt3__219__shared_mutex_base8try_lockEv"] = asm["__ZNSt3__219__shared_mutex_base8try_lockEv"];
var __ZNSt3__219__shared_mutex_baseC2Ev = Module["__ZNSt3__219__shared_mutex_baseC2Ev"] = asm["__ZNSt3__219__shared_mutex_baseC2Ev"];
var __ZNSt3__219__shared_weak_count10__add_weakEv = Module["__ZNSt3__219__shared_weak_count10__add_weakEv"] = asm["__ZNSt3__219__shared_weak_count10__add_weakEv"];
var __ZNSt3__219__shared_weak_count12__add_sharedEv = Module["__ZNSt3__219__shared_weak_count12__add_sharedEv"] = asm["__ZNSt3__219__shared_weak_count12__add_sharedEv"];
var __ZNSt3__219__shared_weak_count14__release_weakEv = Module["__ZNSt3__219__shared_weak_count14__release_weakEv"] = asm["__ZNSt3__219__shared_weak_count14__release_weakEv"];
var __ZNSt3__219__shared_weak_count16__release_sharedEv = Module["__ZNSt3__219__shared_weak_count16__release_sharedEv"] = asm["__ZNSt3__219__shared_weak_count16__release_sharedEv"];
var __ZNSt3__219__shared_weak_count4lockEv = Module["__ZNSt3__219__shared_weak_count4lockEv"] = asm["__ZNSt3__219__shared_weak_count4lockEv"];
var __ZNSt3__219__shared_weak_countD0Ev = Module["__ZNSt3__219__shared_weak_countD0Ev"] = asm["__ZNSt3__219__shared_weak_countD0Ev"];
var __ZNSt3__219__thread_local_dataEv = Module["__ZNSt3__219__thread_local_dataEv"] = asm["__ZNSt3__219__thread_local_dataEv"];
var __ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE = Module["__ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"] = asm["__ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"];
var __ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE = Module["__ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"] = asm["__ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"];
var __ZNSt3__219__thread_struct_impC2Ev = Module["__ZNSt3__219__thread_struct_impC2Ev"] = asm["__ZNSt3__219__thread_struct_impC2Ev"];
var __ZNSt3__219__thread_struct_impD2Ev = Module["__ZNSt3__219__thread_struct_impD2Ev"] = asm["__ZNSt3__219__thread_struct_impD2Ev"];
var __ZNSt3__219declare_no_pointersEPcj = Module["__ZNSt3__219declare_no_pointersEPcj"] = asm["__ZNSt3__219declare_no_pointersEPcj"];
var __ZNSt3__220__codecvt_utf8_utf16IDiED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IDiED0Ev"] = asm["__ZNSt3__220__codecvt_utf8_utf16IDiED0Ev"];
var __ZNSt3__220__codecvt_utf8_utf16IDsED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IDsED0Ev"] = asm["__ZNSt3__220__codecvt_utf8_utf16IDsED0Ev"];
var __ZNSt3__220__codecvt_utf8_utf16IwED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IwED0Ev"] = asm["__ZNSt3__220__codecvt_utf8_utf16IwED0Ev"];
var __ZNSt3__220__get_collation_nameEPKc = Module["__ZNSt3__220__get_collation_nameEPKc"] = asm["__ZNSt3__220__get_collation_nameEPKc"];
var __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = asm["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"];
var __ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi"] = asm["__ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi"];
var __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = asm["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"];
var __ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi"] = asm["__ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi"];
var __ZNSt3__220__throw_system_errorEiPKc = Module["__ZNSt3__220__throw_system_errorEiPKc"] = asm["__ZNSt3__220__throw_system_errorEiPKc"];
var __ZNSt3__220__time_get_c_storageIcEC2Ev = Module["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = asm["__ZNSt3__220__time_get_c_storageIcEC2Ev"];
var __ZNSt3__220__time_get_c_storageIwEC2Ev = Module["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = asm["__ZNSt3__220__time_get_c_storageIwEC2Ev"];
var __ZNSt3__220__vector_base_commonILb1EEC2Ev = Module["__ZNSt3__220__vector_base_commonILb1EEC2Ev"] = asm["__ZNSt3__220__vector_base_commonILb1EEC2Ev"];
var __ZNSt3__221__murmur2_or_cityhashIjLj32EEclEPKvj = Module["__ZNSt3__221__murmur2_or_cityhashIjLj32EEclEPKvj"] = asm["__ZNSt3__221__murmur2_or_cityhashIjLj32EEclEPKvj"];
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_ = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_"] = asm["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_"];
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv"] = asm["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv"];
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev"] = asm["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev"];
var __ZNSt3__221__throw_runtime_errorEPKc = Module["__ZNSt3__221__throw_runtime_errorEPKc"] = asm["__ZNSt3__221__throw_runtime_errorEPKc"];
var __ZNSt3__221__undeclare_reachableEPv = Module["__ZNSt3__221__undeclare_reachableEPv"] = asm["__ZNSt3__221__undeclare_reachableEPv"];
var __ZNSt3__221recursive_timed_mutex4lockEv = Module["__ZNSt3__221recursive_timed_mutex4lockEv"] = asm["__ZNSt3__221recursive_timed_mutex4lockEv"];
var __ZNSt3__221recursive_timed_mutex6unlockEv = Module["__ZNSt3__221recursive_timed_mutex6unlockEv"] = asm["__ZNSt3__221recursive_timed_mutex6unlockEv"];
var __ZNSt3__221recursive_timed_mutex8try_lockEv = Module["__ZNSt3__221recursive_timed_mutex8try_lockEv"] = asm["__ZNSt3__221recursive_timed_mutex8try_lockEv"];
var __ZNSt3__221recursive_timed_mutexC2Ev = Module["__ZNSt3__221recursive_timed_mutexC2Ev"] = asm["__ZNSt3__221recursive_timed_mutexC2Ev"];
var __ZNSt3__221recursive_timed_mutexD2Ev = Module["__ZNSt3__221recursive_timed_mutexD2Ev"] = asm["__ZNSt3__221recursive_timed_mutexD2Ev"];
var __ZNSt3__221undeclare_no_pointersEPcj = Module["__ZNSt3__221undeclare_no_pointersEPcj"] = asm["__ZNSt3__221undeclare_no_pointersEPcj"];
var __ZNSt3__222__release_shared_countclEPNS_14__shared_countE = Module["__ZNSt3__222__release_shared_countclEPNS_14__shared_countE"] = asm["__ZNSt3__222__release_shared_countclEPNS_14__shared_countE"];
var __ZNSt3__223__future_error_categoryD0Ev = Module["__ZNSt3__223__future_error_categoryD0Ev"] = asm["__ZNSt3__223__future_error_categoryD0Ev"];
var __ZNSt3__223__system_error_categoryD0Ev = Module["__ZNSt3__223__system_error_categoryD0Ev"] = asm["__ZNSt3__223__system_error_categoryD0Ev"];
var __ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj = Module["__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj"] = asm["__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj"];
var __ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv = Module["__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv"] = asm["__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv"];
var __ZNSt3__224__generic_error_categoryD0Ev = Module["__ZNSt3__224__generic_error_categoryD0Ev"] = asm["__ZNSt3__224__generic_error_categoryD0Ev"];
var __ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2ERKS1_ = Module["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2ERKS1_"] = asm["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2ERKS1_"];
var __ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2Ev = Module["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2Ev"] = asm["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2Ev"];
var __ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impD2Ev = Module["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impD2Ev"] = asm["__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impD2Ev"];
var __ZNSt3__224__libcpp_debug_exceptionC2ERKNS_19__libcpp_debug_infoE = Module["__ZNSt3__224__libcpp_debug_exceptionC2ERKNS_19__libcpp_debug_infoE"] = asm["__ZNSt3__224__libcpp_debug_exceptionC2ERKNS_19__libcpp_debug_infoE"];
var __ZNSt3__224__libcpp_debug_exceptionC2ERKS0_ = Module["__ZNSt3__224__libcpp_debug_exceptionC2ERKS0_"] = asm["__ZNSt3__224__libcpp_debug_exceptionC2ERKS0_"];
var __ZNSt3__224__libcpp_debug_exceptionC2Ev = Module["__ZNSt3__224__libcpp_debug_exceptionC2Ev"] = asm["__ZNSt3__224__libcpp_debug_exceptionC2Ev"];
var __ZNSt3__224__libcpp_debug_exceptionD0Ev = Module["__ZNSt3__224__libcpp_debug_exceptionD0Ev"] = asm["__ZNSt3__224__libcpp_debug_exceptionD0Ev"];
var __ZNSt3__224__libcpp_debug_exceptionD2Ev = Module["__ZNSt3__224__libcpp_debug_exceptionD2Ev"] = asm["__ZNSt3__224__libcpp_debug_exceptionD2Ev"];
var __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = asm["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"];
var __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = asm["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"];
var __ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE"] = asm["__ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_"];
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_"] = asm["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_"];
var __ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE = Module["__ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE"] = asm["__ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE"];
var __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = asm["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"];
var __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = asm["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"];
var __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = asm["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"];
var __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = asm["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"];
var __ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE = Module["__ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE"] = asm["__ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE"];
var __ZNSt3__229__libcpp_throw_debug_functionERKNS_19__libcpp_debug_infoE = Module["__ZNSt3__229__libcpp_throw_debug_functionERKNS_19__libcpp_debug_infoE"] = asm["__ZNSt3__229__libcpp_throw_debug_functionERKNS_19__libcpp_debug_infoE"];
var __ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj = Module["__ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"] = asm["__ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"];
var __ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj = Module["__ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"] = asm["__ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"];
var __ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj = Module["__ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"] = asm["__ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"];
var __ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj = Module["__ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"] = asm["__ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"];
var __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji = Module["__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"] = asm["__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"];
var __ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji = Module["__ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"] = asm["__ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"];
var __ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji = Module["__ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"] = asm["__ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"];
var __ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji = Module["__ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"] = asm["__ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"];
var __ZNSt3__25alignEjjRPvRj = Module["__ZNSt3__25alignEjjRPvRj"] = asm["__ZNSt3__25alignEjjRPvRj"];
var __ZNSt3__25ctypeIcE13classic_tableEv = Module["__ZNSt3__25ctypeIcE13classic_tableEv"] = asm["__ZNSt3__25ctypeIcE13classic_tableEv"];
var __ZNSt3__25ctypeIcE21__classic_lower_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = asm["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"];
var __ZNSt3__25ctypeIcE21__classic_upper_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = asm["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"];
var __ZNSt3__25ctypeIcEC2EPKtbj = Module["__ZNSt3__25ctypeIcEC2EPKtbj"] = asm["__ZNSt3__25ctypeIcEC2EPKtbj"];
var __ZNSt3__25ctypeIcED0Ev = Module["__ZNSt3__25ctypeIcED0Ev"] = asm["__ZNSt3__25ctypeIcED0Ev"];
var __ZNSt3__25ctypeIcED2Ev = Module["__ZNSt3__25ctypeIcED2Ev"] = asm["__ZNSt3__25ctypeIcED2Ev"];
var __ZNSt3__25ctypeIwED0Ev = Module["__ZNSt3__25ctypeIwED0Ev"] = asm["__ZNSt3__25ctypeIwED0Ev"];
var __ZNSt3__25mutex4lockEv = Module["__ZNSt3__25mutex4lockEv"] = asm["__ZNSt3__25mutex4lockEv"];
var __ZNSt3__25mutex6unlockEv = Module["__ZNSt3__25mutex6unlockEv"] = asm["__ZNSt3__25mutex6unlockEv"];
var __ZNSt3__25mutex8try_lockEv = Module["__ZNSt3__25mutex8try_lockEv"] = asm["__ZNSt3__25mutex8try_lockEv"];
var __ZNSt3__25mutexD2Ev = Module["__ZNSt3__25mutexD2Ev"] = asm["__ZNSt3__25mutexD2Ev"];
var __ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj = Module["__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"] = asm["__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"];
var __ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj = Module["__ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"] = asm["__ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj"];
var __ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji = Module["__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"] = asm["__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"];
var __ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji = Module["__ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"] = asm["__ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"];
var __ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji = Module["__ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"] = asm["__ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"];
var __ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji = Module["__ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"] = asm["__ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"];
var __ZNSt3__26__clocEv = Module["__ZNSt3__26__clocEv"] = asm["__ZNSt3__26__clocEv"];
var __ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_"];
var __ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_"] = asm["__ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_"];
var __ZNSt3__26chrono12steady_clock3nowEv = Module["__ZNSt3__26chrono12steady_clock3nowEv"] = asm["__ZNSt3__26chrono12steady_clock3nowEv"];
var __ZNSt3__26chrono12system_clock11from_time_tEl = Module["__ZNSt3__26chrono12system_clock11from_time_tEl"] = asm["__ZNSt3__26chrono12system_clock11from_time_tEl"];
var __ZNSt3__26chrono12system_clock3nowEv = Module["__ZNSt3__26chrono12system_clock3nowEv"] = asm["__ZNSt3__26chrono12system_clock3nowEv"];
var __ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE = Module["__ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE"] = asm["__ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE"];
var __ZNSt3__26futureIvE3getEv = Module["__ZNSt3__26futureIvE3getEv"] = asm["__ZNSt3__26futureIvE3getEv"];
var __ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE = Module["__ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE"] = asm["__ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE"];
var __ZNSt3__26futureIvED2Ev = Module["__ZNSt3__26futureIvED2Ev"] = asm["__ZNSt3__26futureIvED2Ev"];
var __ZNSt3__26gslice6__initEj = Module["__ZNSt3__26gslice6__initEj"] = asm["__ZNSt3__26gslice6__initEj"];
var __ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl = Module["__ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl"] = asm["__ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl"];
var __ZNSt3__26locale2id5__getEv = Module["__ZNSt3__26locale2id5__getEv"] = asm["__ZNSt3__26locale2id5__getEv"];
var __ZNSt3__26locale2id6__initEv = Module["__ZNSt3__26locale2id6__initEv"] = asm["__ZNSt3__26locale2id6__initEv"];
var __ZNSt3__26locale5__imp11make_globalEv = Module["__ZNSt3__26locale5__imp11make_globalEv"] = asm["__ZNSt3__26locale5__imp11make_globalEv"];
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = asm["__ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"];
var __ZNSt3__26locale5__imp12make_classicEv = Module["__ZNSt3__26locale5__imp12make_classicEv"] = asm["__ZNSt3__26locale5__imp12make_classicEv"];
var __ZNSt3__26locale5__imp7installEPNS0_5facetEl = Module["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = asm["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"];
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
var __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = asm["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
var __ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj = Module["__ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj"];
var __ZNSt3__26locale5__impC2ERKS1_ = Module["__ZNSt3__26locale5__impC2ERKS1_"] = asm["__ZNSt3__26locale5__impC2ERKS1_"];
var __ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl = Module["__ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl"] = asm["__ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl"];
var __ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = asm["__ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"];
var __ZNSt3__26locale5__impC2ERKS1_S3_i = Module["__ZNSt3__26locale5__impC2ERKS1_S3_i"] = asm["__ZNSt3__26locale5__impC2ERKS1_S3_i"];
var __ZNSt3__26locale5__impC2Ej = Module["__ZNSt3__26locale5__impC2Ej"] = asm["__ZNSt3__26locale5__impC2Ej"];
var __ZNSt3__26locale5__impD0Ev = Module["__ZNSt3__26locale5__impD0Ev"] = asm["__ZNSt3__26locale5__impD0Ev"];
var __ZNSt3__26locale5__impD2Ev = Module["__ZNSt3__26locale5__impD2Ev"] = asm["__ZNSt3__26locale5__impD2Ev"];
var __ZNSt3__26locale5facet16__on_zero_sharedEv = Module["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = asm["__ZNSt3__26locale5facet16__on_zero_sharedEv"];
var __ZNSt3__26locale5facetD0Ev = Module["__ZNSt3__26locale5facetD0Ev"] = asm["__ZNSt3__26locale5facetD0Ev"];
var __ZNSt3__26locale5facetD2Ev = Module["__ZNSt3__26locale5facetD2Ev"] = asm["__ZNSt3__26locale5facetD2Ev"];
var __ZNSt3__26locale6globalERKS0_ = Module["__ZNSt3__26locale6globalERKS0_"] = asm["__ZNSt3__26locale6globalERKS0_"];
var __ZNSt3__26locale7classicEv = Module["__ZNSt3__26locale7classicEv"] = asm["__ZNSt3__26locale7classicEv"];
var __ZNSt3__26locale8__globalEv = Module["__ZNSt3__26locale8__globalEv"] = asm["__ZNSt3__26locale8__globalEv"];
var __ZNSt3__26localeC2EPKc = Module["__ZNSt3__26localeC2EPKc"] = asm["__ZNSt3__26localeC2EPKc"];
var __ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = asm["__ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
var __ZNSt3__26localeC2ERKS0_ = Module["__ZNSt3__26localeC2ERKS0_"] = asm["__ZNSt3__26localeC2ERKS0_"];
var __ZNSt3__26localeC2ERKS0_PKci = Module["__ZNSt3__26localeC2ERKS0_PKci"] = asm["__ZNSt3__26localeC2ERKS0_PKci"];
var __ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = asm["__ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"];
var __ZNSt3__26localeC2ERKS0_S2_i = Module["__ZNSt3__26localeC2ERKS0_S2_i"] = asm["__ZNSt3__26localeC2ERKS0_S2_i"];
var __ZNSt3__26localeC2Ev = Module["__ZNSt3__26localeC2Ev"] = asm["__ZNSt3__26localeC2Ev"];
var __ZNSt3__26localeD2Ev = Module["__ZNSt3__26localeD2Ev"] = asm["__ZNSt3__26localeD2Ev"];
var __ZNSt3__26localeaSERKS0_ = Module["__ZNSt3__26localeaSERKS0_"] = asm["__ZNSt3__26localeaSERKS0_"];
var __ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji = Module["__ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"] = asm["__ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji"];
var __ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji = Module["__ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"] = asm["__ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji"];
var __ZNSt3__26thread20hardware_concurrencyEv = Module["__ZNSt3__26thread20hardware_concurrencyEv"] = asm["__ZNSt3__26thread20hardware_concurrencyEv"];
var __ZNSt3__26thread4joinEv = Module["__ZNSt3__26thread4joinEv"] = asm["__ZNSt3__26thread4joinEv"];
var __ZNSt3__26thread6detachEv = Module["__ZNSt3__26thread6detachEv"] = asm["__ZNSt3__26thread6detachEv"];
var __ZNSt3__26threadD2Ev = Module["__ZNSt3__26threadD2Ev"] = asm["__ZNSt3__26threadD2Ev"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_ = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_ = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_ = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj"];
var __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_ = Module["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_"] = asm["__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_"];
var __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_ = Module["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_"] = asm["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_"];
var __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_ = Module["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_"] = asm["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_"];
var __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE = Module["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"] = asm["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"];
var __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_ = Module["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_"] = asm["__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_"];
var __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_ = Module["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_"] = asm["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_"];
var __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_ = Module["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_"] = asm["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_"];
var __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE = Module["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"] = asm["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"];
var __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_ = Module["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_"] = asm["__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_"];
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_"] = asm["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_"];
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE"] = asm["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE"];
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_"] = asm["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_"];
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = asm["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"];
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"] = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"];
var __ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_"] = asm["__ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_"] = asm["__ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_"];
var __ZNSt3__27codecvtIDic11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = asm["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"];
var __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = asm["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"];
var __ZNSt3__27codecvtIcc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = asm["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"];
var __ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcj = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcj"] = asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcj"];
var __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"] = asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"];
var __ZNSt3__27codecvtIwc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = asm["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"];
var __ZNSt3__27codecvtIwc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = asm["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"];
var __ZNSt3__27collateIcEC2Ej = Module["__ZNSt3__27collateIcEC2Ej"] = asm["__ZNSt3__27collateIcEC2Ej"];
var __ZNSt3__27collateIcED0Ev = Module["__ZNSt3__27collateIcED0Ev"] = asm["__ZNSt3__27collateIcED0Ev"];
var __ZNSt3__27collateIcED2Ev = Module["__ZNSt3__27collateIcED2Ev"] = asm["__ZNSt3__27collateIcED2Ev"];
var __ZNSt3__27collateIwEC2Ej = Module["__ZNSt3__27collateIwEC2Ej"] = asm["__ZNSt3__27collateIwEC2Ej"];
var __ZNSt3__27collateIwED0Ev = Module["__ZNSt3__27collateIwED0Ev"] = asm["__ZNSt3__27collateIwED0Ev"];
var __ZNSt3__27collateIwED2Ev = Module["__ZNSt3__27collateIwED2Ev"] = asm["__ZNSt3__27collateIwED2Ev"];
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__27promiseIvE10get_futureEv = Module["__ZNSt3__27promiseIvE10get_futureEv"] = asm["__ZNSt3__27promiseIvE10get_futureEv"];
var __ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr = Module["__ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr"] = asm["__ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr"];
var __ZNSt3__27promiseIvE24set_value_at_thread_exitEv = Module["__ZNSt3__27promiseIvE24set_value_at_thread_exitEv"] = asm["__ZNSt3__27promiseIvE24set_value_at_thread_exitEv"];
var __ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr = Module["__ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr"] = asm["__ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr"];
var __ZNSt3__27promiseIvE9set_valueEv = Module["__ZNSt3__27promiseIvE9set_valueEv"] = asm["__ZNSt3__27promiseIvE9set_valueEv"];
var __ZNSt3__27promiseIvEC2Ev = Module["__ZNSt3__27promiseIvEC2Ev"] = asm["__ZNSt3__27promiseIvEC2Ev"];
var __ZNSt3__27promiseIvED2Ev = Module["__ZNSt3__27promiseIvED2Ev"] = asm["__ZNSt3__27promiseIvED2Ev"];
var __ZNSt3__28__c_node5__addEPNS_8__i_nodeE = Module["__ZNSt3__28__c_node5__addEPNS_8__i_nodeE"] = asm["__ZNSt3__28__c_node5__addEPNS_8__i_nodeE"];
var __ZNSt3__28__c_node8__removeEPNS_8__i_nodeE = Module["__ZNSt3__28__c_node8__removeEPNS_8__i_nodeE"] = asm["__ZNSt3__28__c_node8__removeEPNS_8__i_nodeE"];
var __ZNSt3__28__c_nodeD0Ev = Module["__ZNSt3__28__c_nodeD0Ev"] = asm["__ZNSt3__28__c_nodeD0Ev"];
var __ZNSt3__28__c_nodeD2Ev = Module["__ZNSt3__28__c_nodeD2Ev"] = asm["__ZNSt3__28__c_nodeD2Ev"];
var __ZNSt3__28__get_dbEv = Module["__ZNSt3__28__get_dbEv"] = asm["__ZNSt3__28__get_dbEv"];
var __ZNSt3__28__i_nodeD2Ev = Module["__ZNSt3__28__i_nodeD2Ev"] = asm["__ZNSt3__28__i_nodeD2Ev"];
var __ZNSt3__28__rs_getEv = Module["__ZNSt3__28__rs_getEv"] = asm["__ZNSt3__28__rs_getEv"];
var __ZNSt3__28__sp_mut4lockEv = Module["__ZNSt3__28__sp_mut4lockEv"] = asm["__ZNSt3__28__sp_mut4lockEv"];
var __ZNSt3__28__sp_mut6unlockEv = Module["__ZNSt3__28__sp_mut6unlockEv"] = asm["__ZNSt3__28__sp_mut6unlockEv"];
var __ZNSt3__28__sp_mutC2EPv = Module["__ZNSt3__28__sp_mutC2EPv"] = asm["__ZNSt3__28__sp_mutC2EPv"];
var __ZNSt3__28ios_base15sync_with_stdioEb = Module["__ZNSt3__28ios_base15sync_with_stdioEb"] = asm["__ZNSt3__28ios_base15sync_with_stdioEb"];
var __ZNSt3__28ios_base16__call_callbacksENS0_5eventE = Module["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"] = asm["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"];
var __ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi = Module["__ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi"] = asm["__ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi"];
var __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv = Module["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"] = asm["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"];
var __ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv = Module["__ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv"] = asm["__ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv"];
var __ZNSt3__28ios_base4InitC2Ev = Module["__ZNSt3__28ios_base4InitC2Ev"] = asm["__ZNSt3__28ios_base4InitC2Ev"];
var __ZNSt3__28ios_base4InitD2Ev = Module["__ZNSt3__28ios_base4InitD2Ev"] = asm["__ZNSt3__28ios_base4InitD2Ev"];
var __ZNSt3__28ios_base4initEPv = Module["__ZNSt3__28ios_base4initEPv"] = asm["__ZNSt3__28ios_base4initEPv"];
var __ZNSt3__28ios_base4moveERS0_ = Module["__ZNSt3__28ios_base4moveERS0_"] = asm["__ZNSt3__28ios_base4moveERS0_"];
var __ZNSt3__28ios_base4swapERS0_ = Module["__ZNSt3__28ios_base4swapERS0_"] = asm["__ZNSt3__28ios_base4swapERS0_"];
var __ZNSt3__28ios_base5clearEj = Module["__ZNSt3__28ios_base5clearEj"] = asm["__ZNSt3__28ios_base5clearEj"];
var __ZNSt3__28ios_base5imbueERKNS_6localeE = Module["__ZNSt3__28ios_base5imbueERKNS_6localeE"] = asm["__ZNSt3__28ios_base5imbueERKNS_6localeE"];
var __ZNSt3__28ios_base5iwordEi = Module["__ZNSt3__28ios_base5iwordEi"] = asm["__ZNSt3__28ios_base5iwordEi"];
var __ZNSt3__28ios_base5pwordEi = Module["__ZNSt3__28ios_base5pwordEi"] = asm["__ZNSt3__28ios_base5pwordEi"];
var __ZNSt3__28ios_base6xallocEv = Module["__ZNSt3__28ios_base6xallocEv"] = asm["__ZNSt3__28ios_base6xallocEv"];
var __ZNSt3__28ios_base7copyfmtERKS0_ = Module["__ZNSt3__28ios_base7copyfmtERKS0_"] = asm["__ZNSt3__28ios_base7copyfmtERKS0_"];
var __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"] = asm["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"];
var __ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"] = asm["__ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"];
var __ZNSt3__28ios_base7failureD0Ev = Module["__ZNSt3__28ios_base7failureD0Ev"] = asm["__ZNSt3__28ios_base7failureD0Ev"];
var __ZNSt3__28ios_base7failureD2Ev = Module["__ZNSt3__28ios_base7failureD2Ev"] = asm["__ZNSt3__28ios_base7failureD2Ev"];
var __ZNSt3__28ios_baseD0Ev = Module["__ZNSt3__28ios_baseD0Ev"] = asm["__ZNSt3__28ios_baseD0Ev"];
var __ZNSt3__28ios_baseD2Ev = Module["__ZNSt3__28ios_baseD2Ev"] = asm["__ZNSt3__28ios_baseD2Ev"];
var __ZNSt3__28messagesIcEC2Ej = Module["__ZNSt3__28messagesIcEC2Ej"] = asm["__ZNSt3__28messagesIcEC2Ej"];
var __ZNSt3__28messagesIcED0Ev = Module["__ZNSt3__28messagesIcED0Ev"] = asm["__ZNSt3__28messagesIcED0Ev"];
var __ZNSt3__28messagesIcED2Ev = Module["__ZNSt3__28messagesIcED2Ev"] = asm["__ZNSt3__28messagesIcED2Ev"];
var __ZNSt3__28messagesIwEC2Ej = Module["__ZNSt3__28messagesIwEC2Ej"] = asm["__ZNSt3__28messagesIwEC2Ej"];
var __ZNSt3__28messagesIwED0Ev = Module["__ZNSt3__28messagesIwED0Ev"] = asm["__ZNSt3__28messagesIwED0Ev"];
var __ZNSt3__28messagesIwED2Ev = Module["__ZNSt3__28messagesIwED2Ev"] = asm["__ZNSt3__28messagesIwED2Ev"];
var __ZNSt3__28numpunctIcEC2Ej = Module["__ZNSt3__28numpunctIcEC2Ej"] = asm["__ZNSt3__28numpunctIcEC2Ej"];
var __ZNSt3__28numpunctIcED0Ev = Module["__ZNSt3__28numpunctIcED0Ev"] = asm["__ZNSt3__28numpunctIcED0Ev"];
var __ZNSt3__28numpunctIcED2Ev = Module["__ZNSt3__28numpunctIcED2Ev"] = asm["__ZNSt3__28numpunctIcED2Ev"];
var __ZNSt3__28numpunctIwEC2Ej = Module["__ZNSt3__28numpunctIwEC2Ej"] = asm["__ZNSt3__28numpunctIwEC2Ej"];
var __ZNSt3__28numpunctIwED0Ev = Module["__ZNSt3__28numpunctIwED0Ev"] = asm["__ZNSt3__28numpunctIwED0Ev"];
var __ZNSt3__28numpunctIwED2Ev = Module["__ZNSt3__28numpunctIwED2Ev"] = asm["__ZNSt3__28numpunctIwED2Ev"];
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"] = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj"];
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"] = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj"];
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"] = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj"];
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"] = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj"];
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__28valarrayIjE6resizeEjj = Module["__ZNSt3__28valarrayIjE6resizeEjj"] = asm["__ZNSt3__28valarrayIjE6resizeEjj"];
var __ZNSt3__28valarrayIjEC2Ej = Module["__ZNSt3__28valarrayIjEC2Ej"] = asm["__ZNSt3__28valarrayIjEC2Ej"];
var __ZNSt3__28valarrayIjED2Ev = Module["__ZNSt3__28valarrayIjED2Ev"] = asm["__ZNSt3__28valarrayIjED2Ev"];
var __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_ = Module["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"] = asm["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"];
var __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc = Module["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"] = asm["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"];
var __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = asm["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"];
var __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = asm["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"];
var __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw = Module["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"] = asm["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"];
var __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw = Module["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"] = asm["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"];
var __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = Module["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = asm["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"];
var __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = Module["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = asm["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"];
var __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = asm["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"];
var __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = asm["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"];
var __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = asm["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"];
var __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = asm["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEc = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEc"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEc"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveEOS3_ = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveEOS3_"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveEOS3_"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveERS3_ = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveERS3_"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveERS3_"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4swapERS3_"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4swapERS3_"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_ = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE9set_rdbufEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE9set_rdbufEPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE9set_rdbufEPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"];
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"] = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEw = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEw"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEw"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveEOS3_ = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveEOS3_"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveEOS3_"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveERS3_ = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveERS3_"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveERS3_"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4swapERS3_ = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4swapERS3_"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4swapERS3_"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5imbueERKNS_6localeE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_ = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE9set_rdbufEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE9set_rdbufEPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE9set_rdbufEPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev"];
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"] = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"];
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"];
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"];
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"] = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej"];
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"] = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej"];
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
var __ZNSt3__29strstreamD0Ev = Module["__ZNSt3__29strstreamD0Ev"] = asm["__ZNSt3__29strstreamD0Ev"];
var __ZNSt3__29strstreamD1Ev = Module["__ZNSt3__29strstreamD1Ev"] = asm["__ZNSt3__29strstreamD1Ev"];
var __ZNSt3__29strstreamD2Ev = Module["__ZNSt3__29strstreamD2Ev"] = asm["__ZNSt3__29strstreamD2Ev"];
var __ZNSt3__29to_stringEd = Module["__ZNSt3__29to_stringEd"] = asm["__ZNSt3__29to_stringEd"];
var __ZNSt3__29to_stringEe = Module["__ZNSt3__29to_stringEe"] = asm["__ZNSt3__29to_stringEe"];
var __ZNSt3__29to_stringEf = Module["__ZNSt3__29to_stringEf"] = asm["__ZNSt3__29to_stringEf"];
var __ZNSt3__29to_stringEi = Module["__ZNSt3__29to_stringEi"] = asm["__ZNSt3__29to_stringEi"];
var __ZNSt3__29to_stringEj = Module["__ZNSt3__29to_stringEj"] = asm["__ZNSt3__29to_stringEj"];
var __ZNSt3__29to_stringEl = Module["__ZNSt3__29to_stringEl"] = asm["__ZNSt3__29to_stringEl"];
var __ZNSt3__29to_stringEm = Module["__ZNSt3__29to_stringEm"] = asm["__ZNSt3__29to_stringEm"];
var __ZNSt3__29to_stringEx = Module["__ZNSt3__29to_stringEx"] = asm["__ZNSt3__29to_stringEx"];
var __ZNSt3__29to_stringEy = Module["__ZNSt3__29to_stringEy"] = asm["__ZNSt3__29to_stringEy"];
var __ZNSt3__2L10__init_patIcEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_ = Module["__ZNSt3__2L10__init_patIcEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_"] = asm["__ZNSt3__2L10__init_patIcEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_"];
var __ZNSt3__2L10__init_patIwEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_ = Module["__ZNSt3__2L10__init_patIwEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_"] = asm["__ZNSt3__2L10__init_patIwEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_"];
var __ZNSt3__2L10init_am_pmEv = Module["__ZNSt3__2L10init_am_pmEv"] = asm["__ZNSt3__2L10init_am_pmEv"];
var __ZNSt3__2L10init_weeksEv = Module["__ZNSt3__2L10init_weeksEv"] = asm["__ZNSt3__2L10init_weeksEv"];
var __ZNSt3__2L11init_monthsEv = Module["__ZNSt3__2L11init_monthsEv"] = asm["__ZNSt3__2L11init_monthsEv"];
var __ZNSt3__2L11init_wam_pmEv = Module["__ZNSt3__2L11init_wam_pmEv"] = asm["__ZNSt3__2L11init_wam_pmEv"];
var __ZNSt3__2L11init_wweeksEv = Module["__ZNSt3__2L11init_wweeksEv"] = asm["__ZNSt3__2L11init_wweeksEv"];
var __ZNSt3__2L12init_wmonthsEv = Module["__ZNSt3__2L12init_wmonthsEv"] = asm["__ZNSt3__2L12init_wmonthsEv"];
var __ZNSt3__2L12ucs2_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12ucs2_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L12ucs2_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L12utf8_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12utf8_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L12utf8_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L13__ios_new_capIPFvNS_8ios_base5eventERS1_iEEEjjj = Module["__ZNSt3__2L13__ios_new_capIPFvNS_8ios_base5eventERS1_iEEEjjj"] = asm["__ZNSt3__2L13__ios_new_capIPFvNS_8ios_base5eventERS1_iEEEjjj"];
var __ZNSt3__2L13__ios_new_capIPvEEjjj = Module["__ZNSt3__2L13__ios_new_capIPvEEjjj"] = asm["__ZNSt3__2L13__ios_new_capIPvEEjjj"];
var __ZNSt3__2L13__ios_new_capIlEEjjj = Module["__ZNSt3__2L13__ios_new_capIlEEjjj"] = asm["__ZNSt3__2L13__ios_new_capIlEEjjj"];
var __ZNSt3__2L13make_what_strERKNS_19__libcpp_debug_infoE = Module["__ZNSt3__2L13make_what_strERKNS_19__libcpp_debug_infoE"] = asm["__ZNSt3__2L13make_what_strERKNS_19__libcpp_debug_infoE"];
var __ZNSt3__2L13utf16_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf16_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L13utf16_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15ucs2_to_utf16beEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15ucs2_to_utf16beEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15ucs2_to_utf16beEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15ucs2_to_utf16leEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15ucs2_to_utf16leEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15ucs2_to_utf16leEPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15ucs4_to_utf16beEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15ucs4_to_utf16beEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15ucs4_to_utf16beEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15ucs4_to_utf16leEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15ucs4_to_utf16leEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15ucs4_to_utf16leEPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15utf16be_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15utf16be_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15utf16be_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15utf16be_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15utf16be_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15utf16be_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15utf16le_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15utf16le_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15utf16le_to_ucs2EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L15utf16le_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L15utf16le_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = asm["__ZNSt3__2L15utf16le_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"];
var __ZNSt3__2L19utf8_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L19utf8_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L19utf8_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE = Module["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"] = asm["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"];
var __ZNSt3__2L22utf16be_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L22utf16be_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L22utf16be_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L22utf16be_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L22utf16be_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L22utf16be_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L22utf16le_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L22utf16le_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L22utf16le_to_ucs2_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L22utf16le_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L22utf16le_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"] = asm["__ZNSt3__2L22utf16le_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"];
var __ZNSt3__2L30checked_string_to_char_convertERcPKcP15__locale_struct = Module["__ZNSt3__2L30checked_string_to_char_convertERcPKcP15__locale_struct"] = asm["__ZNSt3__2L30checked_string_to_char_convertERcPKcP15__locale_struct"];
var __ZNSt3__2L31checked_string_to_wchar_convertERwPKcP15__locale_struct = Module["__ZNSt3__2L31checked_string_to_wchar_convertERwPKcP15__locale_struct"] = asm["__ZNSt3__2L31checked_string_to_wchar_convertERwPKcP15__locale_struct"];
var __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_"] = asm["__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_"];
var __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_"] = asm["__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_"];
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"] = asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"];
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"] = asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"];
var __ZNSt8bad_castC2Ev = Module["__ZNSt8bad_castC2Ev"] = asm["__ZNSt8bad_castC2Ev"];
var __ZNSt8bad_castD0Ev = Module["__ZNSt8bad_castD0Ev"] = asm["__ZNSt8bad_castD0Ev"];
var __ZNSt8bad_castD2Ev = Module["__ZNSt8bad_castD2Ev"] = asm["__ZNSt8bad_castD2Ev"];
var __ZNSt9bad_allocC2Ev = Module["__ZNSt9bad_allocC2Ev"] = asm["__ZNSt9bad_allocC2Ev"];
var __ZNSt9bad_allocD0Ev = Module["__ZNSt9bad_allocD0Ev"] = asm["__ZNSt9bad_allocD0Ev"];
var __ZNSt9bad_allocD2Ev = Module["__ZNSt9bad_allocD2Ev"] = asm["__ZNSt9bad_allocD2Ev"];
var __ZNSt9exceptionD0Ev = Module["__ZNSt9exceptionD0Ev"] = asm["__ZNSt9exceptionD0Ev"];
var __ZNSt9exceptionD2Ev = Module["__ZNSt9exceptionD2Ev"] = asm["__ZNSt9exceptionD2Ev"];
var __ZNSt9type_infoD0Ev = Module["__ZNSt9type_infoD0Ev"] = asm["__ZNSt9type_infoD0Ev"];
var __ZNSt9type_infoD2Ev = Module["__ZNSt9type_infoD2Ev"] = asm["__ZNSt9type_infoD2Ev"];
var __ZSt10unexpectedv = Module["__ZSt10unexpectedv"] = asm["__ZSt10unexpectedv"];
var __ZSt11__terminatePFvvE = Module["__ZSt11__terminatePFvvE"] = asm["__ZSt11__terminatePFvvE"];
var __ZSt12__unexpectedPFvvE = Module["__ZSt12__unexpectedPFvvE"] = asm["__ZSt12__unexpectedPFvvE"];
var __ZSt13get_terminatev = Module["__ZSt13get_terminatev"] = asm["__ZSt13get_terminatev"];
var __ZSt13set_terminatePFvvE = Module["__ZSt13set_terminatePFvvE"] = asm["__ZSt13set_terminatePFvvE"];
var __ZSt14get_unexpectedv = Module["__ZSt14get_unexpectedv"] = asm["__ZSt14get_unexpectedv"];
var __ZSt14set_unexpectedPFvvE = Module["__ZSt14set_unexpectedPFvvE"] = asm["__ZSt14set_unexpectedPFvvE"];
var __ZSt15get_new_handlerv = Module["__ZSt15get_new_handlerv"] = asm["__ZSt15get_new_handlerv"];
var __ZSt15set_new_handlerPFvvE = Module["__ZSt15set_new_handlerPFvvE"] = asm["__ZSt15set_new_handlerPFvvE"];
var __ZSt17__throw_bad_allocv = Module["__ZSt17__throw_bad_allocv"] = asm["__ZSt17__throw_bad_allocv"];
var __ZSt17current_exceptionv = Module["__ZSt17current_exceptionv"] = asm["__ZSt17current_exceptionv"];
var __ZSt17rethrow_exceptionSt13exception_ptr = Module["__ZSt17rethrow_exceptionSt13exception_ptr"] = asm["__ZSt17rethrow_exceptionSt13exception_ptr"];
var __ZSt18make_exception_ptrINSt3__212future_errorEESt13exception_ptrT_ = Module["__ZSt18make_exception_ptrINSt3__212future_errorEESt13exception_ptrT_"] = asm["__ZSt18make_exception_ptrINSt3__212future_errorEESt13exception_ptrT_"];
var __ZSt9terminatev = Module["__ZSt9terminatev"] = asm["__ZSt9terminatev"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"];
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"];
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"] = asm["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"];
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"];
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"];
var __ZThn8_NSt3__29strstreamD0Ev = Module["__ZThn8_NSt3__29strstreamD0Ev"] = asm["__ZThn8_NSt3__29strstreamD0Ev"];
var __ZThn8_NSt3__29strstreamD1Ev = Module["__ZThn8_NSt3__29strstreamD1Ev"] = asm["__ZThn8_NSt3__29strstreamD1Ev"];
var __ZTv0_n12_NSt3__210istrstreamD0Ev = Module["__ZTv0_n12_NSt3__210istrstreamD0Ev"] = asm["__ZTv0_n12_NSt3__210istrstreamD0Ev"];
var __ZTv0_n12_NSt3__210istrstreamD1Ev = Module["__ZTv0_n12_NSt3__210istrstreamD1Ev"] = asm["__ZTv0_n12_NSt3__210istrstreamD1Ev"];
var __ZTv0_n12_NSt3__210ostrstreamD0Ev = Module["__ZTv0_n12_NSt3__210ostrstreamD0Ev"] = asm["__ZTv0_n12_NSt3__210ostrstreamD0Ev"];
var __ZTv0_n12_NSt3__210ostrstreamD1Ev = Module["__ZTv0_n12_NSt3__210ostrstreamD1Ev"] = asm["__ZTv0_n12_NSt3__210ostrstreamD1Ev"];
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"];
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"];
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"];
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"];
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"];
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"];
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"];
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"];
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"];
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"];
var __ZTv0_n12_NSt3__29strstreamD0Ev = Module["__ZTv0_n12_NSt3__29strstreamD0Ev"] = asm["__ZTv0_n12_NSt3__29strstreamD0Ev"];
var __ZTv0_n12_NSt3__29strstreamD1Ev = Module["__ZTv0_n12_NSt3__29strstreamD1Ev"] = asm["__ZTv0_n12_NSt3__29strstreamD1Ev"];
var __ZdaPv = Module["__ZdaPv"] = asm["__ZdaPv"];
var __ZdaPvRKSt9nothrow_t = Module["__ZdaPvRKSt9nothrow_t"] = asm["__ZdaPvRKSt9nothrow_t"];
var __ZdaPvSt11align_val_t = Module["__ZdaPvSt11align_val_t"] = asm["__ZdaPvSt11align_val_t"];
var __ZdaPvSt11align_val_tRKSt9nothrow_t = Module["__ZdaPvSt11align_val_tRKSt9nothrow_t"] = asm["__ZdaPvSt11align_val_tRKSt9nothrow_t"];
var __ZdaPvj = Module["__ZdaPvj"] = asm["__ZdaPvj"];
var __ZdaPvjSt11align_val_t = Module["__ZdaPvjSt11align_val_t"] = asm["__ZdaPvjSt11align_val_t"];
var __ZdlPv = Module["__ZdlPv"] = asm["__ZdlPv"];
var __ZdlPvRKSt9nothrow_t = Module["__ZdlPvRKSt9nothrow_t"] = asm["__ZdlPvRKSt9nothrow_t"];
var __ZdlPvSt11align_val_t = Module["__ZdlPvSt11align_val_t"] = asm["__ZdlPvSt11align_val_t"];
var __ZdlPvSt11align_val_tRKSt9nothrow_t = Module["__ZdlPvSt11align_val_tRKSt9nothrow_t"] = asm["__ZdlPvSt11align_val_tRKSt9nothrow_t"];
var __ZdlPvj = Module["__ZdlPvj"] = asm["__ZdlPvj"];
var __ZdlPvjSt11align_val_t = Module["__ZdlPvjSt11align_val_t"] = asm["__ZdlPvjSt11align_val_t"];
var __Znaj = Module["__Znaj"] = asm["__Znaj"];
var __ZnajRKSt9nothrow_t = Module["__ZnajRKSt9nothrow_t"] = asm["__ZnajRKSt9nothrow_t"];
var __ZnajSt11align_val_t = Module["__ZnajSt11align_val_t"] = asm["__ZnajSt11align_val_t"];
var __ZnajSt11align_val_tRKSt9nothrow_t = Module["__ZnajSt11align_val_tRKSt9nothrow_t"] = asm["__ZnajSt11align_val_tRKSt9nothrow_t"];
var __Znwj = Module["__Znwj"] = asm["__Znwj"];
var __ZnwjRKSt9nothrow_t = Module["__ZnwjRKSt9nothrow_t"] = asm["__ZnwjRKSt9nothrow_t"];
var __ZnwjSt11align_val_t = Module["__ZnwjSt11align_val_t"] = asm["__ZnwjSt11align_val_t"];
var __ZnwjSt11align_val_tRKSt9nothrow_t = Module["__ZnwjSt11align_val_tRKSt9nothrow_t"] = asm["__ZnwjSt11align_val_tRKSt9nothrow_t"];
var ___DOUBLE_BITS = Module["___DOUBLE_BITS"] = asm["___DOUBLE_BITS"];
var ___DOUBLE_BITS_19 = Module["___DOUBLE_BITS_19"] = asm["___DOUBLE_BITS_19"];
var ___DOUBLE_BITS_25 = Module["___DOUBLE_BITS_25"] = asm["___DOUBLE_BITS_25"];
var ___DOUBLE_BITS_261 = Module["___DOUBLE_BITS_261"] = asm["___DOUBLE_BITS_261"];
var ___DOUBLE_BITS_264 = Module["___DOUBLE_BITS_264"] = asm["___DOUBLE_BITS_264"];
var ___DOUBLE_BITS_266 = Module["___DOUBLE_BITS_266"] = asm["___DOUBLE_BITS_266"];
var ___DOUBLE_BITS_268 = Module["___DOUBLE_BITS_268"] = asm["___DOUBLE_BITS_268"];
var ___DOUBLE_BITS_269 = Module["___DOUBLE_BITS_269"] = asm["___DOUBLE_BITS_269"];
var ___DOUBLE_BITS_271 = Module["___DOUBLE_BITS_271"] = asm["___DOUBLE_BITS_271"];
var ___DOUBLE_BITS_273 = Module["___DOUBLE_BITS_273"] = asm["___DOUBLE_BITS_273"];
var ___DOUBLE_BITS_325 = Module["___DOUBLE_BITS_325"] = asm["___DOUBLE_BITS_325"];
var ___DOUBLE_BITS_327 = Module["___DOUBLE_BITS_327"] = asm["___DOUBLE_BITS_327"];
var ___DOUBLE_BITS_334 = Module["___DOUBLE_BITS_334"] = asm["___DOUBLE_BITS_334"];
var ___DOUBLE_BITS_337 = Module["___DOUBLE_BITS_337"] = asm["___DOUBLE_BITS_337"];
var ___DOUBLE_BITS_340 = Module["___DOUBLE_BITS_340"] = asm["___DOUBLE_BITS_340"];
var ___DOUBLE_BITS_348 = Module["___DOUBLE_BITS_348"] = asm["___DOUBLE_BITS_348"];
var ___DOUBLE_BITS_674 = Module["___DOUBLE_BITS_674"] = asm["___DOUBLE_BITS_674"];
var ___FLOAT_BITS = Module["___FLOAT_BITS"] = asm["___FLOAT_BITS"];
var ___FLOAT_BITS_22 = Module["___FLOAT_BITS_22"] = asm["___FLOAT_BITS_22"];
var ___FLOAT_BITS_265 = Module["___FLOAT_BITS_265"] = asm["___FLOAT_BITS_265"];
var ___FLOAT_BITS_267 = Module["___FLOAT_BITS_267"] = asm["___FLOAT_BITS_267"];
var ___FLOAT_BITS_270 = Module["___FLOAT_BITS_270"] = asm["___FLOAT_BITS_270"];
var ___FLOAT_BITS_272 = Module["___FLOAT_BITS_272"] = asm["___FLOAT_BITS_272"];
var ___FLOAT_BITS_274 = Module["___FLOAT_BITS_274"] = asm["___FLOAT_BITS_274"];
var ___FLOAT_BITS_28 = Module["___FLOAT_BITS_28"] = asm["___FLOAT_BITS_28"];
var ___FLOAT_BITS_326 = Module["___FLOAT_BITS_326"] = asm["___FLOAT_BITS_326"];
var ___FLOAT_BITS_335 = Module["___FLOAT_BITS_335"] = asm["___FLOAT_BITS_335"];
var ___FLOAT_BITS_336 = Module["___FLOAT_BITS_336"] = asm["___FLOAT_BITS_336"];
var ___FLOAT_BITS_343 = Module["___FLOAT_BITS_343"] = asm["___FLOAT_BITS_343"];
var ___FLOAT_BITS_349 = Module["___FLOAT_BITS_349"] = asm["___FLOAT_BITS_349"];
var ___bswap_16 = Module["___bswap_16"] = asm["___bswap_16"];
var ___bswap_16_493 = Module["___bswap_16_493"] = asm["___bswap_16_493"];
var ___bswap_32 = Module["___bswap_32"] = asm["___bswap_32"];
var ___bswap_32_492 = Module["___bswap_32_492"] = asm["___bswap_32_492"];
var ___clang_call_terminate = Module["___clang_call_terminate"] = asm["___clang_call_terminate"];
var ___cos = Module["___cos"] = asm["___cos"];
var ___cosdf = Module["___cosdf"] = asm["___cosdf"];
var ___crypt_blowfish = Module["___crypt_blowfish"] = asm["___crypt_blowfish"];
var ___crypt_des = Module["___crypt_des"] = asm["___crypt_des"];
var ___crypt_md5 = Module["___crypt_md5"] = asm["___crypt_md5"];
var ___crypt_r = Module["___crypt_r"] = asm["___crypt_r"];
var ___crypt_sha256 = Module["___crypt_sha256"] = asm["___crypt_sha256"];
var ___crypt_sha512 = Module["___crypt_sha512"] = asm["___crypt_sha512"];
var ___ctype_b_loc = Module["___ctype_b_loc"] = asm["___ctype_b_loc"];
var ___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = asm["___ctype_get_mb_cur_max"];
var ___ctype_tolower_loc = Module["___ctype_tolower_loc"] = asm["___ctype_tolower_loc"];
var ___ctype_toupper_loc = Module["___ctype_toupper_loc"] = asm["___ctype_toupper_loc"];
var ___cxa_bad_cast = Module["___cxa_bad_cast"] = asm["___cxa_bad_cast"];
var ___cxa_bad_typeid = Module["___cxa_bad_typeid"] = asm["___cxa_bad_typeid"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_get_globals = Module["___cxa_get_globals"] = asm["___cxa_get_globals"];
var ___cxa_get_globals_fast = Module["___cxa_get_globals_fast"] = asm["___cxa_get_globals_fast"];
var ___cxa_guard_abort = Module["___cxa_guard_abort"] = asm["___cxa_guard_abort"];
var ___cxa_guard_acquire = Module["___cxa_guard_acquire"] = asm["___cxa_guard_acquire"];
var ___cxa_guard_release = Module["___cxa_guard_release"] = asm["___cxa_guard_release"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___cxx_global_var_init = Module["___cxx_global_var_init"] = asm["___cxx_global_var_init"];
var ___des_setkey = Module["___des_setkey"] = asm["___des_setkey"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___dn_comp = Module["___dn_comp"] = asm["___dn_comp"];
var ___dn_expand = Module["___dn_expand"] = asm["___dn_expand"];
var ___dns_count_addrs = Module["___dns_count_addrs"] = asm["___dns_count_addrs"];
var ___dns_doqueries = Module["___dns_doqueries"] = asm["___dns_doqueries"];
var ___dns_get_rr = Module["___dns_get_rr"] = asm["___dns_get_rr"];
var ___dns_parse = Module["___dns_parse"] = asm["___dns_parse"];
var ___dns_query = Module["___dns_query"] = asm["___dns_query"];
var ___do_des = Module["___do_des"] = asm["___do_des"];
var ___do_orphaned_stdio_locks = Module["___do_orphaned_stdio_locks"] = asm["___do_orphaned_stdio_locks"];
var ___dup3 = Module["___dup3"] = asm["___dup3"];
var ___duplocale = Module["___duplocale"] = asm["___duplocale"];
var ___dynamic_cast = Module["___dynamic_cast"] = asm["___dynamic_cast"];
var ___emscripten_pthread_data_constructor = Module["___emscripten_pthread_data_constructor"] = asm["___emscripten_pthread_data_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___expo2 = Module["___expo2"] = asm["___expo2"];
var ___expo2f = Module["___expo2f"] = asm["___expo2f"];
var ___fbufsize = Module["___fbufsize"] = asm["___fbufsize"];
var ___fclose_ca = Module["___fclose_ca"] = asm["___fclose_ca"];
var ___fdopen = Module["___fdopen"] = asm["___fdopen"];
var ___fesetround = Module["___fesetround"] = asm["___fesetround"];
var ___fflush_unlocked = Module["___fflush_unlocked"] = asm["___fflush_unlocked"];
var ___fgetwc_unlocked = Module["___fgetwc_unlocked"] = asm["___fgetwc_unlocked"];
var ___fgetwc_unlocked_internal = Module["___fgetwc_unlocked_internal"] = asm["___fgetwc_unlocked_internal"];
var ___flbf = Module["___flbf"] = asm["___flbf"];
var ___floatscan = Module["___floatscan"] = asm["___floatscan"];
var ___flt_rounds = Module["___flt_rounds"] = asm["___flt_rounds"];
var ___fmodeflags = Module["___fmodeflags"] = asm["___fmodeflags"];
var ___fopen_rb_ca = Module["___fopen_rb_ca"] = asm["___fopen_rb_ca"];
var ___fpclassify = Module["___fpclassify"] = asm["___fpclassify"];
var ___fpclassifyf = Module["___fpclassifyf"] = asm["___fpclassifyf"];
var ___fpclassifyl = Module["___fpclassifyl"] = asm["___fpclassifyl"];
var ___fpending = Module["___fpending"] = asm["___fpending"];
var ___fpurge = Module["___fpurge"] = asm["___fpurge"];
var ___fputwc_unlocked = Module["___fputwc_unlocked"] = asm["___fputwc_unlocked"];
var ___freadable = Module["___freadable"] = asm["___freadable"];
var ___freadahead = Module["___freadahead"] = asm["___freadahead"];
var ___freading = Module["___freading"] = asm["___freading"];
var ___freadptr = Module["___freadptr"] = asm["___freadptr"];
var ___freadptrinc = Module["___freadptrinc"] = asm["___freadptrinc"];
var ___frexp_exp = Module["___frexp_exp"] = asm["___frexp_exp"];
var ___frexp_expf = Module["___frexp_expf"] = asm["___frexp_expf"];
var ___fseeko = Module["___fseeko"] = asm["___fseeko"];
var ___fseeko_unlocked = Module["___fseeko_unlocked"] = asm["___fseeko_unlocked"];
var ___fseterr = Module["___fseterr"] = asm["___fseterr"];
var ___fsetlocking = Module["___fsetlocking"] = asm["___fsetlocking"];
var ___fstatfs = Module["___fstatfs"] = asm["___fstatfs"];
var ___ftello = Module["___ftello"] = asm["___ftello"];
var ___ftello_unlocked = Module["___ftello_unlocked"] = asm["___ftello_unlocked"];
var ___futimesat = Module["___futimesat"] = asm["___futimesat"];
var ___fwritable = Module["___fwritable"] = asm["___fwritable"];
var ___fwritex = Module["___fwritex"] = asm["___fwritex"];
var ___fwriting = Module["___fwriting"] = asm["___fwriting"];
var ___fxstat = Module["___fxstat"] = asm["___fxstat"];
var ___fxstatat = Module["___fxstatat"] = asm["___fxstatat"];
var ___get_locale = Module["___get_locale"] = asm["___get_locale"];
var ___get_resolv_conf = Module["___get_resolv_conf"] = asm["___get_resolv_conf"];
var ___getdents = Module["___getdents"] = asm["___getdents"];
var ___getopt_long = Module["___getopt_long"] = asm["___getopt_long"];
var ___getopt_long_core = Module["___getopt_long_core"] = asm["___getopt_long_core"];
var ___getopt_msg = Module["___getopt_msg"] = asm["___getopt_msg"];
var ___gettextdomain = Module["___gettextdomain"] = asm["___gettextdomain"];
var ___h_errno_location = Module["___h_errno_location"] = asm["___h_errno_location"];
var ___inet_aton = Module["___inet_aton"] = asm["___inet_aton"];
var ___intscan = Module["___intscan"] = asm["___intscan"];
var ___ipparse = Module["___ipparse"] = asm["___ipparse"];
var ___isalnum_l = Module["___isalnum_l"] = asm["___isalnum_l"];
var ___isalpha_l = Module["___isalpha_l"] = asm["___isalpha_l"];
var ___isblank_l = Module["___isblank_l"] = asm["___isblank_l"];
var ___iscntrl_l = Module["___iscntrl_l"] = asm["___iscntrl_l"];
var ___isdigit_l = Module["___isdigit_l"] = asm["___isdigit_l"];
var ___isgraph_l = Module["___isgraph_l"] = asm["___isgraph_l"];
var ___islower_l = Module["___islower_l"] = asm["___islower_l"];
var ___isprint_l = Module["___isprint_l"] = asm["___isprint_l"];
var ___ispunct_l = Module["___ispunct_l"] = asm["___ispunct_l"];
var ___isspace_l = Module["___isspace_l"] = asm["___isspace_l"];
var ___isupper_l = Module["___isupper_l"] = asm["___isupper_l"];
var ___iswalnum_l = Module["___iswalnum_l"] = asm["___iswalnum_l"];
var ___iswalpha_l = Module["___iswalpha_l"] = asm["___iswalpha_l"];
var ___iswblank_l = Module["___iswblank_l"] = asm["___iswblank_l"];
var ___iswcntrl_l = Module["___iswcntrl_l"] = asm["___iswcntrl_l"];
var ___iswctype_l = Module["___iswctype_l"] = asm["___iswctype_l"];
var ___iswdigit_l = Module["___iswdigit_l"] = asm["___iswdigit_l"];
var ___iswgraph_l = Module["___iswgraph_l"] = asm["___iswgraph_l"];
var ___iswlower_l = Module["___iswlower_l"] = asm["___iswlower_l"];
var ___iswprint_l = Module["___iswprint_l"] = asm["___iswprint_l"];
var ___iswpunct_l = Module["___iswpunct_l"] = asm["___iswpunct_l"];
var ___iswspace_l = Module["___iswspace_l"] = asm["___iswspace_l"];
var ___iswupper_l = Module["___iswupper_l"] = asm["___iswupper_l"];
var ___iswxdigit_l = Module["___iswxdigit_l"] = asm["___iswxdigit_l"];
var ___isxdigit_l = Module["___isxdigit_l"] = asm["___isxdigit_l"];
var ___lctrans = Module["___lctrans"] = asm["___lctrans"];
var ___lctrans_cur = Module["___lctrans_cur"] = asm["___lctrans_cur"];
var ___lctrans_impl = Module["___lctrans_impl"] = asm["___lctrans_impl"];
var ___ldexp_cexp = Module["___ldexp_cexp"] = asm["___ldexp_cexp"];
var ___ldexp_cexpf = Module["___ldexp_cexpf"] = asm["___ldexp_cexpf"];
var ___lgamma_r = Module["___lgamma_r"] = asm["___lgamma_r"];
var ___lgammaf_r = Module["___lgammaf_r"] = asm["___lgammaf_r"];
var ___lgammal_r = Module["___lgammal_r"] = asm["___lgammal_r"];
var ___libc_get_version = Module["___libc_get_version"] = asm["___libc_get_version"];
var ___loc_is_allocated = Module["___loc_is_allocated"] = asm["___loc_is_allocated"];
var ___lockfile = Module["___lockfile"] = asm["___lockfile"];
var ___lookup_ipliteral = Module["___lookup_ipliteral"] = asm["___lookup_ipliteral"];
var ___lookup_name = Module["___lookup_name"] = asm["___lookup_name"];
var ___lookup_serv = Module["___lookup_serv"] = asm["___lookup_serv"];
var ___lxstat = Module["___lxstat"] = asm["___lxstat"];
var ___madvise = Module["___madvise"] = asm["___madvise"];
var ___memrchr = Module["___memrchr"] = asm["___memrchr"];
var ___mkostemps = Module["___mkostemps"] = asm["___mkostemps"];
var ___mmap = Module["___mmap"] = asm["___mmap"];
var ___mo_lookup = Module["___mo_lookup"] = asm["___mo_lookup"];
var ___mprotect = Module["___mprotect"] = asm["___mprotect"];
var ___mremap = Module["___mremap"] = asm["___mremap"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___munmap = Module["___munmap"] = asm["___munmap"];
var ___netlink_enumerate = Module["___netlink_enumerate"] = asm["___netlink_enumerate"];
var ___newlocale = Module["___newlocale"] = asm["___newlocale"];
var ___nl_langinfo = Module["___nl_langinfo"] = asm["___nl_langinfo"];
var ___nl_langinfo_l = Module["___nl_langinfo_l"] = asm["___nl_langinfo_l"];
var ___ofl_add = Module["___ofl_add"] = asm["___ofl_add"];
var ___ofl_lock = Module["___ofl_lock"] = asm["___ofl_lock"];
var ___ofl_unlock = Module["___ofl_unlock"] = asm["___ofl_unlock"];
var ___openlog = Module["___openlog"] = asm["___openlog"];
var ___overflow = Module["___overflow"] = asm["___overflow"];
var ___pleval = Module["___pleval"] = asm["___pleval"];
var ___procfdname = Module["___procfdname"] = asm["___procfdname"];
var ___pthread_self = Module["___pthread_self"] = asm["___pthread_self"];
var ___pthread_self_107 = Module["___pthread_self_107"] = asm["___pthread_self_107"];
var ___pthread_self_132 = Module["___pthread_self_132"] = asm["___pthread_self_132"];
var ___pthread_self_139 = Module["___pthread_self_139"] = asm["___pthread_self_139"];
var ___pthread_self_192 = Module["___pthread_self_192"] = asm["___pthread_self_192"];
var ___pthread_self_212 = Module["___pthread_self_212"] = asm["___pthread_self_212"];
var ___pthread_self_216 = Module["___pthread_self_216"] = asm["___pthread_self_216"];
var ___pthread_self_217 = Module["___pthread_self_217"] = asm["___pthread_self_217"];
var ___pthread_self_231 = Module["___pthread_self_231"] = asm["___pthread_self_231"];
var ___pthread_self_232 = Module["___pthread_self_232"] = asm["___pthread_self_232"];
var ___pthread_self_233 = Module["___pthread_self_233"] = asm["___pthread_self_233"];
var ___pthread_self_240 = Module["___pthread_self_240"] = asm["___pthread_self_240"];
var ___pthread_self_433 = Module["___pthread_self_433"] = asm["___pthread_self_433"];
var ___pthread_self_438 = Module["___pthread_self_438"] = asm["___pthread_self_438"];
var ___pthread_self_441 = Module["___pthread_self_441"] = asm["___pthread_self_441"];
var ___pthread_self_444 = Module["___pthread_self_444"] = asm["___pthread_self_444"];
var ___pthread_self_447 = Module["___pthread_self_447"] = asm["___pthread_self_447"];
var ___pthread_self_450 = Module["___pthread_self_450"] = asm["___pthread_self_450"];
var ___pthread_self_535 = Module["___pthread_self_535"] = asm["___pthread_self_535"];
var ___pthread_self_587 = Module["___pthread_self_587"] = asm["___pthread_self_587"];
var ___pthread_self_598 = Module["___pthread_self_598"] = asm["___pthread_self_598"];
var ___pthread_self_599 = Module["___pthread_self_599"] = asm["___pthread_self_599"];
var ___pthread_self_606 = Module["___pthread_self_606"] = asm["___pthread_self_606"];
var ___pthread_self_616 = Module["___pthread_self_616"] = asm["___pthread_self_616"];
var ___pthread_self_664 = Module["___pthread_self_664"] = asm["___pthread_self_664"];
var ___ptsname_r = Module["___ptsname_r"] = asm["___ptsname_r"];
var ___rand48_step = Module["___rand48_step"] = asm["___rand48_step"];
var ___randname = Module["___randname"] = asm["___randname"];
var ___rem_pio2 = Module["___rem_pio2"] = asm["___rem_pio2"];
var ___rem_pio2_large = Module["___rem_pio2_large"] = asm["___rem_pio2_large"];
var ___rem_pio2f = Module["___rem_pio2f"] = asm["___rem_pio2f"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var ___res_mkquery = Module["___res_mkquery"] = asm["___res_mkquery"];
var ___res_msend = Module["___res_msend"] = asm["___res_msend"];
var ___res_msend_rc = Module["___res_msend_rc"] = asm["___res_msend_rc"];
var ___res_send = Module["___res_send"] = asm["___res_send"];
var ___res_state = Module["___res_state"] = asm["___res_state"];
var ___rtnetlink_enumerate = Module["___rtnetlink_enumerate"] = asm["___rtnetlink_enumerate"];
var ___setrlimit = Module["___setrlimit"] = asm["___setrlimit"];
var ___setxid = Module["___setxid"] = asm["___setxid"];
var ___shgetc = Module["___shgetc"] = asm["___shgetc"];
var ___shlim = Module["___shlim"] = asm["___shlim"];
var ___shm_mapname = Module["___shm_mapname"] = asm["___shm_mapname"];
var ___signbit = Module["___signbit"] = asm["___signbit"];
var ___signbitf = Module["___signbitf"] = asm["___signbitf"];
var ___signbitl = Module["___signbitl"] = asm["___signbitl"];
var ___sin = Module["___sin"] = asm["___sin"];
var ___sindf = Module["___sindf"] = asm["___sindf"];
var ___srandom = Module["___srandom"] = asm["___srandom"];
var ___statfs = Module["___statfs"] = asm["___statfs"];
var ___stdio_close = Module["___stdio_close"] = asm["___stdio_close"];
var ___stdio_exit = Module["___stdio_exit"] = asm["___stdio_exit"];
var ___stdio_read = Module["___stdio_read"] = asm["___stdio_read"];
var ___stdio_seek = Module["___stdio_seek"] = asm["___stdio_seek"];
var ___stdio_write = Module["___stdio_write"] = asm["___stdio_write"];
var ___stdout_write = Module["___stdout_write"] = asm["___stdout_write"];
var ___stpcpy = Module["___stpcpy"] = asm["___stpcpy"];
var ___stpncpy = Module["___stpncpy"] = asm["___stpncpy"];
var ___strcasecmp_l = Module["___strcasecmp_l"] = asm["___strcasecmp_l"];
var ___strchrnul = Module["___strchrnul"] = asm["___strchrnul"];
var ___strcoll_l = Module["___strcoll_l"] = asm["___strcoll_l"];
var ___strdup = Module["___strdup"] = asm["___strdup"];
var ___strerror_l = Module["___strerror_l"] = asm["___strerror_l"];
var ___string_read = Module["___string_read"] = asm["___string_read"];
var ___strncasecmp_l = Module["___strncasecmp_l"] = asm["___strncasecmp_l"];
var ___strxfrm_l = Module["___strxfrm_l"] = asm["___strxfrm_l"];
var ___synccall = Module["___synccall"] = asm["___synccall"];
var ___syscall_ret = Module["___syscall_ret"] = asm["___syscall_ret"];
var ___tan = Module["___tan"] = asm["___tan"];
var ___tandf = Module["___tandf"] = asm["___tandf"];
var ___tolower_l = Module["___tolower_l"] = asm["___tolower_l"];
var ___toread = Module["___toread"] = asm["___toread"];
var ___toread_needs_stdio_exit = Module["___toread_needs_stdio_exit"] = asm["___toread_needs_stdio_exit"];
var ___toupper_l = Module["___toupper_l"] = asm["___toupper_l"];
var ___towcase = Module["___towcase"] = asm["___towcase"];
var ___towctrans_l = Module["___towctrans_l"] = asm["___towctrans_l"];
var ___towlower_l = Module["___towlower_l"] = asm["___towlower_l"];
var ___towrite = Module["___towrite"] = asm["___towrite"];
var ___towrite_needs_stdio_exit = Module["___towrite_needs_stdio_exit"] = asm["___towrite_needs_stdio_exit"];
var ___towupper_l = Module["___towupper_l"] = asm["___towupper_l"];
var ___tre_mem_alloc_impl = Module["___tre_mem_alloc_impl"] = asm["___tre_mem_alloc_impl"];
var ___tre_mem_destroy = Module["___tre_mem_destroy"] = asm["___tre_mem_destroy"];
var ___tre_mem_new_impl = Module["___tre_mem_new_impl"] = asm["___tre_mem_new_impl"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var ___uflow = Module["___uflow"] = asm["___uflow"];
var ___unlist_locked_file = Module["___unlist_locked_file"] = asm["___unlist_locked_file"];
var ___unlockfile = Module["___unlockfile"] = asm["___unlockfile"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___uselocale = Module["___uselocale"] = asm["___uselocale"];
var ___vsyslog = Module["___vsyslog"] = asm["___vsyslog"];
var ___wcscoll_l = Module["___wcscoll_l"] = asm["___wcscoll_l"];
var ___wcsxfrm_l = Module["___wcsxfrm_l"] = asm["___wcsxfrm_l"];
var ___wctrans_l = Module["___wctrans_l"] = asm["___wctrans_l"];
var ___wctype_l = Module["___wctype_l"] = asm["___wctype_l"];
var ___xmknod = Module["___xmknod"] = asm["___xmknod"];
var ___xmknodat = Module["___xmknodat"] = asm["___xmknodat"];
var ___xstat = Module["___xstat"] = asm["___xstat"];
var __crypt_extended_r_uut = Module["__crypt_extended_r_uut"] = asm["__crypt_extended_r_uut"];
var __flushlbf = Module["__flushlbf"] = asm["__flushlbf"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var __redupi = Module["__redupi"] = asm["__redupi"];
var __redupif = Module["__redupif"] = asm["__redupif"];
var __strcolcmp = Module["__strcolcmp"] = asm["__strcolcmp"];
var __vsyslog = Module["__vsyslog"] = asm["__vsyslog"];
var _a64l = Module["_a64l"] = asm["_a64l"];
var _a_cas = Module["_a_cas"] = asm["_a_cas"];
var _a_cas_p = Module["_a_cas_p"] = asm["_a_cas_p"];
var _a_ctz_64 = Module["_a_ctz_64"] = asm["_a_ctz_64"];
var _a_ctz_l = Module["_a_ctz_l"] = asm["_a_ctz_l"];
var _a_ctz_l_385 = Module["_a_ctz_l_385"] = asm["_a_ctz_l_385"];
var _a_ctz_l_386 = Module["_a_ctz_l_386"] = asm["_a_ctz_l_386"];
var _a_ctz_l_762 = Module["_a_ctz_l_762"] = asm["_a_ctz_l_762"];
var _a_store = Module["_a_store"] = asm["_a_store"];
var _a_store_607 = Module["_a_store_607"] = asm["_a_store_607"];
var _abort_message = Module["_abort_message"] = asm["_abort_message"];
var _accept = Module["_accept"] = asm["_accept"];
var _accept4 = Module["_accept4"] = asm["_accept4"];
var _access = Module["_access"] = asm["_access"];
var _acct = Module["_acct"] = asm["_acct"];
var _acos = Module["_acos"] = asm["_acos"];
var _acosf = Module["_acosf"] = asm["_acosf"];
var _acosh = Module["_acosh"] = asm["_acosh"];
var _acoshf = Module["_acoshf"] = asm["_acoshf"];
var _acoshl = Module["_acoshl"] = asm["_acoshl"];
var _acosl = Module["_acosl"] = asm["_acosl"];
var _add_adjusted = Module["_add_adjusted"] = asm["_add_adjusted"];
var _add_and_denormalize = Module["_add_and_denormalize"] = asm["_add_and_denormalize"];
var _add_icase_literals = Module["_add_icase_literals"] = asm["_add_icase_literals"];
var _addmntent = Module["_addmntent"] = asm["_addmntent"];
var _addrcmp = Module["_addrcmp"] = asm["_addrcmp"];
var _aligned_alloc = Module["_aligned_alloc"] = asm["_aligned_alloc"];
var _alphasort = Module["_alphasort"] = asm["_alphasort"];
var _append = Module["_append"] = asm["_append"];
var _arg_n = Module["_arg_n"] = asm["_arg_n"];
var _arg_n_701 = Module["_arg_n_701"] = asm["_arg_n_701"];
var _ascii_is_unsafe = Module["_ascii_is_unsafe"] = asm["_ascii_is_unsafe"];
var _ascii_to_bin = Module["_ascii_to_bin"] = asm["_ascii_to_bin"];
var _asin = Module["_asin"] = asm["_asin"];
var _asinf = Module["_asinf"] = asm["_asinf"];
var _asinh = Module["_asinh"] = asm["_asinh"];
var _asinhf = Module["_asinhf"] = asm["_asinhf"];
var _asinhl = Module["_asinhl"] = asm["_asinhl"];
var _asinl = Module["_asinl"] = asm["_asinl"];
var _asprintf = Module["_asprintf"] = asm["_asprintf"];
var _atan = Module["_atan"] = asm["_atan"];
var _atan2 = Module["_atan2"] = asm["_atan2"];
var _atan2f = Module["_atan2f"] = asm["_atan2f"];
var _atan2l = Module["_atan2l"] = asm["_atan2l"];
var _atanf = Module["_atanf"] = asm["_atanf"];
var _atanh = Module["_atanh"] = asm["_atanh"];
var _atanhf = Module["_atanhf"] = asm["_atanhf"];
var _atanhl = Module["_atanhl"] = asm["_atanhl"];
var _atanl = Module["_atanl"] = asm["_atanl"];
var _atof = Module["_atof"] = asm["_atof"];
var _atoi = Module["_atoi"] = asm["_atoi"];
var _atol = Module["_atol"] = asm["_atol"];
var _atoll = Module["_atoll"] = asm["_atoll"];
var _basename = Module["_basename"] = asm["_basename"];
var _bcmp = Module["_bcmp"] = asm["_bcmp"];
var _bcopy = Module["_bcopy"] = asm["_bcopy"];
var _bind = Module["_bind"] = asm["_bind"];
var _bind_textdomain_codeset = Module["_bind_textdomain_codeset"] = asm["_bind_textdomain_codeset"];
var _bindtextdomain = Module["_bindtextdomain"] = asm["_bindtextdomain"];
var _binop = Module["_binop"] = asm["_binop"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _brk = Module["_brk"] = asm["_brk"];
var _bsearch = Module["_bsearch"] = asm["_bsearch"];
var _btowc = Module["_btowc"] = asm["_btowc"];
var _bulk_free = Module["_bulk_free"] = asm["_bulk_free"];
var _bzero = Module["_bzero"] = asm["_bzero"];
var _c16rtomb = Module["_c16rtomb"] = asm["_c16rtomb"];
var _c32rtomb = Module["_c32rtomb"] = asm["_c32rtomb"];
var _cabs = Module["_cabs"] = asm["_cabs"];
var _cabsf = Module["_cabsf"] = asm["_cabsf"];
var _cabsl = Module["_cabsl"] = asm["_cabsl"];
var _cacos = Module["_cacos"] = asm["_cacos"];
var _cacosf = Module["_cacosf"] = asm["_cacosf"];
var _cacosh = Module["_cacosh"] = asm["_cacosh"];
var _cacoshf = Module["_cacoshf"] = asm["_cacoshf"];
var _cacoshl = Module["_cacoshl"] = asm["_cacoshl"];
var _cacosl = Module["_cacosl"] = asm["_cacosl"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _carg = Module["_carg"] = asm["_carg"];
var _cargf = Module["_cargf"] = asm["_cargf"];
var _cargl = Module["_cargl"] = asm["_cargl"];
var _casefold = Module["_casefold"] = asm["_casefold"];
var _casin = Module["_casin"] = asm["_casin"];
var _casinf = Module["_casinf"] = asm["_casinf"];
var _casinh = Module["_casinh"] = asm["_casinh"];
var _casinhf = Module["_casinhf"] = asm["_casinhf"];
var _casinhl = Module["_casinhl"] = asm["_casinhl"];
var _casinl = Module["_casinl"] = asm["_casinl"];
var _catan = Module["_catan"] = asm["_catan"];
var _catanf = Module["_catanf"] = asm["_catanf"];
var _catanh = Module["_catanh"] = asm["_catanh"];
var _catanhf = Module["_catanhf"] = asm["_catanhf"];
var _catanhl = Module["_catanhl"] = asm["_catanhl"];
var _catanl = Module["_catanl"] = asm["_catanl"];
var _catclose = Module["_catclose"] = asm["_catclose"];
var _catgets = Module["_catgets"] = asm["_catgets"];
var _catopen = Module["_catopen"] = asm["_catopen"];
var _cbrt = Module["_cbrt"] = asm["_cbrt"];
var _cbrtf = Module["_cbrtf"] = asm["_cbrtf"];
var _cbrtl = Module["_cbrtl"] = asm["_cbrtl"];
var _ccos = Module["_ccos"] = asm["_ccos"];
var _ccosf = Module["_ccosf"] = asm["_ccosf"];
var _ccosh = Module["_ccosh"] = asm["_ccosh"];
var _ccoshf = Module["_ccoshf"] = asm["_ccoshf"];
var _ccoshl = Module["_ccoshl"] = asm["_ccoshl"];
var _ccosl = Module["_ccosl"] = asm["_ccosl"];
var _cexp = Module["_cexp"] = asm["_cexp"];
var _cexpf = Module["_cexpf"] = asm["_cexpf"];
var _cexpl = Module["_cexpl"] = asm["_cexpl"];
var _cfgetispeed = Module["_cfgetispeed"] = asm["_cfgetispeed"];
var _cfgetospeed = Module["_cfgetospeed"] = asm["_cfgetospeed"];
var _cfmakeraw = Module["_cfmakeraw"] = asm["_cfmakeraw"];
var _cfsetispeed = Module["_cfsetispeed"] = asm["_cfsetispeed"];
var _cfsetospeed = Module["_cfsetospeed"] = asm["_cfsetospeed"];
var _chdir = Module["_chdir"] = asm["_chdir"];
var _checker = Module["_checker"] = asm["_checker"];
var _chmod = Module["_chmod"] = asm["_chmod"];
var _chown = Module["_chown"] = asm["_chown"];
var _cimag = Module["_cimag"] = asm["_cimag"];
var _cimagf = Module["_cimagf"] = asm["_cimagf"];
var _cimagl = Module["_cimagl"] = asm["_cimagl"];
var _cleanup = Module["_cleanup"] = asm["_cleanup"];
var _cleanup_525 = Module["_cleanup_525"] = asm["_cleanup_525"];
var _clearerr = Module["_clearerr"] = asm["_clearerr"];
var _clog = Module["_clog"] = asm["_clog"];
var _clogf = Module["_clogf"] = asm["_clogf"];
var _clogl = Module["_clogl"] = asm["_clogl"];
var _close = Module["_close"] = asm["_close"];
var _close_file = Module["_close_file"] = asm["_close_file"];
var _closedir = Module["_closedir"] = asm["_closedir"];
var _closelog = Module["_closelog"] = asm["_closelog"];
var _common = Module["_common"] = asm["_common"];
var _common_285 = Module["_common_285"] = asm["_common_285"];
var _common_302 = Module["_common_302"] = asm["_common_302"];
var _common_303 = Module["_common_303"] = asm["_common_303"];
var _conj = Module["_conj"] = asm["_conj"];
var _conjf = Module["_conjf"] = asm["_conjf"];
var _conjl = Module["_conjl"] = asm["_conjl"];
var _connect = Module["_connect"] = asm["_connect"];
var _copy_addr = Module["_copy_addr"] = asm["_copy_addr"];
var _copy_lladdr = Module["_copy_lladdr"] = asm["_copy_lladdr"];
var _copysign = Module["_copysign"] = asm["_copysign"];
var _copysignf = Module["_copysignf"] = asm["_copysignf"];
var _copysignl = Module["_copysignl"] = asm["_copysignl"];
var _cos = Module["_cos"] = asm["_cos"];
var _cosf = Module["_cosf"] = asm["_cosf"];
var _cosh = Module["_cosh"] = asm["_cosh"];
var _coshf = Module["_coshf"] = asm["_coshf"];
var _coshl = Module["_coshl"] = asm["_coshl"];
var _cosl = Module["_cosl"] = asm["_cosl"];
var _cpow = Module["_cpow"] = asm["_cpow"];
var _cpowf = Module["_cpowf"] = asm["_cpowf"];
var _cpowl = Module["_cpowl"] = asm["_cpowl"];
var _cproj = Module["_cproj"] = asm["_cproj"];
var _cprojf = Module["_cprojf"] = asm["_cprojf"];
var _cprojl = Module["_cprojl"] = asm["_cprojl"];
var _creal = Module["_creal"] = asm["_creal"];
var _crealf = Module["_crealf"] = asm["_crealf"];
var _creall = Module["_creall"] = asm["_creall"];
var _creat = Module["_creat"] = asm["_creat"];
var _crypt = Module["_crypt"] = asm["_crypt"];
var _csin = Module["_csin"] = asm["_csin"];
var _csinf = Module["_csinf"] = asm["_csinf"];
var _csinh = Module["_csinh"] = asm["_csinh"];
var _csinhf = Module["_csinhf"] = asm["_csinhf"];
var _csinhl = Module["_csinhl"] = asm["_csinhl"];
var _csinl = Module["_csinl"] = asm["_csinl"];
var _csqrt = Module["_csqrt"] = asm["_csqrt"];
var _csqrtf = Module["_csqrtf"] = asm["_csqrtf"];
var _csqrtl = Module["_csqrtl"] = asm["_csqrtl"];
var _ctan = Module["_ctan"] = asm["_ctan"];
var _ctanf = Module["_ctanf"] = asm["_ctanf"];
var _ctanh = Module["_ctanh"] = asm["_ctanh"];
var _ctanhf = Module["_ctanhf"] = asm["_ctanhf"];
var _ctanhl = Module["_ctanhl"] = asm["_ctanhl"];
var _ctanl = Module["_ctanl"] = asm["_ctanl"];
var _ctermid = Module["_ctermid"] = asm["_ctermid"];
var _cycle = Module["_cycle"] = asm["_cycle"];
var _dcgettext = Module["_dcgettext"] = asm["_dcgettext"];
var _dcngettext = Module["_dcngettext"] = asm["_dcngettext"];
var _dd_add = Module["_dd_add"] = asm["_dd_add"];
var _dd_mul = Module["_dd_mul"] = asm["_dd_mul"];
var _decfloat = Module["_decfloat"] = asm["_decfloat"];
var _des_cipher = Module["_des_cipher"] = asm["_des_cipher"];
var _dgettext = Module["_dgettext"] = asm["_dgettext"];
var _dirfd = Module["_dirfd"] = asm["_dirfd"];
var _dirname = Module["_dirname"] = asm["_dirname"];
var _dispose_chunk = Module["_dispose_chunk"] = asm["_dispose_chunk"];
var _div = Module["_div"] = asm["_div"];
var _dn_skipname = Module["_dn_skipname"] = asm["_dn_skipname"];
var _dngettext = Module["_dngettext"] = asm["_dngettext"];
var _dns_parse_callback = Module["_dns_parse_callback"] = asm["_dns_parse_callback"];
var _do_nftw = Module["_do_nftw"] = asm["_do_nftw"];
var _do_read = Module["_do_read"] = asm["_do_read"];
var _do_read_774 = Module["_do_read_774"] = asm["_do_read_774"];
var _do_read_777 = Module["_do_read_777"] = asm["_do_read_777"];
var _do_setrlimit = Module["_do_setrlimit"] = asm["_do_setrlimit"];
var _do_setxid = Module["_do_setxid"] = asm["_do_setxid"];
var _do_wordexp = Module["_do_wordexp"] = asm["_do_wordexp"];
var _dprintf = Module["_dprintf"] = asm["_dprintf"];
var _drand48 = Module["_drand48"] = asm["_drand48"];
var _dummy = Module["_dummy"] = asm["_dummy"];
var _dummy_737 = Module["_dummy_737"] = asm["_dummy_737"];
var _dup = Module["_dup"] = asm["_dup"];
var _dup2 = Module["_dup2"] = asm["_dup2"];
var _ecvt = Module["_ecvt"] = asm["_ecvt"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _encrypt = Module["_encrypt"] = asm["_encrypt"];
var _endhostent = Module["_endhostent"] = asm["_endhostent"];
var _endmntent = Module["_endmntent"] = asm["_endmntent"];
var _endservent = Module["_endservent"] = asm["_endservent"];
var _erand48 = Module["_erand48"] = asm["_erand48"];
var _erf = Module["_erf"] = asm["_erf"];
var _erfc = Module["_erfc"] = asm["_erfc"];
var _erfc1 = Module["_erfc1"] = asm["_erfc1"];
var _erfc1_254 = Module["_erfc1_254"] = asm["_erfc1_254"];
var _erfc2 = Module["_erfc2"] = asm["_erfc2"];
var _erfc2_253 = Module["_erfc2_253"] = asm["_erfc2_253"];
var _erfcf = Module["_erfcf"] = asm["_erfcf"];
var _erfcl = Module["_erfcl"] = asm["_erfcl"];
var _erff = Module["_erff"] = asm["_erff"];
var _erfl = Module["_erfl"] = asm["_erfl"];
var _ether_aton = Module["_ether_aton"] = asm["_ether_aton"];
var _ether_aton_r = Module["_ether_aton_r"] = asm["_ether_aton_r"];
var _ether_hostton = Module["_ether_hostton"] = asm["_ether_hostton"];
var _ether_line = Module["_ether_line"] = asm["_ether_line"];
var _ether_ntoa = Module["_ether_ntoa"] = asm["_ether_ntoa"];
var _ether_ntoa_r = Module["_ether_ntoa_r"] = asm["_ether_ntoa_r"];
var _ether_ntohost = Module["_ether_ntohost"] = asm["_ether_ntohost"];
var _evalbinop = Module["_evalbinop"] = asm["_evalbinop"];
var _evalexpr = Module["_evalexpr"] = asm["_evalexpr"];
var _evalprim = Module["_evalprim"] = asm["_evalprim"];
var _exp = Module["_exp"] = asm["_exp"];
var _exp10 = Module["_exp10"] = asm["_exp10"];
var _exp10f = Module["_exp10f"] = asm["_exp10f"];
var _exp10l = Module["_exp10l"] = asm["_exp10l"];
var _exp2 = Module["_exp2"] = asm["_exp2"];
var _exp2f = Module["_exp2f"] = asm["_exp2f"];
var _exp2l = Module["_exp2l"] = asm["_exp2l"];
var _expf = Module["_expf"] = asm["_expf"];
var _expl = Module["_expl"] = asm["_expl"];
var _expm1 = Module["_expm1"] = asm["_expm1"];
var _expm1f = Module["_expm1f"] = asm["_expm1f"];
var _expm1l = Module["_expm1l"] = asm["_expm1l"];
var _faccessat = Module["_faccessat"] = asm["_faccessat"];
var _fchdir = Module["_fchdir"] = asm["_fchdir"];
var _fchmod = Module["_fchmod"] = asm["_fchmod"];
var _fchmodat = Module["_fchmodat"] = asm["_fchmodat"];
var _fchown = Module["_fchown"] = asm["_fchown"];
var _fchownat = Module["_fchownat"] = asm["_fchownat"];
var _fclose = Module["_fclose"] = asm["_fclose"];
var _fcntl = Module["_fcntl"] = asm["_fcntl"];
var _fcvt = Module["_fcvt"] = asm["_fcvt"];
var _fdatasync = Module["_fdatasync"] = asm["_fdatasync"];
var _fdim = Module["_fdim"] = asm["_fdim"];
var _fdimf = Module["_fdimf"] = asm["_fdimf"];
var _fdiml = Module["_fdiml"] = asm["_fdiml"];
var _fdopendir = Module["_fdopendir"] = asm["_fdopendir"];
var _feclearexcept = Module["_feclearexcept"] = asm["_feclearexcept"];
var _fegetenv = Module["_fegetenv"] = asm["_fegetenv"];
var _fegetexceptflag = Module["_fegetexceptflag"] = asm["_fegetexceptflag"];
var _fegetround = Module["_fegetround"] = asm["_fegetround"];
var _feholdexcept = Module["_feholdexcept"] = asm["_feholdexcept"];
var _feof = Module["_feof"] = asm["_feof"];
var _feraiseexcept = Module["_feraiseexcept"] = asm["_feraiseexcept"];
var _ferror = Module["_ferror"] = asm["_ferror"];
var _fesetenv = Module["_fesetenv"] = asm["_fesetenv"];
var _fesetexceptflag = Module["_fesetexceptflag"] = asm["_fesetexceptflag"];
var _fesetround = Module["_fesetround"] = asm["_fesetround"];
var _fetestexcept = Module["_fetestexcept"] = asm["_fetestexcept"];
var _feupdateenv = Module["_feupdateenv"] = asm["_feupdateenv"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _ffs = Module["_ffs"] = asm["_ffs"];
var _ffsl = Module["_ffsl"] = asm["_ffsl"];
var _ffsll = Module["_ffsll"] = asm["_ffsll"];
var _fgetc = Module["_fgetc"] = asm["_fgetc"];
var _fgetln = Module["_fgetln"] = asm["_fgetln"];
var _fgetpos = Module["_fgetpos"] = asm["_fgetpos"];
var _fgets = Module["_fgets"] = asm["_fgets"];
var _fgetwc = Module["_fgetwc"] = asm["_fgetwc"];
var _fgetws = Module["_fgetws"] = asm["_fgetws"];
var _fileno = Module["_fileno"] = asm["_fileno"];
var _find_charmap = Module["_find_charmap"] = asm["_find_charmap"];
var _finite = Module["_finite"] = asm["_finite"];
var _finitef = Module["_finitef"] = asm["_finitef"];
var _fixup = Module["_fixup"] = asm["_fixup"];
var _flockfile = Module["_flockfile"] = asm["_flockfile"];
var _fma = Module["_fma"] = asm["_fma"];
var _fmaf = Module["_fmaf"] = asm["_fmaf"];
var _fmal = Module["_fmal"] = asm["_fmal"];
var _fmax = Module["_fmax"] = asm["_fmax"];
var _fmaxf = Module["_fmaxf"] = asm["_fmaxf"];
var _fmaxl = Module["_fmaxl"] = asm["_fmaxl"];
var _fmemopen = Module["_fmemopen"] = asm["_fmemopen"];
var _fmin = Module["_fmin"] = asm["_fmin"];
var _fminf = Module["_fminf"] = asm["_fminf"];
var _fminl = Module["_fminl"] = asm["_fminl"];
var _fmod = Module["_fmod"] = asm["_fmod"];
var _fmodf = Module["_fmodf"] = asm["_fmodf"];
var _fmodl = Module["_fmodl"] = asm["_fmodl"];
var _fmt_fp = Module["_fmt_fp"] = asm["_fmt_fp"];
var _fmt_o = Module["_fmt_o"] = asm["_fmt_o"];
var _fmt_u = Module["_fmt_u"] = asm["_fmt_u"];
var _fmt_x = Module["_fmt_x"] = asm["_fmt_x"];
var _fmtmsg = Module["_fmtmsg"] = asm["_fmtmsg"];
var _fnmatch = Module["_fnmatch"] = asm["_fnmatch"];
var _fnmatch_internal = Module["_fnmatch_internal"] = asm["_fnmatch_internal"];
var _fopen = Module["_fopen"] = asm["_fopen"];
var _forkpty = Module["_forkpty"] = asm["_forkpty"];
var _fourbyte_memmem = Module["_fourbyte_memmem"] = asm["_fourbyte_memmem"];
var _fourbyte_strstr = Module["_fourbyte_strstr"] = asm["_fourbyte_strstr"];
var _fprintf = Module["_fprintf"] = asm["_fprintf"];
var _fputc = Module["_fputc"] = asm["_fputc"];
var _fputs = Module["_fputs"] = asm["_fputs"];
var _fputwc = Module["_fputwc"] = asm["_fputwc"];
var _fputws = Module["_fputws"] = asm["_fputws"];
var _fread = Module["_fread"] = asm["_fread"];
var _free = Module["_free"] = asm["_free"];
var _freeaddrinfo = Module["_freeaddrinfo"] = asm["_freeaddrinfo"];
var _freeifaddrs = Module["_freeifaddrs"] = asm["_freeifaddrs"];
var _freelist = Module["_freelist"] = asm["_freelist"];
var _freelocale = Module["_freelocale"] = asm["_freelocale"];
var _freopen = Module["_freopen"] = asm["_freopen"];
var _frexp = Module["_frexp"] = asm["_frexp"];
var _frexpf = Module["_frexpf"] = asm["_frexpf"];
var _frexpl = Module["_frexpl"] = asm["_frexpl"];
var _fscanf = Module["_fscanf"] = asm["_fscanf"];
var _fseek = Module["_fseek"] = asm["_fseek"];
var _fsetpos = Module["_fsetpos"] = asm["_fsetpos"];
var _fstat = Module["_fstat"] = asm["_fstat"];
var _fstatat = Module["_fstatat"] = asm["_fstatat"];
var _fstatvfs = Module["_fstatvfs"] = asm["_fstatvfs"];
var _fsync = Module["_fsync"] = asm["_fsync"];
var _ftell = Module["_ftell"] = asm["_ftell"];
var _ftruncate = Module["_ftruncate"] = asm["_ftruncate"];
var _ftrylockfile = Module["_ftrylockfile"] = asm["_ftrylockfile"];
var _funlockfile = Module["_funlockfile"] = asm["_funlockfile"];
var _futimens = Module["_futimens"] = asm["_futimens"];
var _fuzzycmp = Module["_fuzzycmp"] = asm["_fuzzycmp"];
var _fwide = Module["_fwide"] = asm["_fwide"];
var _fwprintf = Module["_fwprintf"] = asm["_fwprintf"];
var _fwrite = Module["_fwrite"] = asm["_fwrite"];
var _fwscanf = Module["_fwscanf"] = asm["_fwscanf"];
var _gcvt = Module["_gcvt"] = asm["_gcvt"];
var _gen_netmask = Module["_gen_netmask"] = asm["_gen_netmask"];
var _get_16 = Module["_get_16"] = asm["_get_16"];
var _get_32 = Module["_get_32"] = asm["_get_32"];
var _get_current_dir_name = Module["_get_current_dir_name"] = asm["_get_current_dir_name"];
var _getauxval = Module["_getauxval"] = asm["_getauxval"];
var _getc = Module["_getc"] = asm["_getc"];
var _getc_unlocked = Module["_getc_unlocked"] = asm["_getc_unlocked"];
var _getchar = Module["_getchar"] = asm["_getchar"];
var _getchar_unlocked = Module["_getchar_unlocked"] = asm["_getchar_unlocked"];
var _getcwd = Module["_getcwd"] = asm["_getcwd"];
var _getdelim = Module["_getdelim"] = asm["_getdelim"];
var _getdomainname = Module["_getdomainname"] = asm["_getdomainname"];
var _getegid = Module["_getegid"] = asm["_getegid"];
var _geteuid = Module["_geteuid"] = asm["_geteuid"];
var _getgid = Module["_getgid"] = asm["_getgid"];
var _getgrouplist = Module["_getgrouplist"] = asm["_getgrouplist"];
var _getgroups = Module["_getgroups"] = asm["_getgroups"];
var _gethostent = Module["_gethostent"] = asm["_gethostent"];
var _gethostid = Module["_gethostid"] = asm["_gethostid"];
var _gethostname = Module["_gethostname"] = asm["_gethostname"];
var _getifaddrs = Module["_getifaddrs"] = asm["_getifaddrs"];
var _getint = Module["_getint"] = asm["_getint"];
var _getint_687 = Module["_getint_687"] = asm["_getint_687"];
var _getlens = Module["_getlens"] = asm["_getlens"];
var _getline = Module["_getline"] = asm["_getline"];
var _getlogin = Module["_getlogin"] = asm["_getlogin"];
var _getlogin_r = Module["_getlogin_r"] = asm["_getlogin_r"];
var _getmntent = Module["_getmntent"] = asm["_getmntent"];
var _getmntent_r = Module["_getmntent_r"] = asm["_getmntent_r"];
var _getnetbyaddr = Module["_getnetbyaddr"] = asm["_getnetbyaddr"];
var _getnetbyname = Module["_getnetbyname"] = asm["_getnetbyname"];
var _getoffs = Module["_getoffs"] = asm["_getoffs"];
var _getopt = Module["_getopt"] = asm["_getopt"];
var _getopt_long = Module["_getopt_long"] = asm["_getopt_long"];
var _getopt_long_only = Module["_getopt_long_only"] = asm["_getopt_long_only"];
var _getpeername = Module["_getpeername"] = asm["_getpeername"];
var _getpgid = Module["_getpgid"] = asm["_getpgid"];
var _getpgrp = Module["_getpgrp"] = asm["_getpgrp"];
var _getpid = Module["_getpid"] = asm["_getpid"];
var _getppid = Module["_getppid"] = asm["_getppid"];
var _getpriority = Module["_getpriority"] = asm["_getpriority"];
var _getresgid = Module["_getresgid"] = asm["_getresgid"];
var _getresuid = Module["_getresuid"] = asm["_getresuid"];
var _getrlimit = Module["_getrlimit"] = asm["_getrlimit"];
var _getrusage = Module["_getrusage"] = asm["_getrusage"];
var _gets = Module["_gets"] = asm["_gets"];
var _getservbyname = Module["_getservbyname"] = asm["_getservbyname"];
var _getservbyname_r = Module["_getservbyname_r"] = asm["_getservbyname_r"];
var _getservbyport = Module["_getservbyport"] = asm["_getservbyport"];
var _getservbyport_r = Module["_getservbyport_r"] = asm["_getservbyport_r"];
var _getservent = Module["_getservent"] = asm["_getservent"];
var _getsid = Module["_getsid"] = asm["_getsid"];
var _getsockname = Module["_getsockname"] = asm["_getsockname"];
var _getsockopt = Module["_getsockopt"] = asm["_getsockopt"];
var _getsubopt = Module["_getsubopt"] = asm["_getsubopt"];
var _gettext = Module["_gettext"] = asm["_gettext"];
var _gettextdir = Module["_gettextdir"] = asm["_gettextdir"];
var _getuid = Module["_getuid"] = asm["_getuid"];
var _getw = Module["_getw"] = asm["_getw"];
var _getwc = Module["_getwc"] = asm["_getwc"];
var _getwchar = Module["_getwchar"] = asm["_getwchar"];
var _getword = Module["_getword"] = asm["_getword"];
var _glob = Module["_glob"] = asm["_glob"];
var _globfree = Module["_globfree"] = asm["_globfree"];
var _grantpt = Module["_grantpt"] = asm["_grantpt"];
var _hashmd = Module["_hashmd"] = asm["_hashmd"];
var _hashmd_58 = Module["_hashmd_58"] = asm["_hashmd_58"];
var _hasmntopt = Module["_hasmntopt"] = asm["_hasmntopt"];
var _herror = Module["_herror"] = asm["_herror"];
var _hexfloat = Module["_hexfloat"] = asm["_hexfloat"];
var _hexval = Module["_hexval"] = asm["_hexval"];
var _hexval_539 = Module["_hexval_539"] = asm["_hexval_539"];
var _hstrerror = Module["_hstrerror"] = asm["_hstrerror"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _htons = Module["_htons"] = asm["_htons"];
var _hypot = Module["_hypot"] = asm["_hypot"];
var _hypotf = Module["_hypotf"] = asm["_hypotf"];
var _hypotl = Module["_hypotl"] = asm["_hypotl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _ialloc = Module["_ialloc"] = asm["_ialloc"];
var _iconv = Module["_iconv"] = asm["_iconv"];
var _iconv_close = Module["_iconv_close"] = asm["_iconv_close"];
var _iconv_open = Module["_iconv_open"] = asm["_iconv_open"];
var _if_freenameindex = Module["_if_freenameindex"] = asm["_if_freenameindex"];
var _if_indextoname = Module["_if_indextoname"] = asm["_if_indextoname"];
var _if_nameindex = Module["_if_nameindex"] = asm["_if_nameindex"];
var _if_nametoindex = Module["_if_nametoindex"] = asm["_if_nametoindex"];
var _ignore_err = Module["_ignore_err"] = asm["_ignore_err"];
var _ilogb = Module["_ilogb"] = asm["_ilogb"];
var _ilogbf = Module["_ilogbf"] = asm["_ilogbf"];
var _ilogbl = Module["_ilogbl"] = asm["_ilogbl"];
var _imaxabs = Module["_imaxabs"] = asm["_imaxabs"];
var _imaxdiv = Module["_imaxdiv"] = asm["_imaxdiv"];
var _in_set = Module["_in_set"] = asm["_in_set"];
var _independent_calloc = Module["_independent_calloc"] = asm["_independent_calloc"];
var _independent_comalloc = Module["_independent_comalloc"] = asm["_independent_comalloc"];
var _index = Module["_index"] = asm["_index"];
var _inet_lnaof = Module["_inet_lnaof"] = asm["_inet_lnaof"];
var _inet_makeaddr = Module["_inet_makeaddr"] = asm["_inet_makeaddr"];
var _inet_netof = Module["_inet_netof"] = asm["_inet_netof"];
var _inet_network = Module["_inet_network"] = asm["_inet_network"];
var _inet_ntoa = Module["_inet_ntoa"] = asm["_inet_ntoa"];
var _inet_ntop = Module["_inet_ntop"] = asm["_inet_ntop"];
var _inet_pton = Module["_inet_pton"] = asm["_inet_pton"];
var _initgroups = Module["_initgroups"] = asm["_initgroups"];
var _initstate = Module["_initstate"] = asm["_initstate"];
var _internal_memalign = Module["_internal_memalign"] = asm["_internal_memalign"];
var _ioctl = Module["_ioctl"] = asm["_ioctl"];
var _is_literal = Module["_is_literal"] = asm["_is_literal"];
var _is_lost_conn = Module["_is_lost_conn"] = asm["_is_lost_conn"];
var _is_valid_hostname = Module["_is_valid_hostname"] = asm["_is_valid_hostname"];
var _isalnum = Module["_isalnum"] = asm["_isalnum"];
var _isalnum_l = Module["_isalnum_l"] = asm["_isalnum_l"];
var _isalpha = Module["_isalpha"] = asm["_isalpha"];
var _isalpha_l = Module["_isalpha_l"] = asm["_isalpha_l"];
var _isascii = Module["_isascii"] = asm["_isascii"];
var _isatty = Module["_isatty"] = asm["_isatty"];
var _isblank = Module["_isblank"] = asm["_isblank"];
var _isblank_l = Module["_isblank_l"] = asm["_isblank_l"];
var _iscntrl = Module["_iscntrl"] = asm["_iscntrl"];
var _iscntrl_l = Module["_iscntrl_l"] = asm["_iscntrl_l"];
var _isdigit = Module["_isdigit"] = asm["_isdigit"];
var _isdigit_l = Module["_isdigit_l"] = asm["_isdigit_l"];
var _isgraph = Module["_isgraph"] = asm["_isgraph"];
var _isgraph_l = Module["_isgraph_l"] = asm["_isgraph_l"];
var _islower = Module["_islower"] = asm["_islower"];
var _islower_l = Module["_islower_l"] = asm["_islower_l"];
var _isprint = Module["_isprint"] = asm["_isprint"];
var _isprint_l = Module["_isprint_l"] = asm["_isprint_l"];
var _ispunct = Module["_ispunct"] = asm["_ispunct"];
var _ispunct_l = Module["_ispunct_l"] = asm["_ispunct_l"];
var _issetugid = Module["_issetugid"] = asm["_issetugid"];
var _isspace = Module["_isspace"] = asm["_isspace"];
var _isspace_l = Module["_isspace_l"] = asm["_isspace_l"];
var _isupper = Module["_isupper"] = asm["_isupper"];
var _isupper_l = Module["_isupper_l"] = asm["_isupper_l"];
var _iswalnum = Module["_iswalnum"] = asm["_iswalnum"];
var _iswalnum_l = Module["_iswalnum_l"] = asm["_iswalnum_l"];
var _iswalpha = Module["_iswalpha"] = asm["_iswalpha"];
var _iswalpha_l = Module["_iswalpha_l"] = asm["_iswalpha_l"];
var _iswblank = Module["_iswblank"] = asm["_iswblank"];
var _iswblank_l = Module["_iswblank_l"] = asm["_iswblank_l"];
var _iswcntrl = Module["_iswcntrl"] = asm["_iswcntrl"];
var _iswcntrl_l = Module["_iswcntrl_l"] = asm["_iswcntrl_l"];
var _iswctype = Module["_iswctype"] = asm["_iswctype"];
var _iswctype_l = Module["_iswctype_l"] = asm["_iswctype_l"];
var _iswdigit = Module["_iswdigit"] = asm["_iswdigit"];
var _iswdigit_l = Module["_iswdigit_l"] = asm["_iswdigit_l"];
var _iswgraph = Module["_iswgraph"] = asm["_iswgraph"];
var _iswgraph_l = Module["_iswgraph_l"] = asm["_iswgraph_l"];
var _iswlower = Module["_iswlower"] = asm["_iswlower"];
var _iswlower_l = Module["_iswlower_l"] = asm["_iswlower_l"];
var _iswprint = Module["_iswprint"] = asm["_iswprint"];
var _iswprint_l = Module["_iswprint_l"] = asm["_iswprint_l"];
var _iswpunct = Module["_iswpunct"] = asm["_iswpunct"];
var _iswpunct_l = Module["_iswpunct_l"] = asm["_iswpunct_l"];
var _iswspace = Module["_iswspace"] = asm["_iswspace"];
var _iswspace_l = Module["_iswspace_l"] = asm["_iswspace_l"];
var _iswupper = Module["_iswupper"] = asm["_iswupper"];
var _iswupper_l = Module["_iswupper_l"] = asm["_iswupper_l"];
var _iswxdigit = Module["_iswxdigit"] = asm["_iswxdigit"];
var _iswxdigit_l = Module["_iswxdigit_l"] = asm["_iswxdigit_l"];
var _isxdigit = Module["_isxdigit"] = asm["_isxdigit"];
var _isxdigit_l = Module["_isxdigit_l"] = asm["_isxdigit_l"];
var _j0 = Module["_j0"] = asm["_j0"];
var _j0f = Module["_j0f"] = asm["_j0f"];
var _j1 = Module["_j1"] = asm["_j1"];
var _j1f = Module["_j1f"] = asm["_j1f"];
var _jn = Module["_jn"] = asm["_jn"];
var _jnf = Module["_jnf"] = asm["_jnf"];
var _jrand48 = Module["_jrand48"] = asm["_jrand48"];
var _l64a = Module["_l64a"] = asm["_l64a"];
var _labelof = Module["_labelof"] = asm["_labelof"];
var _labs = Module["_labs"] = asm["_labs"];
var _lcg31 = Module["_lcg31"] = asm["_lcg31"];
var _lcg64 = Module["_lcg64"] = asm["_lcg64"];
var _lchmod = Module["_lchmod"] = asm["_lchmod"];
var _lchown = Module["_lchown"] = asm["_lchown"];
var _lcong48 = Module["_lcong48"] = asm["_lcong48"];
var _ldexp = Module["_ldexp"] = asm["_ldexp"];
var _ldexpf = Module["_ldexpf"] = asm["_ldexpf"];
var _ldexpl = Module["_ldexpl"] = asm["_ldexpl"];
var _ldiv = Module["_ldiv"] = asm["_ldiv"];
var _lgamma = Module["_lgamma"] = asm["_lgamma"];
var _lgammaf = Module["_lgammaf"] = asm["_lgammaf"];
var _lgammal = Module["_lgammal"] = asm["_lgammal"];
var _link = Module["_link"] = asm["_link"];
var _linkat = Module["_linkat"] = asm["_linkat"];
var _listen = Module["_listen"] = asm["_listen"];
var _llabs = Module["_llabs"] = asm["_llabs"];
var _lldiv = Module["_lldiv"] = asm["_lldiv"];
var _llrint = Module["_llrint"] = asm["_llrint"];
var _llrintf = Module["_llrintf"] = asm["_llrintf"];
var _llrintl = Module["_llrintl"] = asm["_llrintl"];
var _llround = Module["_llround"] = asm["_llround"];
var _llroundf = Module["_llroundf"] = asm["_llroundf"];
var _llroundl = Module["_llroundl"] = asm["_llroundl"];
var _llvm_bitreverse_i32 = Module["_llvm_bitreverse_i32"] = asm["_llvm_bitreverse_i32"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_ctlz_i16 = Module["_llvm_ctlz_i16"] = asm["_llvm_ctlz_i16"];
var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
var _llvm_ctlz_i8 = Module["_llvm_ctlz_i8"] = asm["_llvm_ctlz_i8"];
var _llvm_ctpop_i32 = Module["_llvm_ctpop_i32"] = asm["_llvm_ctpop_i32"];
var _llvm_ctpop_i64 = Module["_llvm_ctpop_i64"] = asm["_llvm_ctpop_i64"];
var _llvm_maxnum_f32 = Module["_llvm_maxnum_f32"] = asm["_llvm_maxnum_f32"];
var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = asm["_llvm_maxnum_f64"];
var _llvm_minnum_f32 = Module["_llvm_minnum_f32"] = asm["_llvm_minnum_f32"];
var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
var _llvm_nearbyint_f32 = Module["_llvm_nearbyint_f32"] = asm["_llvm_nearbyint_f32"];
var _llvm_nearbyint_f64 = Module["_llvm_nearbyint_f64"] = asm["_llvm_nearbyint_f64"];
var _llvm_rint_f32 = Module["_llvm_rint_f32"] = asm["_llvm_rint_f32"];
var _llvm_rint_f64 = Module["_llvm_rint_f64"] = asm["_llvm_rint_f64"];
var _llvm_round_f32 = Module["_llvm_round_f32"] = asm["_llvm_round_f32"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _loadstate = Module["_loadstate"] = asm["_loadstate"];
var _localeconv = Module["_localeconv"] = asm["_localeconv"];
var _lockf = Module["_lockf"] = asm["_lockf"];
var _log = Module["_log"] = asm["_log"];
var _log10 = Module["_log10"] = asm["_log10"];
var _log10f = Module["_log10f"] = asm["_log10f"];
var _log10l = Module["_log10l"] = asm["_log10l"];
var _log1p = Module["_log1p"] = asm["_log1p"];
var _log1pf = Module["_log1pf"] = asm["_log1pf"];
var _log1pl = Module["_log1pl"] = asm["_log1pl"];
var _log2 = Module["_log2"] = asm["_log2"];
var _log2f = Module["_log2f"] = asm["_log2f"];
var _log2l = Module["_log2l"] = asm["_log2l"];
var _logb = Module["_logb"] = asm["_logb"];
var _logbf = Module["_logbf"] = asm["_logbf"];
var _logbl = Module["_logbl"] = asm["_logbl"];
var _logf = Module["_logf"] = asm["_logf"];
var _login_tty = Module["_login_tty"] = asm["_login_tty"];
var _logl = Module["_logl"] = asm["_logl"];
var _lrand48 = Module["_lrand48"] = asm["_lrand48"];
var _lrint = Module["_lrint"] = asm["_lrint"];
var _lrintf = Module["_lrintf"] = asm["_lrintf"];
var _lrintl = Module["_lrintl"] = asm["_lrintl"];
var _lround = Module["_lround"] = asm["_lround"];
var _lroundf = Module["_lroundf"] = asm["_lroundf"];
var _lroundl = Module["_lroundl"] = asm["_lroundl"];
var _lseek = Module["_lseek"] = asm["_lseek"];
var _lstat = Module["_lstat"] = asm["_lstat"];
var _main = Module["_main"] = asm["_main"];
var _mallinfo = Module["_mallinfo"] = asm["_mallinfo"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _malloc_footprint = Module["_malloc_footprint"] = asm["_malloc_footprint"];
var _malloc_footprint_limit = Module["_malloc_footprint_limit"] = asm["_malloc_footprint_limit"];
var _malloc_max_footprint = Module["_malloc_max_footprint"] = asm["_malloc_max_footprint"];
var _malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] = asm["_malloc_set_footprint_limit"];
var _malloc_stats = Module["_malloc_stats"] = asm["_malloc_stats"];
var _malloc_trim = Module["_malloc_trim"] = asm["_malloc_trim"];
var _malloc_usable_size = Module["_malloc_usable_size"] = asm["_malloc_usable_size"];
var _mallopt = Module["_mallopt"] = asm["_mallopt"];
var _marksub = Module["_marksub"] = asm["_marksub"];
var _match = Module["_match"] = asm["_match"];
var _match_bracket = Module["_match_bracket"] = asm["_match_bracket"];
var _match_in_dir = Module["_match_in_dir"] = asm["_match_in_dir"];
var _mblen = Module["_mblen"] = asm["_mblen"];
var _mbrlen = Module["_mbrlen"] = asm["_mbrlen"];
var _mbrtoc16 = Module["_mbrtoc16"] = asm["_mbrtoc16"];
var _mbrtoc32 = Module["_mbrtoc32"] = asm["_mbrtoc32"];
var _mbrtowc = Module["_mbrtowc"] = asm["_mbrtowc"];
var _mbsinit = Module["_mbsinit"] = asm["_mbsinit"];
var _mbsnrtowcs = Module["_mbsnrtowcs"] = asm["_mbsnrtowcs"];
var _mbsrtowcs = Module["_mbsrtowcs"] = asm["_mbsrtowcs"];
var _mbstowcs = Module["_mbstowcs"] = asm["_mbstowcs"];
var _mbtowc = Module["_mbtowc"] = asm["_mbtowc"];
var _mclose = Module["_mclose"] = asm["_mclose"];
var _md5_init = Module["_md5_init"] = asm["_md5_init"];
var _md5_sum = Module["_md5_sum"] = asm["_md5_sum"];
var _md5_update = Module["_md5_update"] = asm["_md5_update"];
var _md5crypt = Module["_md5crypt"] = asm["_md5crypt"];
var _memalign = Module["_memalign"] = asm["_memalign"];
var _memccpy = Module["_memccpy"] = asm["_memccpy"];
var _memchr = Module["_memchr"] = asm["_memchr"];
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmem = Module["_memmem"] = asm["_memmem"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _mempcpy = Module["_mempcpy"] = asm["_mempcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _mincore = Module["_mincore"] = asm["_mincore"];
var _mkdir = Module["_mkdir"] = asm["_mkdir"];
var _mkdirat = Module["_mkdirat"] = asm["_mkdirat"];
var _mkdtemp = Module["_mkdtemp"] = asm["_mkdtemp"];
var _mkfifo = Module["_mkfifo"] = asm["_mkfifo"];
var _mkfifoat = Module["_mkfifoat"] = asm["_mkfifoat"];
var _mknod = Module["_mknod"] = asm["_mknod"];
var _mknodat = Module["_mknodat"] = asm["_mknodat"];
var _mkostemp = Module["_mkostemp"] = asm["_mkostemp"];
var _mkptr4 = Module["_mkptr4"] = asm["_mkptr4"];
var _mkptr6 = Module["_mkptr6"] = asm["_mkptr6"];
var _mkstemp = Module["_mkstemp"] = asm["_mkstemp"];
var _mkstemps = Module["_mkstemps"] = asm["_mkstemps"];
var _mktemp = Module["_mktemp"] = asm["_mktemp"];
var _mlock = Module["_mlock"] = asm["_mlock"];
var _mlockall = Module["_mlockall"] = asm["_mlockall"];
var _modf = Module["_modf"] = asm["_modf"];
var _modff = Module["_modff"] = asm["_modff"];
var _modfl = Module["_modfl"] = asm["_modfl"];
var _mrand48 = Module["_mrand48"] = asm["_mrand48"];
var _mread = Module["_mread"] = asm["_mread"];
var _ms_close = Module["_ms_close"] = asm["_ms_close"];
var _ms_seek = Module["_ms_seek"] = asm["_ms_seek"];
var _ms_write = Module["_ms_write"] = asm["_ms_write"];
var _mseek = Module["_mseek"] = asm["_mseek"];
var _msync = Module["_msync"] = asm["_msync"];
var _mtime = Module["_mtime"] = asm["_mtime"];
var _munlock = Module["_munlock"] = asm["_munlock"];
var _munlockall = Module["_munlockall"] = asm["_munlockall"];
var _mwrite = Module["_mwrite"] = asm["_mwrite"];
var _name_from_dns = Module["_name_from_dns"] = asm["_name_from_dns"];
var _name_from_dns_search = Module["_name_from_dns_search"] = asm["_name_from_dns_search"];
var _name_from_hosts = Module["_name_from_hosts"] = asm["_name_from_hosts"];
var _name_from_null = Module["_name_from_null"] = asm["_name_from_null"];
var _name_from_numeric = Module["_name_from_numeric"] = asm["_name_from_numeric"];
var _nan = Module["_nan"] = asm["_nan"];
var _nanf = Module["_nanf"] = asm["_nanf"];
var _nanl = Module["_nanl"] = asm["_nanl"];
var _nearbyint = Module["_nearbyint"] = asm["_nearbyint"];
var _nearbyintf = Module["_nearbyintf"] = asm["_nearbyintf"];
var _nearbyintl = Module["_nearbyintl"] = asm["_nearbyintl"];
var _netlink_msg_to_ifaddr = Module["_netlink_msg_to_ifaddr"] = asm["_netlink_msg_to_ifaddr"];
var _netlink_msg_to_nameindex = Module["_netlink_msg_to_nameindex"] = asm["_netlink_msg_to_nameindex"];
var _nextafter = Module["_nextafter"] = asm["_nextafter"];
var _nextafterf = Module["_nextafterf"] = asm["_nextafterf"];
var _nextafterl = Module["_nextafterl"] = asm["_nextafterl"];
var _nexttoward = Module["_nexttoward"] = asm["_nexttoward"];
var _nexttowardf = Module["_nexttowardf"] = asm["_nexttowardf"];
var _nexttowardl = Module["_nexttowardl"] = asm["_nexttowardl"];
var _nftw = Module["_nftw"] = asm["_nftw"];
var _ngettext = Module["_ngettext"] = asm["_ngettext"];
var _nice = Module["_nice"] = asm["_nice"];
var _nrand48 = Module["_nrand48"] = asm["_nrand48"];
var _ns_get16 = Module["_ns_get16"] = asm["_ns_get16"];
var _ns_get32 = Module["_ns_get32"] = asm["_ns_get32"];
var _ns_initparse = Module["_ns_initparse"] = asm["_ns_initparse"];
var _ns_name_uncompress = Module["_ns_name_uncompress"] = asm["_ns_name_uncompress"];
var _ns_parserr = Module["_ns_parserr"] = asm["_ns_parserr"];
var _ns_put16 = Module["_ns_put16"] = asm["_ns_put16"];
var _ns_put32 = Module["_ns_put32"] = asm["_ns_put32"];
var _ns_skiprr = Module["_ns_skiprr"] = asm["_ns_skiprr"];
var _ntohl = Module["_ntohl"] = asm["_ntohl"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _open = Module["_open"] = asm["_open"];
var _open_memstream = Module["_open_memstream"] = asm["_open_memstream"];
var _open_wmemstream = Module["_open_wmemstream"] = asm["_open_wmemstream"];
var _openat = Module["_openat"] = asm["_openat"];
var _opendir = Module["_opendir"] = asm["_opendir"];
var _openlog = Module["_openlog"] = asm["_openlog"];
var _openpty = Module["_openpty"] = asm["_openpty"];
var _out = Module["_out"] = asm["_out"];
var _out_686 = Module["_out_686"] = asm["_out_686"];
var _pad = Module["_pad"] = asm["_pad"];
var _pad_50 = Module["_pad_50"] = asm["_pad_50"];
var _pad_62 = Module["_pad_62"] = asm["_pad_62"];
var _pad_673 = Module["_pad_673"] = asm["_pad_673"];
var _parse_atom = Module["_parse_atom"] = asm["_parse_atom"];
var _parse_bracket = Module["_parse_bracket"] = asm["_parse_bracket"];
var _parse_bracket_terms = Module["_parse_bracket_terms"] = asm["_parse_bracket_terms"];
var _parse_dup = Module["_parse_dup"] = asm["_parse_dup"];
var _parse_dup_count = Module["_parse_dup_count"] = asm["_parse_dup_count"];
var _parseop = Module["_parseop"] = asm["_parseop"];
var _pat_next = Module["_pat_next"] = asm["_pat_next"];
var _pause = Module["_pause"] = asm["_pause"];
var _pclose = Module["_pclose"] = asm["_pclose"];
var _permute = Module["_permute"] = asm["_permute"];
var _perror = Module["_perror"] = asm["_perror"];
var _pipe = Module["_pipe"] = asm["_pipe"];
var _pipe2 = Module["_pipe2"] = asm["_pipe2"];
var _pntz = Module["_pntz"] = asm["_pntz"];
var _policyof = Module["_policyof"] = asm["_policyof"];
var _poll = Module["_poll"] = asm["_poll"];
var _pone = Module["_pone"] = asm["_pone"];
var _ponef = Module["_ponef"] = asm["_ponef"];
var _pop_arg = Module["_pop_arg"] = asm["_pop_arg"];
var _pop_arg_689 = Module["_pop_arg_689"] = asm["_pop_arg_689"];
var _popen = Module["_popen"] = asm["_popen"];
var _posix_close = Module["_posix_close"] = asm["_posix_close"];
var _posix_fadvise = Module["_posix_fadvise"] = asm["_posix_fadvise"];
var _posix_fallocate = Module["_posix_fallocate"] = asm["_posix_fallocate"];
var _posix_madvise = Module["_posix_madvise"] = asm["_posix_madvise"];
var _posix_memalign = Module["_posix_memalign"] = asm["_posix_memalign"];
var _posix_openpt = Module["_posix_openpt"] = asm["_posix_openpt"];
var _pow = Module["_pow"] = asm["_pow"];
var _powf = Module["_powf"] = asm["_powf"];
var _powl = Module["_powl"] = asm["_powl"];
var _pread = Module["_pread"] = asm["_pread"];
var _preadv = Module["_preadv"] = asm["_preadv"];
var _prefixmatch = Module["_prefixmatch"] = asm["_prefixmatch"];
var _printf = Module["_printf"] = asm["_printf"];
var _printf_core = Module["_printf_core"] = asm["_printf_core"];
var _processblock = Module["_processblock"] = asm["_processblock"];
var _processblock_51 = Module["_processblock_51"] = asm["_processblock_51"];
var _processblock_63 = Module["_processblock_63"] = asm["_processblock_63"];
var _pselect = Module["_pselect"] = asm["_pselect"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_trylock = Module["_pthread_mutex_trylock"] = asm["_pthread_mutex_trylock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _ptsname = Module["_ptsname"] = asm["_ptsname"];
var _put_16 = Module["_put_16"] = asm["_put_16"];
var _put_32 = Module["_put_32"] = asm["_put_32"];
var _putc = Module["_putc"] = asm["_putc"];
var _putc_unlocked = Module["_putc_unlocked"] = asm["_putc_unlocked"];
var _putchar = Module["_putchar"] = asm["_putchar"];
var _putchar_unlocked = Module["_putchar_unlocked"] = asm["_putchar_unlocked"];
var _puts = Module["_puts"] = asm["_puts"];
var _putw = Module["_putw"] = asm["_putw"];
var _putwc = Module["_putwc"] = asm["_putwc"];
var _putwchar = Module["_putwchar"] = asm["_putwchar"];
var _pvalloc = Module["_pvalloc"] = asm["_pvalloc"];
var _pwrite = Module["_pwrite"] = asm["_pwrite"];
var _pwritev = Module["_pwritev"] = asm["_pwritev"];
var _pzero = Module["_pzero"] = asm["_pzero"];
var _pzerof = Module["_pzerof"] = asm["_pzerof"];
var _qone = Module["_qone"] = asm["_qone"];
var _qonef = Module["_qonef"] = asm["_qonef"];
var _qsort = Module["_qsort"] = asm["_qsort"];
var _qzero = Module["_qzero"] = asm["_qzero"];
var _qzerof = Module["_qzerof"] = asm["_qzerof"];
var _rand = Module["_rand"] = asm["_rand"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _random = Module["_random"] = asm["_random"];
var _read = Module["_read"] = asm["_read"];
var _readdir = Module["_readdir"] = asm["_readdir"];
var _readdir_r = Module["_readdir_r"] = asm["_readdir_r"];
var _readlink = Module["_readlink"] = asm["_readlink"];
var _readlinkat = Module["_readlinkat"] = asm["_readlinkat"];
var _readv = Module["_readv"] = asm["_readv"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _realloc_in_place = Module["_realloc_in_place"] = asm["_realloc_in_place"];
var _realpath = Module["_realpath"] = asm["_realpath"];
var _reap = Module["_reap"] = asm["_reap"];
var _recv = Module["_recv"] = asm["_recv"];
var _recvfrom = Module["_recvfrom"] = asm["_recvfrom"];
var _recvmmsg = Module["_recvmmsg"] = asm["_recvmmsg"];
var _recvmsg = Module["_recvmsg"] = asm["_recvmsg"];
var _regcomp = Module["_regcomp"] = asm["_regcomp"];
var _regerror = Module["_regerror"] = asm["_regerror"];
var _regexec = Module["_regexec"] = asm["_regexec"];
var _regfree = Module["_regfree"] = asm["_regfree"];
var _remainder = Module["_remainder"] = asm["_remainder"];
var _remainderf = Module["_remainderf"] = asm["_remainderf"];
var _remainderl = Module["_remainderl"] = asm["_remainderl"];
var _remove = Module["_remove"] = asm["_remove"];
var _remquo = Module["_remquo"] = asm["_remquo"];
var _remquof = Module["_remquof"] = asm["_remquof"];
var _remquol = Module["_remquol"] = asm["_remquol"];
var _rename = Module["_rename"] = asm["_rename"];
var _renameat = Module["_renameat"] = asm["_renameat"];
var _res_init = Module["_res_init"] = asm["_res_init"];
var _res_querydomain = Module["_res_querydomain"] = asm["_res_querydomain"];
var _rewind = Module["_rewind"] = asm["_rewind"];
var _rewinddir = Module["_rewinddir"] = asm["_rewinddir"];
var _rindex = Module["_rindex"] = asm["_rindex"];
var _rint = Module["_rint"] = asm["_rint"];
var _rintf = Module["_rintf"] = asm["_rintf"];
var _rintl = Module["_rintl"] = asm["_rintl"];
var _rmdir = Module["_rmdir"] = asm["_rmdir"];
var _rol = Module["_rol"] = asm["_rol"];
var _ror = Module["_ror"] = asm["_ror"];
var _ror_64 = Module["_ror_64"] = asm["_ror_64"];
var _round = Module["_round"] = asm["_round"];
var _roundf = Module["_roundf"] = asm["_roundf"];
var _roundl = Module["_roundl"] = asm["_roundl"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _savestate = Module["_savestate"] = asm["_savestate"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _scalb = Module["_scalb"] = asm["_scalb"];
var _scalbf = Module["_scalbf"] = asm["_scalbf"];
var _scalbln = Module["_scalbln"] = asm["_scalbln"];
var _scalblnf = Module["_scalblnf"] = asm["_scalblnf"];
var _scalblnl = Module["_scalblnl"] = asm["_scalblnl"];
var _scalbn = Module["_scalbn"] = asm["_scalbn"];
var _scalbnf = Module["_scalbnf"] = asm["_scalbnf"];
var _scalbnl = Module["_scalbnl"] = asm["_scalbnl"];
var _scandir = Module["_scandir"] = asm["_scandir"];
var _scanexp = Module["_scanexp"] = asm["_scanexp"];
var _scanf = Module["_scanf"] = asm["_scanf"];
var _scopeof = Module["_scopeof"] = asm["_scopeof"];
var _seed48 = Module["_seed48"] = asm["_seed48"];
var _seekdir = Module["_seekdir"] = asm["_seekdir"];
var _select = Module["_select"] = asm["_select"];
var _send = Module["_send"] = asm["_send"];
var _sendmmsg = Module["_sendmmsg"] = asm["_sendmmsg"];
var _sendmsg = Module["_sendmsg"] = asm["_sendmsg"];
var _sendto = Module["_sendto"] = asm["_sendto"];
var _setbuf = Module["_setbuf"] = asm["_setbuf"];
var _setbuffer = Module["_setbuffer"] = asm["_setbuffer"];
var _setdomainname = Module["_setdomainname"] = asm["_setdomainname"];
var _setegid = Module["_setegid"] = asm["_setegid"];
var _seteuid = Module["_seteuid"] = asm["_seteuid"];
var _setgid = Module["_setgid"] = asm["_setgid"];
var _sethostent = Module["_sethostent"] = asm["_sethostent"];
var _setkey = Module["_setkey"] = asm["_setkey"];
var _setlinebuf = Module["_setlinebuf"] = asm["_setlinebuf"];
var _setlocale = Module["_setlocale"] = asm["_setlocale"];
var _setlocale_one_unlocked = Module["_setlocale_one_unlocked"] = asm["_setlocale_one_unlocked"];
var _setlogmask = Module["_setlogmask"] = asm["_setlogmask"];
var _setmntent = Module["_setmntent"] = asm["_setmntent"];
var _setpgid = Module["_setpgid"] = asm["_setpgid"];
var _setpgrp = Module["_setpgrp"] = asm["_setpgrp"];
var _setpriority = Module["_setpriority"] = asm["_setpriority"];
var _setregid = Module["_setregid"] = asm["_setregid"];
var _setresgid = Module["_setresgid"] = asm["_setresgid"];
var _setresuid = Module["_setresuid"] = asm["_setresuid"];
var _setreuid = Module["_setreuid"] = asm["_setreuid"];
var _setrlimit = Module["_setrlimit"] = asm["_setrlimit"];
var _setservent = Module["_setservent"] = asm["_setservent"];
var _setsid = Module["_setsid"] = asm["_setsid"];
var _setsockopt = Module["_setsockopt"] = asm["_setsockopt"];
var _setstate = Module["_setstate"] = asm["_setstate"];
var _setuid = Module["_setuid"] = asm["_setuid"];
var _setup_salt = Module["_setup_salt"] = asm["_setup_salt"];
var _setvbuf = Module["_setvbuf"] = asm["_setvbuf"];
var _sha256_init = Module["_sha256_init"] = asm["_sha256_init"];
var _sha256_sum = Module["_sha256_sum"] = asm["_sha256_sum"];
var _sha256_update = Module["_sha256_update"] = asm["_sha256_update"];
var _sha256crypt = Module["_sha256crypt"] = asm["_sha256crypt"];
var _sha512_init = Module["_sha512_init"] = asm["_sha512_init"];
var _sha512_sum = Module["_sha512_sum"] = asm["_sha512_sum"];
var _sha512_update = Module["_sha512_update"] = asm["_sha512_update"];
var _sha512crypt = Module["_sha512crypt"] = asm["_sha512crypt"];
var _shl = Module["_shl"] = asm["_shl"];
var _shm_open = Module["_shm_open"] = asm["_shm_open"];
var _shm_unlink = Module["_shm_unlink"] = asm["_shm_unlink"];
var _shr = Module["_shr"] = asm["_shr"];
var _shutdown = Module["_shutdown"] = asm["_shutdown"];
var _sift = Module["_sift"] = asm["_sift"];
var _significand = Module["_significand"] = asm["_significand"];
var _significandf = Module["_significandf"] = asm["_significandf"];
var _sin = Module["_sin"] = asm["_sin"];
var _sin_pi = Module["_sin_pi"] = asm["_sin_pi"];
var _sin_pi_320 = Module["_sin_pi_320"] = asm["_sin_pi_320"];
var _sincos = Module["_sincos"] = asm["_sincos"];
var _sincosf = Module["_sincosf"] = asm["_sincosf"];
var _sincosl = Module["_sincosl"] = asm["_sincosl"];
var _sinf = Module["_sinf"] = asm["_sinf"];
var _sinh = Module["_sinh"] = asm["_sinh"];
var _sinhf = Module["_sinhf"] = asm["_sinhf"];
var _sinhl = Module["_sinhl"] = asm["_sinhl"];
var _sinl = Module["_sinl"] = asm["_sinl"];
var _sinpi = Module["_sinpi"] = asm["_sinpi"];
var _skipspace = Module["_skipspace"] = asm["_skipspace"];
var _sleep = Module["_sleep"] = asm["_sleep"];
var _sn_write = Module["_sn_write"] = asm["_sn_write"];
var _snprintf = Module["_snprintf"] = asm["_snprintf"];
var _sockatmark = Module["_sockatmark"] = asm["_sockatmark"];
var _socket = Module["_socket"] = asm["_socket"];
var _socketpair = Module["_socketpair"] = asm["_socketpair"];
var _sort = Module["_sort"] = asm["_sort"];
var _sprintf = Module["_sprintf"] = asm["_sprintf"];
var _sq = Module["_sq"] = asm["_sq"];
var _srand = Module["_srand"] = asm["_srand"];
var _srand48 = Module["_srand48"] = asm["_srand48"];
var _srandom = Module["_srandom"] = asm["_srandom"];
var _sscanf = Module["_sscanf"] = asm["_sscanf"];
var _stat = Module["_stat"] = asm["_stat"];
var _statvfs = Module["_statvfs"] = asm["_statvfs"];
var _store_int = Module["_store_int"] = asm["_store_int"];
var _store_int_702 = Module["_store_int_702"] = asm["_store_int_702"];
var _str_next = Module["_str_next"] = asm["_str_next"];
var _strcasecmp = Module["_strcasecmp"] = asm["_strcasecmp"];
var _strcasecmp_l = Module["_strcasecmp_l"] = asm["_strcasecmp_l"];
var _strcasestr = Module["_strcasestr"] = asm["_strcasestr"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _strchr = Module["_strchr"] = asm["_strchr"];
var _strcmp = Module["_strcmp"] = asm["_strcmp"];
var _strcoll = Module["_strcoll"] = asm["_strcoll"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _strcspn = Module["_strcspn"] = asm["_strcspn"];
var _strerror = Module["_strerror"] = asm["_strerror"];
var _strerror_l = Module["_strerror_l"] = asm["_strerror_l"];
var _strerror_r = Module["_strerror_r"] = asm["_strerror_r"];
var _strfmon = Module["_strfmon"] = asm["_strfmon"];
var _strfmon_l = Module["_strfmon_l"] = asm["_strfmon_l"];
var _strlcat = Module["_strlcat"] = asm["_strlcat"];
var _strlcpy = Module["_strlcpy"] = asm["_strlcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strlwr = Module["_strlwr"] = asm["_strlwr"];
var _strncasecmp = Module["_strncasecmp"] = asm["_strncasecmp"];
var _strncasecmp_l = Module["_strncasecmp_l"] = asm["_strncasecmp_l"];
var _strncat = Module["_strncat"] = asm["_strncat"];
var _strncmp = Module["_strncmp"] = asm["_strncmp"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _strndup = Module["_strndup"] = asm["_strndup"];
var _strnlen = Module["_strnlen"] = asm["_strnlen"];
var _strpbrk = Module["_strpbrk"] = asm["_strpbrk"];
var _strrchr = Module["_strrchr"] = asm["_strrchr"];
var _strsep = Module["_strsep"] = asm["_strsep"];
var _strsignal = Module["_strsignal"] = asm["_strsignal"];
var _strspn = Module["_strspn"] = asm["_strspn"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _strtod = Module["_strtod"] = asm["_strtod"];
var _strtod_l = Module["_strtod_l"] = asm["_strtod_l"];
var _strtof = Module["_strtof"] = asm["_strtof"];
var _strtof_l = Module["_strtof_l"] = asm["_strtof_l"];
var _strtoimax = Module["_strtoimax"] = asm["_strtoimax"];
var _strtok = Module["_strtok"] = asm["_strtok"];
var _strtok_r = Module["_strtok_r"] = asm["_strtok_r"];
var _strtol = Module["_strtol"] = asm["_strtol"];
var _strtol_l = Module["_strtol_l"] = asm["_strtol_l"];
var _strtold = Module["_strtold"] = asm["_strtold"];
var _strtold_l = Module["_strtold_l"] = asm["_strtold_l"];
var _strtoll = Module["_strtoll"] = asm["_strtoll"];
var _strtoll_l = Module["_strtoll_l"] = asm["_strtoll_l"];
var _strtoul = Module["_strtoul"] = asm["_strtoul"];
var _strtoul_l = Module["_strtoul_l"] = asm["_strtoul_l"];
var _strtoull = Module["_strtoull"] = asm["_strtoull"];
var _strtoull_l = Module["_strtoull_l"] = asm["_strtoull_l"];
var _strtoumax = Module["_strtoumax"] = asm["_strtoumax"];
var _strtox = Module["_strtox"] = asm["_strtox"];
var _strtox_767 = Module["_strtox_767"] = asm["_strtox_767"];
var _strupr = Module["_strupr"] = asm["_strupr"];
var _strverscmp = Module["_strverscmp"] = asm["_strverscmp"];
var _strxfrm = Module["_strxfrm"] = asm["_strxfrm"];
var _sw_write = Module["_sw_write"] = asm["_sw_write"];
var _swab = Module["_swab"] = asm["_swab"];
var _swapc = Module["_swapc"] = asm["_swapc"];
var _swprintf = Module["_swprintf"] = asm["_swprintf"];
var _swscanf = Module["_swscanf"] = asm["_swscanf"];
var _symlink = Module["_symlink"] = asm["_symlink"];
var _symlinkat = Module["_symlinkat"] = asm["_symlinkat"];
var _sync = Module["_sync"] = asm["_sync"];
var _syslog = Module["_syslog"] = asm["_syslog"];
var _tan = Module["_tan"] = asm["_tan"];
var _tanf = Module["_tanf"] = asm["_tanf"];
var _tanh = Module["_tanh"] = asm["_tanh"];
var _tanhf = Module["_tanhf"] = asm["_tanhf"];
var _tanhl = Module["_tanhl"] = asm["_tanhl"];
var _tanl = Module["_tanl"] = asm["_tanl"];
var _tcdrain = Module["_tcdrain"] = asm["_tcdrain"];
var _tcflow = Module["_tcflow"] = asm["_tcflow"];
var _tcflush = Module["_tcflush"] = asm["_tcflush"];
var _tcgetattr = Module["_tcgetattr"] = asm["_tcgetattr"];
var _tcgetpgrp = Module["_tcgetpgrp"] = asm["_tcgetpgrp"];
var _tcgetsid = Module["_tcgetsid"] = asm["_tcgetsid"];
var _tcsendbreak = Module["_tcsendbreak"] = asm["_tcsendbreak"];
var _tcsetattr = Module["_tcsetattr"] = asm["_tcsetattr"];
var _tcsetpgrp = Module["_tcsetpgrp"] = asm["_tcsetpgrp"];
var _telldir = Module["_telldir"] = asm["_telldir"];
var _temper = Module["_temper"] = asm["_temper"];
var _tempnam = Module["_tempnam"] = asm["_tempnam"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _textdomain = Module["_textdomain"] = asm["_textdomain"];
var _tgamma = Module["_tgamma"] = asm["_tgamma"];
var _tgammaf = Module["_tgammaf"] = asm["_tgammaf"];
var _tgammal = Module["_tgammal"] = asm["_tgammal"];
var _threebyte_memmem = Module["_threebyte_memmem"] = asm["_threebyte_memmem"];
var _threebyte_strstr = Module["_threebyte_strstr"] = asm["_threebyte_strstr"];
var _tmpfile = Module["_tmpfile"] = asm["_tmpfile"];
var _tmpnam = Module["_tmpnam"] = asm["_tmpnam"];
var _to64 = Module["_to64"] = asm["_to64"];
var _to64_48 = Module["_to64_48"] = asm["_to64_48"];
var _to64_60 = Module["_to64_60"] = asm["_to64_60"];
var _toascii = Module["_toascii"] = asm["_toascii"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _tolower_l = Module["_tolower_l"] = asm["_tolower_l"];
var _toupper = Module["_toupper"] = asm["_toupper"];
var _toupper_l = Module["_toupper_l"] = asm["_toupper_l"];
var _towctrans = Module["_towctrans"] = asm["_towctrans"];
var _towctrans_l = Module["_towctrans_l"] = asm["_towctrans_l"];
var _towlower = Module["_towlower"] = asm["_towlower"];
var _towlower_l = Module["_towlower_l"] = asm["_towlower_l"];
var _towupper = Module["_towupper"] = asm["_towupper"];
var _towupper_l = Module["_towupper_l"] = asm["_towupper_l"];
var _tre_add_tag_left = Module["_tre_add_tag_left"] = asm["_tre_add_tag_left"];
var _tre_add_tag_right = Module["_tre_add_tag_right"] = asm["_tre_add_tag_right"];
var _tre_add_tags = Module["_tre_add_tags"] = asm["_tre_add_tags"];
var _tre_ast_new_catenation = Module["_tre_ast_new_catenation"] = asm["_tre_ast_new_catenation"];
var _tre_ast_new_iter = Module["_tre_ast_new_iter"] = asm["_tre_ast_new_iter"];
var _tre_ast_new_literal = Module["_tre_ast_new_literal"] = asm["_tre_ast_new_literal"];
var _tre_ast_new_node = Module["_tre_ast_new_node"] = asm["_tre_ast_new_node"];
var _tre_ast_new_union = Module["_tre_ast_new_union"] = asm["_tre_ast_new_union"];
var _tre_ast_to_tnfa = Module["_tre_ast_to_tnfa"] = asm["_tre_ast_to_tnfa"];
var _tre_compare_lit = Module["_tre_compare_lit"] = asm["_tre_compare_lit"];
var _tre_compute_nfl = Module["_tre_compute_nfl"] = asm["_tre_compute_nfl"];
var _tre_copy_ast = Module["_tre_copy_ast"] = asm["_tre_copy_ast"];
var _tre_expand_ast = Module["_tre_expand_ast"] = asm["_tre_expand_ast"];
var _tre_expand_macro = Module["_tre_expand_macro"] = asm["_tre_expand_macro"];
var _tre_fill_pmatch = Module["_tre_fill_pmatch"] = asm["_tre_fill_pmatch"];
var _tre_make_trans = Module["_tre_make_trans"] = asm["_tre_make_trans"];
var _tre_match_empty = Module["_tre_match_empty"] = asm["_tre_match_empty"];
var _tre_neg_char_classes_match = Module["_tre_neg_char_classes_match"] = asm["_tre_neg_char_classes_match"];
var _tre_new_lit = Module["_tre_new_lit"] = asm["_tre_new_lit"];
var _tre_parse = Module["_tre_parse"] = asm["_tre_parse"];
var _tre_purge_regset = Module["_tre_purge_regset"] = asm["_tre_purge_regset"];
var _tre_set_empty = Module["_tre_set_empty"] = asm["_tre_set_empty"];
var _tre_set_one = Module["_tre_set_one"] = asm["_tre_set_one"];
var _tre_set_union = Module["_tre_set_union"] = asm["_tre_set_union"];
var _tre_stack_destroy = Module["_tre_stack_destroy"] = asm["_tre_stack_destroy"];
var _tre_stack_new = Module["_tre_stack_new"] = asm["_tre_stack_new"];
var _tre_stack_num_objects = Module["_tre_stack_num_objects"] = asm["_tre_stack_num_objects"];
var _tre_stack_pop_int = Module["_tre_stack_pop_int"] = asm["_tre_stack_pop_int"];
var _tre_stack_pop_voidptr = Module["_tre_stack_pop_voidptr"] = asm["_tre_stack_pop_voidptr"];
var _tre_stack_push = Module["_tre_stack_push"] = asm["_tre_stack_push"];
var _tre_stack_push_int = Module["_tre_stack_push_int"] = asm["_tre_stack_push_int"];
var _tre_stack_push_voidptr = Module["_tre_stack_push_voidptr"] = asm["_tre_stack_push_voidptr"];
var _tre_tag_order = Module["_tre_tag_order"] = asm["_tre_tag_order"];
var _tre_tnfa_run_backtrack = Module["_tre_tnfa_run_backtrack"] = asm["_tre_tnfa_run_backtrack"];
var _tre_tnfa_run_parallel = Module["_tre_tnfa_run_parallel"] = asm["_tre_tnfa_run_parallel"];
var _trinkle = Module["_trinkle"] = asm["_trinkle"];
var _trunc = Module["_trunc"] = asm["_trunc"];
var _truncate = Module["_truncate"] = asm["_truncate"];
var _truncf = Module["_truncf"] = asm["_truncf"];
var _truncl = Module["_truncl"] = asm["_truncl"];
var _try_realloc_chunk = Module["_try_realloc_chunk"] = asm["_try_realloc_chunk"];
var _ttyname = Module["_ttyname"] = asm["_ttyname"];
var _ttyname_r = Module["_ttyname_r"] = asm["_ttyname_r"];
var _twobyte_memmem = Module["_twobyte_memmem"] = asm["_twobyte_memmem"];
var _twobyte_strstr = Module["_twobyte_strstr"] = asm["_twobyte_strstr"];
var _twoway_memmem = Module["_twoway_memmem"] = asm["_twoway_memmem"];
var _twoway_strstr = Module["_twoway_strstr"] = asm["_twoway_strstr"];
var _twoway_wcsstr = Module["_twoway_wcsstr"] = asm["_twoway_wcsstr"];
var _ualarm = Module["_ualarm"] = asm["_ualarm"];
var _umask = Module["_umask"] = asm["_umask"];
var _uname = Module["_uname"] = asm["_uname"];
var _ungetc = Module["_ungetc"] = asm["_ungetc"];
var _ungetwc = Module["_ungetwc"] = asm["_ungetwc"];
var _unlink = Module["_unlink"] = asm["_unlink"];
var _unlinkat = Module["_unlinkat"] = asm["_unlinkat"];
var _unlockpt = Module["_unlockpt"] = asm["_unlockpt"];
var _utimensat = Module["_utimensat"] = asm["_utimensat"];
var _valloc = Module["_valloc"] = asm["_valloc"];
var _vasprintf = Module["_vasprintf"] = asm["_vasprintf"];
var _vdprintf = Module["_vdprintf"] = asm["_vdprintf"];
var _versionsort = Module["_versionsort"] = asm["_versionsort"];
var _vfprintf = Module["_vfprintf"] = asm["_vfprintf"];
var _vfscanf = Module["_vfscanf"] = asm["_vfscanf"];
var _vfwprintf = Module["_vfwprintf"] = asm["_vfwprintf"];
var _vfwscanf = Module["_vfwscanf"] = asm["_vfwscanf"];
var _vprintf = Module["_vprintf"] = asm["_vprintf"];
var _vscanf = Module["_vscanf"] = asm["_vscanf"];
var _vsnprintf = Module["_vsnprintf"] = asm["_vsnprintf"];
var _vsprintf = Module["_vsprintf"] = asm["_vsprintf"];
var _vsscanf = Module["_vsscanf"] = asm["_vsscanf"];
var _vstrfmon_l = Module["_vstrfmon_l"] = asm["_vstrfmon_l"];
var _vswprintf = Module["_vswprintf"] = asm["_vswprintf"];
var _vswscanf = Module["_vswscanf"] = asm["_vswscanf"];
var _vwprintf = Module["_vwprintf"] = asm["_vwprintf"];
var _vwscanf = Module["_vwscanf"] = asm["_vwscanf"];
var _wcpcpy = Module["_wcpcpy"] = asm["_wcpcpy"];
var _wcpncpy = Module["_wcpncpy"] = asm["_wcpncpy"];
var _wcrtomb = Module["_wcrtomb"] = asm["_wcrtomb"];
var _wcscasecmp = Module["_wcscasecmp"] = asm["_wcscasecmp"];
var _wcscasecmp_l = Module["_wcscasecmp_l"] = asm["_wcscasecmp_l"];
var _wcscat = Module["_wcscat"] = asm["_wcscat"];
var _wcschr = Module["_wcschr"] = asm["_wcschr"];
var _wcscmp = Module["_wcscmp"] = asm["_wcscmp"];
var _wcscoll = Module["_wcscoll"] = asm["_wcscoll"];
var _wcscpy = Module["_wcscpy"] = asm["_wcscpy"];
var _wcscspn = Module["_wcscspn"] = asm["_wcscspn"];
var _wcsdup = Module["_wcsdup"] = asm["_wcsdup"];
var _wcslen = Module["_wcslen"] = asm["_wcslen"];
var _wcsncasecmp = Module["_wcsncasecmp"] = asm["_wcsncasecmp"];
var _wcsncasecmp_l = Module["_wcsncasecmp_l"] = asm["_wcsncasecmp_l"];
var _wcsncat = Module["_wcsncat"] = asm["_wcsncat"];
var _wcsncmp = Module["_wcsncmp"] = asm["_wcsncmp"];
var _wcsncpy = Module["_wcsncpy"] = asm["_wcsncpy"];
var _wcsnlen = Module["_wcsnlen"] = asm["_wcsnlen"];
var _wcsnrtombs = Module["_wcsnrtombs"] = asm["_wcsnrtombs"];
var _wcspbrk = Module["_wcspbrk"] = asm["_wcspbrk"];
var _wcsrchr = Module["_wcsrchr"] = asm["_wcsrchr"];
var _wcsrtombs = Module["_wcsrtombs"] = asm["_wcsrtombs"];
var _wcsspn = Module["_wcsspn"] = asm["_wcsspn"];
var _wcsstr = Module["_wcsstr"] = asm["_wcsstr"];
var _wcstod = Module["_wcstod"] = asm["_wcstod"];
var _wcstof = Module["_wcstof"] = asm["_wcstof"];
var _wcstoimax = Module["_wcstoimax"] = asm["_wcstoimax"];
var _wcstok = Module["_wcstok"] = asm["_wcstok"];
var _wcstol = Module["_wcstol"] = asm["_wcstol"];
var _wcstold = Module["_wcstold"] = asm["_wcstold"];
var _wcstoll = Module["_wcstoll"] = asm["_wcstoll"];
var _wcstombs = Module["_wcstombs"] = asm["_wcstombs"];
var _wcstoul = Module["_wcstoul"] = asm["_wcstoul"];
var _wcstoull = Module["_wcstoull"] = asm["_wcstoull"];
var _wcstoumax = Module["_wcstoumax"] = asm["_wcstoumax"];
var _wcstox = Module["_wcstox"] = asm["_wcstox"];
var _wcstox_776 = Module["_wcstox_776"] = asm["_wcstox_776"];
var _wcswcs = Module["_wcswcs"] = asm["_wcswcs"];
var _wcswidth = Module["_wcswidth"] = asm["_wcswidth"];
var _wcsxfrm = Module["_wcsxfrm"] = asm["_wcsxfrm"];
var _wctob = Module["_wctob"] = asm["_wctob"];
var _wctomb = Module["_wctomb"] = asm["_wctomb"];
var _wctrans = Module["_wctrans"] = asm["_wctrans"];
var _wctrans_l = Module["_wctrans_l"] = asm["_wctrans_l"];
var _wctype = Module["_wctype"] = asm["_wctype"];
var _wctype_l = Module["_wctype_l"] = asm["_wctype_l"];
var _wcwidth = Module["_wcwidth"] = asm["_wcwidth"];
var _wmemchr = Module["_wmemchr"] = asm["_wmemchr"];
var _wmemcmp = Module["_wmemcmp"] = asm["_wmemcmp"];
var _wmemcpy = Module["_wmemcpy"] = asm["_wmemcpy"];
var _wmemmove = Module["_wmemmove"] = asm["_wmemmove"];
var _wmemset = Module["_wmemset"] = asm["_wmemset"];
var _wms_close = Module["_wms_close"] = asm["_wms_close"];
var _wms_seek = Module["_wms_seek"] = asm["_wms_seek"];
var _wms_write = Module["_wms_write"] = asm["_wms_write"];
var _wordexp = Module["_wordexp"] = asm["_wordexp"];
var _wordfree = Module["_wordfree"] = asm["_wordfree"];
var _wprintf = Module["_wprintf"] = asm["_wprintf"];
var _wprintf_core = Module["_wprintf_core"] = asm["_wprintf_core"];
var _wrap_write = Module["_wrap_write"] = asm["_wrap_write"];
var _write = Module["_write"] = asm["_write"];
var _writev = Module["_writev"] = asm["_writev"];
var _wscanf = Module["_wscanf"] = asm["_wscanf"];
var _wstring_read = Module["_wstring_read"] = asm["_wstring_read"];
var _y0 = Module["_y0"] = asm["_y0"];
var _y0f = Module["_y0f"] = asm["_y0f"];
var _y1 = Module["_y1"] = asm["_y1"];
var _y1f = Module["_y1f"] = asm["_y1f"];
var _yn = Module["_yn"] = asm["_yn"];
var _ynf = Module["_ynf"] = asm["_ynf"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];

function b0() {
 ; abort(0);return +0;
}































































var FUNCTION_TABLE_X = [b0,asm['__ZNSt8bad_castD2Ev'],asm['__ZNSt12bad_any_castD0Ev'],asm['__ZNKSt12bad_any_cast4whatEv'],asm['__ZNSt12experimental15fundamentals_v112bad_any_castD0Ev'],asm['__ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv'],asm['__ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE'],asm['__ZNSt3__224__libcpp_debug_exceptionD2Ev'],asm['__ZNSt3__224__libcpp_debug_exceptionD0Ev'],asm['__ZNKSt3__224__libcpp_debug_exception4whatEv'],asm['__ZNSt3__28__c_nodeD2Ev'],asm['__ZNSt3__28__c_nodeD0Ev'],___cxa_pure_virtual,asm['__ZNSt16nested_exceptionD2Ev'],asm['__ZNSt16nested_exceptionD0Ev'],asm['__ZNSt3__214error_categoryD2Ev'],asm['__ZNSt3__223__future_error_categoryD0Ev'],asm['__ZNKSt3__223__future_error_category4nameEv'],asm['__ZNKSt3__214error_category23default_error_conditionEi'],asm['__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE'],asm['__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi'],asm['__ZNKSt3__223__future_error_category7messageEi'],asm['__ZNSt3__212future_errorD2Ev'],asm['__ZNSt3__212future_errorD0Ev'],asm['__ZNKSt11logic_error4whatEv'],asm['__ZNSt3__217__assoc_sub_stateD2Ev'],asm['__ZNSt3__217__assoc_sub_stateD0Ev'],asm['__ZNSt3__217__assoc_sub_state16__on_zero_sharedEv'],asm['__ZNSt3__217__assoc_sub_state9__executeEv']
,asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev'],asm['__ZNSt3__28ios_baseD2Ev'],asm['__ZNSt3__28ios_baseD0Ev'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv']
,asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev'],asm['__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev'],asm['__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev'],asm['__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev'],asm['__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev'],asm['__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev'],asm['__ZNSt3__219__iostream_categoryD0Ev'],asm['__ZNKSt3__219__iostream_category4nameEv'],asm['__ZNKSt3__219__iostream_category7messageEi'],asm['__ZNSt3__28ios_base7failureD2Ev']
,asm['__ZNSt3__28ios_base7failureD0Ev'],asm['__ZNKSt13runtime_error4whatEv'],asm['__ZNSt3__212system_errorD2Ev'],asm['__ZNSt3__212system_errorD0Ev'],asm['__ZNSt3__211__stdoutbufIwED0Ev'],asm['__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE'],asm['__ZNSt3__211__stdoutbufIwE4syncEv'],asm['__ZNSt3__211__stdoutbufIwE6xsputnEPKwi'],asm['__ZNSt3__211__stdoutbufIwE8overflowEj'],asm['__ZNSt3__26locale5__impD2Ev'],asm['__ZNSt3__26locale5__impD0Ev'],asm['__ZNSt3__26locale5facet16__on_zero_sharedEv'],asm['__ZNSt3__28messagesIwED2Ev'],asm['__ZNSt3__28messagesIwED0Ev'],asm['__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE'],asm['__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE'],asm['__ZNKSt3__28messagesIwE8do_closeEi'],asm['__ZNSt3__26locale5facetD2Ev'],asm['__ZNSt3__216__narrow_to_utf8ILj32EED0Ev'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j'],asm['__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv'],asm['__ZNSt3__217__widen_from_utf8ILj32EED0Ev'],asm['__ZNSt3__28messagesIcED2Ev'],asm['__ZNSt3__28messagesIcED0Ev'],asm['__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE']
,asm['__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNKSt3__28messagesIcE8do_closeEi'],asm['__ZNSt3__26locale5facetD0Ev'],asm['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc'],asm['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc'],asm['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc'],asm['__ZNKSt3__220__time_get_c_storageIwE7__weeksEv'],asm['__ZNKSt3__220__time_get_c_storageIwE8__monthsEv'],asm['__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv'],asm['__ZNKSt3__220__time_get_c_storageIwE3__cEv'],asm['__ZNKSt3__220__time_get_c_storageIwE3__rEv'],asm['__ZNKSt3__220__time_get_c_storageIwE3__xEv'],asm['__ZNKSt3__220__time_get_c_storageIwE3__XEv'],asm['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm']
,asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc'],asm['__ZNKSt3__220__time_get_c_storageIcE7__weeksEv'],asm['__ZNKSt3__220__time_get_c_storageIcE8__monthsEv'],asm['__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv'],asm['__ZNKSt3__220__time_get_c_storageIcE3__cEv'],asm['__ZNKSt3__220__time_get_c_storageIcE3__rEv'],asm['__ZNKSt3__220__time_get_c_storageIcE3__xEv'],asm['__ZNKSt3__220__time_get_c_storageIcE3__XEv'],asm['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe'],asm['__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE'],asm['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce'],asm['__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE'],asm['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe'],asm['__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE'],asm['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe'],asm['__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE'],asm['__ZNSt3__210moneypunctIwLb1EED2Ev'],asm['__ZNSt3__210moneypunctIwLb1EED0Ev'],asm['__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv']
,asm['__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv'],asm['__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv'],asm['__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv'],asm['__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv'],asm['__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv'],asm['__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv'],asm['__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv'],asm['__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv'],asm['__ZNSt3__210moneypunctIwLb0EED2Ev'],asm['__ZNSt3__210moneypunctIwLb0EED0Ev'],asm['__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv'],asm['__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv'],asm['__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv'],asm['__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv'],asm['__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv'],asm['__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv'],asm['__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv'],asm['__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv'],asm['__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv'],asm['__ZNSt3__210moneypunctIcLb1EED2Ev'],asm['__ZNSt3__210moneypunctIcLb1EED0Ev'],asm['__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv'],asm['__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv'],asm['__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv'],asm['__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv'],asm['__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv'],asm['__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv'],asm['__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv'],asm['__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv'],asm['__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv']
,asm['__ZNSt3__210moneypunctIcLb0EED2Ev'],asm['__ZNSt3__210moneypunctIcLb0EED0Ev'],asm['__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv'],asm['__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv'],asm['__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv'],asm['__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv'],asm['__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv'],asm['__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv'],asm['__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv'],asm['__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv'],asm['__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv'],asm['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv'],asm['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce']
,asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv'],asm['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv'],asm['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv'],asm['__ZNSt3__28numpunctIwED2Ev'],asm['__ZNSt3__28numpunctIwED0Ev'],asm['__ZNKSt3__28numpunctIwE16do_decimal_pointEv']
,asm['__ZNKSt3__28numpunctIwE16do_thousands_sepEv'],asm['__ZNKSt3__28numpunctIwE11do_groupingEv'],asm['__ZNKSt3__28numpunctIwE11do_truenameEv'],asm['__ZNKSt3__28numpunctIwE12do_falsenameEv'],asm['__ZNSt3__28numpunctIcED2Ev'],asm['__ZNSt3__28numpunctIcED0Ev'],asm['__ZNKSt3__28numpunctIcE16do_decimal_pointEv'],asm['__ZNKSt3__28numpunctIcE16do_thousands_sepEv'],asm['__ZNKSt3__28numpunctIcE11do_groupingEv'],asm['__ZNKSt3__28numpunctIcE11do_truenameEv'],asm['__ZNKSt3__28numpunctIcE12do_falsenameEv'],asm['__ZNSt3__27codecvtIDic11__mbstate_tED0Ev'],asm['__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j'],asm['__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv'],asm['__ZNSt3__27codecvtIwc11__mbstate_tED2Ev'],asm['__ZNSt3__27codecvtIwc11__mbstate_tED0Ev'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j'],asm['__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv'],asm['__ZNSt3__27codecvtIcc11__mbstate_tED0Ev']
,asm['__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j'],asm['__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv'],asm['__ZNSt3__25ctypeIwED0Ev'],asm['__ZNKSt3__25ctypeIwE5do_isEtw'],asm['__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt'],asm['__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_'],asm['__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_'],asm['__ZNKSt3__25ctypeIwE10do_toupperEw'],asm['__ZNKSt3__25ctypeIwE10do_toupperEPwPKw'],asm['__ZNKSt3__25ctypeIwE10do_tolowerEw'],asm['__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw'],asm['__ZNKSt3__25ctypeIwE8do_widenEc'],asm['__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw'],asm['__ZNKSt3__25ctypeIwE9do_narrowEwc'],asm['__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc'],asm['__ZNSt3__25ctypeIcED2Ev'],asm['__ZNSt3__25ctypeIcED0Ev'],asm['__ZNKSt3__25ctypeIcE10do_toupperEc'],asm['__ZNKSt3__25ctypeIcE10do_toupperEPcPKc'],asm['__ZNKSt3__25ctypeIcE10do_tolowerEc'],asm['__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc'],asm['__ZNKSt3__25ctypeIcE8do_widenEc'],asm['__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc'],asm['__ZNKSt3__25ctypeIcE9do_narrowEcc'],asm['__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc']
,asm['__ZNSt3__27collateIwED2Ev'],asm['__ZNSt3__27collateIwED0Ev'],asm['__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_'],asm['__ZNKSt3__27collateIwE12do_transformEPKwS3_'],asm['__ZNKSt3__27collateIwE7do_hashEPKwS3_'],asm['__ZNSt3__27collateIcED2Ev'],asm['__ZNSt3__27collateIcED0Ev'],asm['__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_'],asm['__ZNKSt3__27collateIcE12do_transformEPKcS3_'],asm['__ZNKSt3__27collateIcE7do_hashEPKcS3_'],asm['__ZNSt3__211__stdoutbufIcED0Ev'],asm['__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE'],asm['__ZNSt3__211__stdoutbufIcE4syncEv'],asm['__ZNSt3__211__stdoutbufIcE6xsputnEPKci'],asm['__ZNSt3__211__stdoutbufIcE8overflowEi'],asm['__ZNSt3__210__stdinbufIwED0Ev'],asm['__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE'],asm['__ZNSt3__210__stdinbufIwE9underflowEv'],asm['__ZNSt3__210__stdinbufIwE5uflowEv'],asm['__ZNSt3__210__stdinbufIwE9pbackfailEj'],asm['__ZNSt3__210__stdinbufIcED0Ev'],asm['__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE'],asm['__ZNSt3__210__stdinbufIcE9underflowEv'],asm['__ZNSt3__210__stdinbufIcE5uflowEv'],asm['__ZNSt3__210__stdinbufIcE9pbackfailEi'],asm['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev'],asm['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv']
,asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv'],asm['__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv'],asm['__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv'],asm['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv'],asm['__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv'],asm['__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv'],asm['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
,asm['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev'],asm['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev'],asm['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev'],asm['__ZNSt3__217moneypunct_bynameIcLb0EED2Ev'],asm['__ZNSt3__217moneypunct_bynameIcLb0EED0Ev'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv'],asm['__ZNSt3__217moneypunct_bynameIcLb1EED2Ev'],asm['__ZNSt3__217moneypunct_bynameIcLb1EED0Ev'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv'],asm['__ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv'],asm['__ZNSt3__217moneypunct_bynameIwLb0EED2Ev'],asm['__ZNSt3__217moneypunct_bynameIwLb0EED0Ev'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv']
,asm['__ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv'],asm['__ZNSt3__217moneypunct_bynameIwLb1EED2Ev'],asm['__ZNSt3__217moneypunct_bynameIwLb1EED0Ev'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv'],asm['__ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv'],asm['__ZNSt3__215messages_bynameIcED2Ev'],asm['__ZNSt3__215messages_bynameIcED0Ev'],asm['__ZNSt3__215messages_bynameIwED2Ev'],asm['__ZNSt3__215messages_bynameIwED0Ev'],asm['__ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev'],asm['__ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev'],asm['__ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev'],asm['__ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev'],asm['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev'],asm['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev'],asm['__ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev'],asm['__ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev'],asm['__ZNSt3__214collate_bynameIcED2Ev']
,asm['__ZNSt3__214collate_bynameIcED0Ev'],asm['__ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_'],asm['__ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_'],asm['__ZNSt3__214collate_bynameIwED2Ev'],asm['__ZNSt3__214collate_bynameIwED0Ev'],asm['__ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_'],asm['__ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_'],asm['__ZNSt3__212ctype_bynameIcED2Ev'],asm['__ZNSt3__212ctype_bynameIcED0Ev'],asm['__ZNKSt3__212ctype_bynameIcE10do_toupperEc'],asm['__ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc'],asm['__ZNKSt3__212ctype_bynameIcE10do_tolowerEc'],asm['__ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc'],asm['__ZNSt3__212ctype_bynameIwED2Ev'],asm['__ZNSt3__212ctype_bynameIwED0Ev'],asm['__ZNKSt3__212ctype_bynameIwE5do_isEtw'],asm['__ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt'],asm['__ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_'],asm['__ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_'],asm['__ZNKSt3__212ctype_bynameIwE10do_toupperEw'],asm['__ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw'],asm['__ZNKSt3__212ctype_bynameIwE10do_tolowerEw'],asm['__ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw'],asm['__ZNKSt3__212ctype_bynameIwE8do_widenEc'],asm['__ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw'],asm['__ZNKSt3__212ctype_bynameIwE9do_narrowEwc'],asm['__ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc'],asm['__ZNSt3__215numpunct_bynameIcED0Ev'],asm['__ZNSt3__215numpunct_bynameIwED0Ev'],asm['__ZNSt3__216__narrow_to_utf8ILj16EED0Ev']
,asm['__ZNSt3__217__widen_from_utf8ILj16EED0Ev'],asm['__ZNSt3__214__codecvt_utf8IwED0Ev'],asm['__ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__214__codecvt_utf8IwE11do_encodingEv'],asm['__ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv'],asm['__ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv'],asm['__ZNSt3__214__codecvt_utf8IDsED0Ev'],asm['__ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv'],asm['__ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv'],asm['__ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv'],asm['__ZNSt3__214__codecvt_utf8IDiED0Ev'],asm['__ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_'],asm['__ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv'],asm['__ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv'],asm['__ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IwLb0EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv']
,asm['__ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IwLb1EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IDsLb0EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IDsLb1EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IDiLb0EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_']
,asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv'],asm['__ZNSt3__215__codecvt_utf16IDiLb1EED0Ev'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv'],asm['__ZNSt3__220__codecvt_utf8_utf16IwED0Ev'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv'],asm['__ZNSt3__220__codecvt_utf8_utf16IDiED0Ev'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv'],asm['__ZNSt3__220__codecvt_utf8_utf16IDsED0Ev']
,asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_j'],asm['__ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv'],asm['__ZNSt3__212bad_weak_ptrD2Ev'],asm['__ZNSt3__212bad_weak_ptrD0Ev'],asm['__ZNKSt3__212bad_weak_ptr4whatEv'],asm['__ZNSt3__214__shared_countD2Ev'],asm['__ZNSt3__214__shared_countD0Ev'],asm['__ZNSt3__219__shared_weak_countD0Ev'],asm['__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info'],asm['__ZNSt12experimental19bad_optional_accessD2Ev'],asm['__ZNSt12experimental19bad_optional_accessD0Ev'],asm['__ZNSt19bad_optional_accessD2Ev'],asm['__ZNSt19bad_optional_accessD0Ev'],asm['__ZNKSt19bad_optional_access4whatEv'],asm['__ZNSt3__211regex_errorD2Ev'],asm['__ZNSt3__211regex_errorD0Ev'],asm['__ZNSt3__212strstreambufD2Ev'],asm['__ZNSt3__212strstreambufD0Ev'],asm['__ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj'],asm['__ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj'],asm['__ZNSt3__212strstreambuf9underflowEv'],asm['__ZNSt3__212strstreambuf9pbackfailEi'],asm['__ZNSt3__212strstreambuf8overflowEi'],asm['__ZNSt3__210istrstreamD1Ev'],asm['__ZNSt3__210istrstreamD0Ev']
,asm['__ZTv0_n12_NSt3__210istrstreamD1Ev'],asm['__ZTv0_n12_NSt3__210istrstreamD0Ev'],asm['__ZNSt3__210ostrstreamD1Ev'],asm['__ZNSt3__210ostrstreamD0Ev'],asm['__ZTv0_n12_NSt3__210ostrstreamD1Ev'],asm['__ZTv0_n12_NSt3__210ostrstreamD0Ev'],asm['__ZNSt3__29strstreamD1Ev'],asm['__ZNSt3__29strstreamD0Ev'],asm['__ZThn8_NSt3__29strstreamD1Ev'],asm['__ZThn8_NSt3__29strstreamD0Ev'],asm['__ZTv0_n12_NSt3__29strstreamD1Ev'],asm['__ZTv0_n12_NSt3__29strstreamD0Ev'],asm['__ZNSt3__224__generic_error_categoryD0Ev'],asm['__ZNKSt3__224__generic_error_category4nameEv'],asm['__ZNKSt3__224__generic_error_category7messageEi'],asm['__ZNSt3__223__system_error_categoryD0Ev'],asm['__ZNKSt3__223__system_error_category4nameEv'],asm['__ZNKSt3__223__system_error_category23default_error_conditionEi'],asm['__ZNKSt3__223__system_error_category7messageEi'],asm['__ZNSt3__214error_categoryD0Ev'],asm['__ZNSt3__212__do_messageD0Ev'],asm['__ZNKSt3__212__do_message7messageEi'],asm['__ZNSt9exceptionD2Ev'],asm['__ZNSt18bad_variant_accessD0Ev'],asm['__ZNKSt18bad_variant_access4whatEv'],asm['__ZNSt3__215__time_get_tempIcED0Ev'],asm['__ZNSt3__215__time_get_tempIwED0Ev'],asm['___stdio_close'],asm['___stdio_write'],asm['___stdio_seek']
,asm['___stdio_read'],asm['___stdout_write'],asm['_sn_write'],asm['__ZL25default_terminate_handlerv'],asm['__ZN10__cxxabiv116__shim_type_infoD2Ev'],asm['__ZN10__cxxabiv117__class_type_infoD0Ev'],asm['__ZNK10__cxxabiv116__shim_type_info5noop1Ev'],asm['__ZNK10__cxxabiv116__shim_type_info5noop2Ev'],asm['__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib'],asm['__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib'],asm['__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi'],asm['__ZN10__cxxabiv120__si_class_type_infoD0Ev'],asm['__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib'],asm['__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib'],asm['__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi'],asm['__ZL26default_unexpected_handlerv'],asm['__ZNSt9bad_allocD2Ev'],asm['__ZNSt9bad_allocD0Ev'],asm['__ZNKSt9bad_alloc4whatEv'],asm['__ZNSt20bad_array_new_lengthD0Ev'],asm['__ZNKSt20bad_array_new_length4whatEv'],asm['__ZNSt16bad_array_lengthD0Ev'],asm['__ZNKSt16bad_array_length4whatEv'],asm['__ZNSt9exceptionD0Ev'],asm['__ZNKSt9exception4whatEv'],asm['__ZNSt13bad_exceptionD0Ev'],asm['__ZNKSt13bad_exception4whatEv'],asm['__ZNSt11logic_errorD2Ev'],asm['__ZNSt11logic_errorD0Ev']
,asm['__ZNSt13runtime_errorD2Ev'],asm['__ZNSt13runtime_errorD0Ev'],asm['__ZNSt12domain_errorD0Ev'],asm['__ZNSt16invalid_argumentD0Ev'],asm['__ZNSt12length_errorD0Ev'],asm['__ZNSt12out_of_rangeD0Ev'],asm['__ZNSt11range_errorD0Ev'],asm['__ZNSt14overflow_errorD0Ev'],asm['__ZNSt15underflow_errorD0Ev'],asm['__ZNSt8bad_castD0Ev'],asm['__ZNKSt8bad_cast4whatEv'],asm['__ZNSt10bad_typeidD2Ev'],asm['__ZNSt10bad_typeidD0Ev'],asm['__ZNKSt10bad_typeid4whatEv'],asm['__ZNSt9type_infoD2Ev'],asm['__ZNSt9type_infoD0Ev'],asm['__ZN10__cxxabiv116__shim_type_infoD0Ev'],asm['__ZN10__cxxabiv123__fundamental_type_infoD0Ev'],asm['__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv119__pointer_type_infoD0Ev'],asm['__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv117__array_type_infoD0Ev'],asm['__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv120__function_type_infoD0Ev'],asm['__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv116__enum_type_infoD0Ev'],asm['__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv121__vmi_class_type_infoD0Ev'],asm['__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib'],asm['__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib']
,asm['__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi'],asm['__ZN10__cxxabiv117__pbase_type_infoD0Ev'],asm['__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv'],asm['__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev'],asm['_main'],asm['__ZdlPv'],asm['__ZNSt3__29to_stringEi'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev'],asm['__ZNSt3__211char_traitsIcE6lengthEPKc'],asm['__ZNSt11logic_errorC2EPKc'],asm['__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv'],asm['__Znwj'],asm['__ZNSt3__211char_traitsIcE4copyEPcPKcj'],asm['__ZNSt3__211char_traitsIcE6assignERcRKc'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj'],asm['__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv'],asm['__ZNSt3__211char_traitsIcE4moveEPcPKcj'],asm['__ZNSt3__218__libcpp_refstringC2EPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj'],asm['__ZNSt3__211char_traitsIcE6assignEPcjc'],asm['__ZNSt3__211char_traitsIcE11to_int_typeEc'],asm['__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impD2Ev'],asm['__ZNSt13exception_ptrD2Ev']
,asm['__ZNSt3__212future_errorC2ENS_10error_codeE'],asm['__ZNSt3__215future_categoryEv'],asm['__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE'],asm['__ZNKSt3__210error_code7messageEv'],_pthread_mutex_destroy,asm['__ZNSt3__25mutexD2Ev'],asm['___clang_call_terminate'],_pthread_cond_destroy,asm['__ZNSt3__218condition_variableD2Ev'],asm['__ZNSt3__28ios_base16__call_callbacksENS0_5eventE'],asm['__ZNSt3__26localeD2Ev'],asm['__ZNSt3__214__shared_count16__release_sharedEv'],asm['__ZNSt3__211char_traitsIcE3eofEv'],asm['__ZNSt3__211char_traitsIcE12to_char_typeEi'],asm['__ZNSt3__211char_traitsIwE3eofEv'],asm['__ZNSt3__211char_traitsIwE11to_int_typeEw'],asm['__ZNSt3__211char_traitsIwE4copyEPwPKwj'],asm['__ZNSt3__211char_traitsIwE12to_char_typeEj'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev'],asm['__ZNSt3__28ios_base4InitC2Ev'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv'],asm['__ZNSt3__28ios_base4InitD2Ev'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_'],asm['__ZNSt3__28ios_base5clearEj'],asm['__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv']
,___cxa_end_catch,asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_'],asm['__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE'],___cxa_throw,asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev'],asm['__ZNSt3__217iostream_categoryEv'],asm['__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE'],asm['__ZNSt3__212system_errorC2ENS_10error_codeEPKc'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev'],asm['__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t'],asm['__ZNSt3__28ios_base4initEPv'],asm['__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t'],asm['__ZNKSt3__26locale9use_facetERNS0_2idE'],asm['__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t'],asm['__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev'],asm['__ZNSt3__26locale2id6__initEv'],asm['__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv'],asm['__ZNSt3__26locale2id5__getEv'],asm['__ZNKSt3__26locale5__imp9use_facetEl'],asm['__ZNKSt3__26locale5__imp9has_facetEl'],asm['_pthread_mutex_unlock'],asm['_pthread_mutex_lock'],asm['_pthread_cond_broadcast'],___cxa_rethrow,asm['__ZNSt3__211__call_onceERVmPvPFvS2_E'],asm['__ZNSt3__26localeC2ERKS0_'],asm['__ZNSt3__214__shared_count12__add_sharedEv'],asm['__ZNSt3__211char_traitsIwE11eq_int_typeEjj']
,asm['__ZNSt3__211char_traitsIwE7not_eofEj'],asm['__ZNSt3__26locale8__globalEv'],asm['__ZNSt3__26localeC2Ev'],asm['__ZNSt3__26locale5__imp11make_globalEv'],asm['__ZNSt3__26locale5__imp12make_classicEv'],asm['__ZNSt3__26locale7classicEv'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_']
,asm['__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_'],asm['__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_'],asm['__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_']
,asm['__ZNSt3__26locale5__impC2Ej'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj'],asm['__ZNSt3__26__clocEv'],asm['__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj'],asm['__ZNSt3__26locale5__imp7installEPNS0_5facetEl'],asm['__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj'],asm['__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv'],asm['__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv'],asm['__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_'],asm['__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev'],asm['__ZNSt3__221__throw_runtime_errorEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw'],asm['__ZNSt13runtime_errorC2EPKc'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj'],asm['__ZNSt3__211char_traitsIwE6assignERwRKw'],asm['___newlocale'],asm['___uselocale'],asm['__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc'],asm['__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc'],asm['__ZNSt3__210__time_putD2Ev'],asm['__ZNSt3__211char_traitsIcE11eq_int_typeEii'],asm['__ZNSt3__220__time_get_c_storageIwEC2Ev'],asm['__ZNSt3__2L11init_wweeksEv'],asm['__ZNSt3__2L12init_wmonthsEv']
,asm['__ZNSt3__2L11init_wam_pmEv'],asm['__ZNSt3__211char_traitsIwE6lengthEPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj'],asm['__ZNSt3__211char_traitsIwE4moveEPwPKwj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw'],asm['__ZNKSt3__28ios_base6getlocEv'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE'],asm['__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi'],asm['__ZSt17__throw_bad_allocv'],asm['__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb'],asm['__ZNSt3__220__time_get_c_storageIcEC2Ev'],asm['__ZNSt3__2L10init_weeksEv'],asm['__ZNSt3__2L11init_monthsEv'],asm['__ZNSt3__2L10init_am_pmEv']
,asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE'],asm['__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi'],asm['__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb'],asm['__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz'],asm['__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri'],asm['__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i'],asm['__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj'],asm['__ZNSt3__211char_traitsIwE6assignEPwjw'],asm['__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri'],asm['__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i'],asm['__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_']
,asm['__ZNSt3__212__do_nothingEPv'],asm['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_'],asm['__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri'],asm['__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_'],asm['__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_'],asm['__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj'],asm['__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_'],asm['_free'],asm['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_'],asm['__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri'],asm['__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_'],asm['__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_'],asm['__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE'],asm['__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE'],asm['__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz'],asm['__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE'],asm['__ZNSt3__214__num_put_base14__format_floatEPcPKcj'],asm['__ZNSt3__214__num_put_base12__format_intEPcPKcbj'],asm['__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE'],asm['__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE'],asm['__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw'],asm['__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z'],asm['__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw'],asm['__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_'],asm['__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj']
,asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE'],asm['__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw'],asm['__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_'],asm['__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_']
,asm['__ZNSt3__28numpunctIwEC2Ej'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_'],asm['__ZNSt3__28numpunctIcEC2Ej'],asm['__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej'],asm['__ZNSt3__25ctypeIcE21__classic_lower_tableEv'],asm['__ZNSt3__25ctypeIcE21__classic_upper_tableEv'],asm['__ZNSt3__25ctypeIcE13classic_tableEv'],asm['__ZNSt3__25ctypeIcEC2EPKtbj'],asm['__ZdaPv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev'],asm['__ZNSt3__211char_traitsIcE7not_eofEi'],asm['__ZNSt3__210__stdinbufIwE9__getcharEb'],asm['__ZNSt3__210__stdinbufIcE9__getcharEb'],asm['__ZNKSt3__218__time_get_storageIcE15__do_date_orderEv'],asm['__ZNSt3__210__time_getD2Ev'],asm['__ZNKSt3__218__time_get_storageIwE15__do_date_orderEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_'],asm['___strcoll_l'],asm['___strxfrm_l'],asm['___wcscoll_l'],asm['___wcsxfrm_l'],asm['__Znaj'],asm['__ZNSt3__210istrstreamD2Ev'],asm['__ZNSt3__210ostrstreamD2Ev'],asm['__ZNSt3__29strstreamD2Ev'],asm['__ZNSt3__215system_categoryEv'],asm['__ZNSt3__216generic_categoryEv'],asm['__ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_']
,asm['__ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_']
,asm['__ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_']
,asm['__ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_'],asm['__ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_'],asm['__ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_'],asm['__ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_'],asm['__ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_'],asm['__ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_'],asm['__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_'],asm['__ZNSt3__212__rs_defaultC2Ev'],asm['__ZNSt3__212__rs_defaultC2ERKS0_'],asm['__ZNSt3__212__rs_defaultD2Ev']
,asm['__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj'],asm['__ZNSt3__212__rs_defaultclEv'],asm['__ZNSt3__223mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv'],asm['__ZNSt3__28__rs_getEv'],_clock_gettime,asm['__ZNSt3__220__throw_system_errorEiPKc'],asm['__ZNSt3__26chrono12system_clock3nowEv'],asm['__ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE'],asm['__ZNSt3__26chrono12system_clock11from_time_tEl'],asm['__ZNSt3__26chrono12steady_clock3nowEv'],_pthread_cond_signal,asm['__ZNSt3__218condition_variable10notify_oneEv'],asm['__ZNSt3__218condition_variable10notify_allEv'],_pthread_cond_wait,asm['__ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE'],_pthread_cond_timedwait,asm['__ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE'],asm['__ZNSt3__215__thread_structC2Ev'],asm['__ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE'],asm['__ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev'],asm['__ZNSt3__219__thread_local_dataEv'],asm['__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_'],asm['__ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE'],asm['__ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE'],asm['__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE'],asm['__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_'],asm['__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv'],asm['__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EjjS9_'],asm['__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev'],asm['__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_j']
,asm['__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEj'],asm['__ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv'],asm['__ZNSt3__219__thread_struct_impC2Ev'],asm['__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv'],asm['__ZNSt3__215__thread_structD2Ev'],asm['__ZNSt3__217__assoc_sub_state12__make_readyEv'],asm['__ZNSt3__219__thread_struct_impD2Ev'],___assert_fail,asm['__ZNSt3__25mutex6unlockEv'],asm['__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev'],asm['__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev'],asm['__ZNSt3__25mutex4lockEv'],asm['__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_j'],asm['__ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE'],asm['__ZNSt3__224__libcpp_debug_exceptionC2ERKNS_19__libcpp_debug_infoE'],asm['__ZNSt3__229__libcpp_throw_debug_functionERKNS_19__libcpp_debug_infoE'],asm['__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2Ev'],asm['__ZNSt3__2L13make_what_strERKNS_19__libcpp_debug_infoE'],asm['__ZNSt3__224__libcpp_debug_exceptionC2Ev'],asm['__ZNSt3__224__libcpp_debug_exception28__libcpp_debug_exception_impC2ERKS1_'],asm['__ZNSt3__224__libcpp_debug_exceptionC2ERKS0_'],asm['__ZNSt3__28__get_dbEv'],asm['__ZNSt3__211__libcpp_dbC2Ev'],asm['__ZNSt3__211__libcpp_dbD2Ev'],asm['__ZNSt3__28__i_nodeD2Ev'],asm['__ZNSt3__214__get_const_dbEv'],asm['__ZNKSt3__211__libcpp_db15__find_c_from_iEPv'],asm['__ZNSt3__221__murmur2_or_cityhashIjLj32EEclEPKvj'],asm['__ZNKSt3__211__libcpp_db15__find_iteratorEPKv'],asm['__ZNSt3__211__libcpp_db17__insert_iteratorEPv']
,asm['__ZNSt3__28__c_node5__addEPNS_8__i_nodeE'],asm['__ZNSt3__211__libcpp_db11__insert_icEPvPKv'],asm['__ZNSt3__212__next_primeEj'],asm['__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_'],asm['__ZNSt3__211__libcpp_db10__insert_cEPv'],asm['__ZNSt3__211__libcpp_db9__erase_iEPv'],asm['__ZNSt3__28__c_node8__removeEPNS_8__i_nodeE'],asm['__ZNSt3__211__libcpp_db16__invalidate_allEPv'],asm['__ZNKSt3__211__libcpp_db17__find_c_and_lockEPv'],asm['__ZNKSt3__211__libcpp_db8__find_cEPv'],asm['__ZNKSt3__211__libcpp_db6unlockEv'],asm['__ZNSt3__211__libcpp_db9__erase_cEPv'],asm['__ZNSt3__211__libcpp_db15__iterator_copyEPvPKv'],asm['__ZNKSt3__211__libcpp_db17__dereferenceableEPKv'],asm['__ZNKSt3__211__libcpp_db15__decrementableEPKv'],asm['__ZNKSt3__211__libcpp_db9__addableEPKvi'],asm['__ZNKSt3__211__libcpp_db15__subscriptableEPKvi'],asm['__ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_'],asm['__ZNSt3__211__libcpp_db4swapEPvS1_'],asm['__ZNSt3__211__libcpp_db10__insert_iEPv'],asm['__ZNSt13exception_ptrC2ERKS_'],asm['__ZNSt13exception_ptraSERKS_'],asm['__ZNSt16nested_exceptionC2Ev'],asm['__ZSt17current_exceptionv'],asm['__ZSt17rethrow_exceptionSt13exception_ptr'],asm['__ZNKSt16nested_exception14rethrow_nestedEv'],asm['__ZNSt3__217__assoc_sub_state9set_valueEv'],_pthread_getspecific,asm['__ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE'],asm['__ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv']
,asm['__ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE'],asm['__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE'],asm['__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_'],asm['__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv'],asm['__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EjjS5_'],asm['__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev'],asm['__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEj'],asm['__ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv'],asm['__ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr'],asm['__ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr'],asm['__ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE'],asm['__ZNSt3__217__assoc_sub_state4copyEv'],asm['__ZNSt3__211unique_lockINS_5mutexEE6unlockEv'],asm['__ZNSt3__217__assoc_sub_state4waitEv'],asm['__ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE'],asm['__ZNSt3__26futureIvED2Ev'],asm['__ZNSt3__26futureIvE3getEv'],asm['__ZNSt3__222__release_shared_countclEPNS_14__shared_countE'],asm['__ZNSt3__27promiseIvEC2Ev'],asm['__ZNSt3__27promiseIvED2Ev'],asm['__ZSt18make_exception_ptrINSt3__212future_errorEESt13exception_ptrT_'],asm['__ZNSt3__212future_errorC2ERKS0_'],asm['__ZNSt11logic_errorC2ERKS_'],asm['__ZNSt3__218__libcpp_refstringC2ERKS0_'],asm['__ZNKSt3__218__libcpp_refstring15__uses_refcountEv'],asm['__ZNSt3__27promiseIvE10get_futureEv'],asm['__ZNSt3__27promiseIvE9set_valueEv'],asm['__ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr'],asm['__ZNSt3__27promiseIvE24set_value_at_thread_exitEv'],asm['__ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr']
,asm['__ZNSt3__213shared_futureIvED2Ev'],asm['__ZNSt3__213shared_futureIvEaSERKS1_'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEcvbEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEEntEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3eofEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3badEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_'],asm['__ZNSt3__28ios_base7copyfmtERKS0_'],asm['__ZNSt3__26localeaSERKS0_'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEc'],asm['__ZNSt3__28ios_base5imbueERKNS_6localeE'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE'],asm['__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE6narrowEcc'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev']
,asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveERS3_'],asm['__ZNSt3__28ios_base4moveERS0_'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4moveEOS3_'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4swapERS3_'],asm['__ZNSt3__28ios_base4swapERS0_'],asm['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE9set_rdbufEPNS_15basic_streambufIcS2_EE'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEcvbEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4failEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEEntEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3eofEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3badEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEw'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5imbueERKNS_6localeE'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8pubimbueERKNS_6localeE'],asm['__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE6narrowEwc']
,asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveERS3_'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4moveEOS3_'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4swapERS3_'],asm['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE9set_rdbufEPNS_15basic_streambufIwS2_EE'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pubsetbufEPci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6snextcEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc'],asm['__ZNSt3__211char_traitsIcE2eqEcc'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKci'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv'],asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv']
,asm['__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi'],asm['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pubsetbufEPwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6snextcEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw'],asm['__ZNSt3__211char_traitsIwE2eqEww'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5ebackEv'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4gptrEv'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5egptrEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setgEPwS4_S4_'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbaseEv'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE4pptrEv'],asm['__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE5epptrEv'],asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5pbumpEi']
,asm['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4setpEPwS4_'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EOS3_'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EOS3_'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEaSEOS3_'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4swapERS3_'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b'],asm['__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRS3_S4_E'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_9basic_iosIcS2_EES6_E'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_8ios_baseES5_E'],asm['__ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv'],asm['__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6gcountEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERc']
,asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPci'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPcic'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPci'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEii'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPci'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE'],asm['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC2EOS3_'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EOS3_'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEaSEOS3_'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4swapERS3_'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b'],asm['__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRS3_S4_E'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_9basic_iosIwS2_EES6_E'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_8ios_baseES5_E'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs']
,asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv'],asm['__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6gcountEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERw'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwi'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwiw'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwi'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwiw'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreEij'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwi'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwi'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE'],asm['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE']
,asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EOS3_'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EOS3_'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEaSEOS3_'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE4swapERS3_'],asm['__ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_9basic_iosIcS2_EES6_E'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_8ios_baseES5_E'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5tellpEv'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpENS_4fposI11__mbstate_tEE'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5seekpExNS_8ios_base7seekdirE'],asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2Ev']
,asm['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1Ev'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2EOS3_'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EOS3_'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEaSEOS3_'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE4swapERS3_'],asm['__ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRS3_S4_E'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_9basic_iosIwS2_EES6_E'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_8ios_baseES5_E'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwi'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5tellpEv'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpENS_4fposI11__mbstate_tEE'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5seekpExNS_8ios_base7seekdirE']
,asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC2Ev'],asm['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1Ev'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC2EOS3_'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEC1EOS3_'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEEaSEOS3_'],asm['__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEE4swapERS3_'],asm['__ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE'],asm['__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__28ios_base6xallocEv'],asm['__ZNSt3__28ios_base5iwordEi'],asm['__ZNSt3__28ios_base5pwordEi'],asm['__ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi'],asm['__ZNSt3__28ios_base15sync_with_stdioEb'],asm['__ZNSt3__27collateIcEC2Ej'],asm['__ZNKSt3__27collateIcE7compareEPKcS3_S3_S3_'],asm['__ZNKSt3__27collateIcE9transformEPKcS3_'],asm['__ZNKSt3__27collateIcE4hashEPKcS3_'],asm['__ZNSt3__27collateIwEC2Ej'],asm['__ZNKSt3__27collateIwE7compareEPKwS3_S3_S3_'],asm['__ZNKSt3__27collateIwE9transformEPKwS3_'],asm['__ZNKSt3__27collateIwE4hashEPKwS3_'],asm['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm']
,asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe'],asm['__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv'],asm['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe'],asm['__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv'],asm['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce'],asm['__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv'],asm['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx']
,asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe'],asm['__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv'],asm['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10date_orderEv'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc'],asm['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10date_orderEv'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_timeES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_dateES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11get_weekdayES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13get_monthnameES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8get_yearES4_S4_RNS_8ios_baseERjP2tm'],asm['__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmcc'],asm['__ZNSt3__218__time_get_storageIcEC2EPKc'],asm['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj'],asm['__ZNSt3__215__time_get_tempIcEC2EPKc'],asm['__ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE'],asm['__ZNSt3__212_GLOBAL__N_121__throw_runtime_errorERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__210__time_getC2EPKc'],asm['__ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb'],asm['__ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi'],asm['__ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE']
,asm['__ZNSt3__212ctype_bynameIcEC2EPKcj'],asm['__ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'],asm['__ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_'],asm['__ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__218__time_get_storageIwEC2EPKc'],asm['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj'],asm['__ZNSt3__215__time_get_tempIwEC2EPKc'],asm['__ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_'],asm['__ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb'],asm['__ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi'],asm['__ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE'],asm['__ZNSt3__212ctype_bynameIwEC2EPKcj'],asm['__ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_'],asm['__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmcc'],asm['__ZNSt3__210__time_putC2EPKc'],asm['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj'],asm['__ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'],asm['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_'],asm['__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmcc']
,asm['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj'],asm['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj'],asm['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'],asm['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj'],asm['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__210moneypunctIcLb0EEC2Ej'],asm['__ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv'],asm['__ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv'],asm['__ZNKSt3__210moneypunctIcLb0EE8groupingEv'],asm['__ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv'],asm['__ZNKSt3__210moneypunctIcLb0EE13positive_signEv'],asm['__ZNKSt3__210moneypunctIcLb0EE13negative_signEv'],asm['__ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv'],asm['__ZNKSt3__210moneypunctIcLb0EE10pos_formatEv'],asm['__ZNKSt3__210moneypunctIcLb0EE10neg_formatEv'],asm['__ZNSt3__210moneypunctIcLb1EEC2Ej'],asm['__ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv'],asm['__ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv'],asm['__ZNKSt3__210moneypunctIcLb1EE8groupingEv'],asm['__ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv'],asm['__ZNKSt3__210moneypunctIcLb1EE13positive_signEv'],asm['__ZNKSt3__210moneypunctIcLb1EE13negative_signEv'],asm['__ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv'],asm['__ZNKSt3__210moneypunctIcLb1EE10pos_formatEv'],asm['__ZNKSt3__210moneypunctIcLb1EE10neg_formatEv'],asm['__ZNSt3__210moneypunctIwLb0EEC2Ej'],asm['__ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv'],asm['__ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv'],asm['__ZNKSt3__210moneypunctIwLb0EE8groupingEv']
,asm['__ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv'],asm['__ZNKSt3__210moneypunctIwLb0EE13positive_signEv'],asm['__ZNKSt3__210moneypunctIwLb0EE13negative_signEv'],asm['__ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv'],asm['__ZNKSt3__210moneypunctIwLb0EE10pos_formatEv'],asm['__ZNKSt3__210moneypunctIwLb0EE10neg_formatEv'],asm['__ZNSt3__210moneypunctIwLb1EEC2Ej'],asm['__ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv'],asm['__ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv'],asm['__ZNKSt3__210moneypunctIwLb1EE8groupingEv'],asm['__ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv'],asm['__ZNKSt3__210moneypunctIwLb1EE13positive_signEv'],asm['__ZNKSt3__210moneypunctIwLb1EE13negative_signEv'],asm['__ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv'],asm['__ZNKSt3__210moneypunctIwLb1EE10pos_formatEv'],asm['__ZNKSt3__210moneypunctIwLb1EE10neg_formatEv'],asm['__ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc'],asm['__ZNSt3__217moneypunct_bynameIcLb0EEC2EPKcj'],asm['__ZNSt3__2L30checked_string_to_char_convertERcPKcP15__locale_struct'],asm['__ZNSt3__2L10__init_patIcEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_'],asm['__ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_'],asm['__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj'],asm['__ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc'],asm['__ZNSt3__217moneypunct_bynameIcLb1EEC2EPKcj'],asm['__ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc'],asm['__ZNSt3__217moneypunct_bynameIwLb0EEC2EPKcj']
,asm['__ZNSt3__2L31checked_string_to_wchar_convertERwPKcP15__locale_struct'],asm['__ZNSt3__2L10__init_patIwEEvRNS_10money_base7patternERNS_12basic_stringIT_NS_11char_traitsIS5_EENS_9allocatorIS5_EEEEbcccS5_'],asm['__ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_'],asm['__ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_'],asm['__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEjj'],asm['__ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc'],asm['__ZNSt3__217moneypunct_bynameIwLb1EEC2EPKcj'],asm['__ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNSt3__211__money_getIcEC2Ev'],asm['__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRe'],asm['__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE'],asm['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNSt3__211__money_getIwEC2Ev'],asm['__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRe'],asm['__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE'],asm['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej'],asm['__ZNSt3__211__money_putIcEC2Ev'],asm['__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEce'],asm['__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE'],asm['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej'],asm['__ZNSt3__211__money_putIwEC2Ev'],asm['__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwe'],asm['__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE'],asm['__ZNSt3__28messagesIcEC2Ej'],asm['__ZNKSt3__28messagesIcE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE'],asm['__ZNKSt3__28messagesIcE3getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
,asm['__ZNKSt3__28messagesIcE5closeEi'],asm['__ZNSt3__28messagesIwEC2Ej'],asm['__ZNKSt3__28messagesIwE4openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE'],asm['__ZNKSt3__28messagesIwE3getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE'],asm['__ZNKSt3__28messagesIwE5closeEi'],asm['__ZNSt3__215messages_bynameIcEC2EPKcj'],asm['__ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__215messages_bynameIwEC2EPKcj'],asm['__ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2EPKcj'],asm['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2EPKcj'],asm['__ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcj'],asm['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2EPKcj'],asm['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2EPKcj'],asm['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__220__vector_base_commonILb1EEC2Ev'],asm['__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_'],asm['__ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_'],asm['__ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_']
,asm['__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_'],asm['__ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_'],asm['__ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_'],asm['__ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_'],asm['__ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'],asm['__ZNSt3__215numpunct_bynameIcE6__initEPKc'],asm['__ZNSt3__215numpunct_bynameIwE6__initEPKc'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j'],asm['__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv'],asm['__ZNSt3__26locale5__impC2ERKS1_'],asm['__ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi'],asm['__ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_']
,asm['__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_'],asm['__ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_'],asm['__ZNSt3__26locale5__impC2ERKS1_S3_i'],asm['__ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl'],asm['__ZNSt3__26localeC2EPKc'],asm['__ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__26localeC2ERKS0_PKci'],asm['__ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi'],asm['__ZNSt3__26localeC2ERKS0_S2_i'],asm['__ZNKSt3__26locale4nameEv'],asm['__ZNKSt3__26locale5__imp4nameEv'],asm['__ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl']
,asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj'],asm['__ZNSt3__26locale6globalERKS0_'],asm['__ZNSt3__211char_traitsIcE7compareEPKcS3_j'],asm['__ZNKSt3__26locale9has_facetERNS0_2idE'],asm['__ZNKSt3__26localeeqERKS0_'],asm['__ZNSt3__214collate_bynameIcEC2EPKcj'],asm['__ZNSt3__214collate_bynameIwEC2EPKcj'],asm['__ZNSt3__215numpunct_bynameIcEC2EPKcj'],asm['__ZNSt3__215numpunct_bynameIwEC2EPKcj'],asm['__ZNSt3__219__shared_weak_count12__add_sharedEv'],asm['__ZNSt3__219__shared_weak_count10__add_weakEv'],asm['__ZNSt3__219__shared_weak_count16__release_sharedEv'],asm['__ZNSt3__219__shared_weak_count14__release_weakEv'],asm['__ZNSt3__219__shared_weak_count4lockEv'],asm['_pthread_mutex_trylock'],_sched_yield,asm['__ZNSt3__28__sp_mut4lockEv'],asm['__ZNSt3__28__sp_mut6unlockEv'],asm['__ZNSt3__212__get_sp_mutEPKv'],asm['__ZNSt3__28__sp_mutC2EPv'],asm['__ZNSt3__217declare_reachableEPv'],asm['__ZNSt3__219declare_no_pointersEPcj'],asm['__ZNSt3__221undeclare_no_pointersEPcj'],asm['__ZNSt3__221__undeclare_reachableEPv'],asm['__ZNSt3__25alignEjjRPvRj'],asm['__ZNSt3__25mutex8try_lockEv'],asm['__ZNSt3__215recursive_mutexC2Ev'],asm['__ZNSt3__215recursive_mutexD2Ev'],asm['__ZNSt3__215recursive_mutex4lockEv'],asm['__ZNSt3__215recursive_mutex6unlockEv']
,asm['__ZNSt3__215recursive_mutex8try_lockEv'],asm['__ZNSt3__211timed_mutexC2Ev'],asm['__ZNSt3__211timed_mutexD2Ev'],asm['__ZNSt3__211timed_mutex4lockEv'],asm['__ZNSt3__211timed_mutex8try_lockEv'],asm['__ZNSt3__211timed_mutex6unlockEv'],asm['__ZNSt3__221recursive_timed_mutexC2Ev'],asm['__ZNSt3__221recursive_timed_mutexD2Ev'],_pthread_equal,asm['__ZNSt3__221recursive_timed_mutex4lockEv'],asm['_pthread_self'],asm['__ZNSt3__221recursive_timed_mutex8try_lockEv'],asm['__ZNSt3__221recursive_timed_mutex6unlockEv'],asm['__ZnwjRKSt9nothrow_t'],asm['__ZnajRKSt9nothrow_t'],asm['__ZdlPvRKSt9nothrow_t'],asm['__ZdlPvj'],asm['__ZdaPvRKSt9nothrow_t'],asm['__ZdaPvj'],asm['__ZnwjSt11align_val_t'],asm['__ZnwjSt11align_val_tRKSt9nothrow_t'],asm['__ZnajSt11align_val_t'],asm['__ZnajSt11align_val_tRKSt9nothrow_t'],asm['__ZdlPvSt11align_val_t'],asm['__ZdlPvSt11align_val_tRKSt9nothrow_t'],asm['__ZdlPvjSt11align_val_t'],asm['__ZdaPvSt11align_val_t'],asm['__ZdaPvSt11align_val_tRKSt9nothrow_t'],asm['__ZdaPvjSt11align_val_t'],asm['__ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
,asm['__ZNSt3__213random_deviceD2Ev'],asm['__ZNSt3__213random_deviceclEv'],asm['__ZNKSt3__213random_device7entropyEv'],asm['__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc'],asm['__ZNSt3__220__get_collation_nameEPKc'],asm['__ZNSt3__215__get_classnameEPKcb'],asm['__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE'],asm['__ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE'],asm['__ZNSt3__219__shared_mutex_baseC2Ev'],asm['__ZNSt3__219__shared_mutex_base4lockEv'],asm['__ZNSt3__219__shared_mutex_base8try_lockEv'],asm['__ZNSt3__219__shared_mutex_base6unlockEv'],asm['__ZNSt3__219__shared_mutex_base11lock_sharedEv'],asm['__ZNSt3__219__shared_mutex_base15try_lock_sharedEv'],asm['__ZNSt3__219__shared_mutex_base13unlock_sharedEv'],asm['__ZNSt3__218shared_timed_mutexC2Ev'],asm['__ZNSt3__218shared_timed_mutex4lockEv'],asm['__ZNSt3__218shared_timed_mutex8try_lockEv'],asm['__ZNSt3__218shared_timed_mutex6unlockEv'],asm['__ZNSt3__218shared_timed_mutex11lock_sharedEv'],asm['__ZNSt3__218shared_timed_mutex15try_lock_sharedEv'],asm['__ZNSt3__218shared_timed_mutex13unlock_sharedEv'],asm['__ZNSt11logic_erroraSERKS_'],asm['__ZNSt3__218__libcpp_refstringaSERKS0_'],asm['__ZNSt13runtime_errorC2ERKS_'],asm['__ZNSt13runtime_erroraSERKS_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_']
,asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_RKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcRKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcjRKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ejc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EjcRKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jRKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EERKS4_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcERKS4_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_']
,asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6rbeginEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4rendEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6cbeginEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4cendEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7crbeginEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5crendEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc']
,asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13shrink_to_fitEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLENS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendENS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_jj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5frontEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignENS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEOS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_jj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_']
,asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjNS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjRKS5_jj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEESt16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPcEEE4typeENSB_IS8_EESA_SA_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEES9_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjNS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjRKS5_jj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjjc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_RKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_NS_17basic_string_viewIcS2_EE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_j'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_S8_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_jc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceENS_11__wrap_iterIPKcEES9_St16initializer_listIcE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceIPKcEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6substrEjj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4swapERS5_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findERKS5_j'],asm['__ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_'],asm['__ZNSt3__211char_traitsIcE4findEPKcjRS2_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findENS_17basic_string_viewIcS2_EEj']
,asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj'],asm['__ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindERKS5_j'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindENS_17basic_string_viewIcS2_EEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj'],asm['__ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofENS_17basic_string_viewIcS2_EEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofENS_17basic_string_viewIcS2_EEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofENS_17basic_string_viewIcS2_EEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofENS_17basic_string_viewIcS2_EEj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcjj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcj'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEcj']
,asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareERKS5_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareENS_17basic_string_viewIcS2_EE'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjNS_17basic_string_viewIcS2_EE'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjRKS5_jj'],asm['__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKc'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12__invariantsEv'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS4_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_RKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv']
,asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwRKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwjRKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ejw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EjwRKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jjRKS4_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jRKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EERKS4_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwERKS4_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv']
,asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6rbeginEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4rendEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6cbeginEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4cendEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7crbeginEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5crendEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6lengthEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13shrink_to_fitEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj']
,asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLERKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLENS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendENS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLEw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEpLESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_jj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5frontEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignENS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEOS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_jj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKwj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjNS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjRKS5_jj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEjPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEjw']
,asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEESt16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertIPKwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueENS_11__wrap_iterIPwEEE4typeENSB_IS8_EESA_SA_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEES9_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKwj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjNS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjRKS5_jj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjPKw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEjjjw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_RKS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_NS_17basic_string_viewIwS2_EE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_j'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_S8_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_jw'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceENS_11__wrap_iterIPKwEES9_St16initializer_listIwE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceIPKwEENS_9enable_ifIXsr19__is_input_iteratorIT_EE5valueERS5_E4typeENS_11__wrap_iterIS8_EESF_SA_SA_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6substrEjj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4swapERS5_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13get_allocatorEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findERKS5_j'],asm['__ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_'],asm['__ZNSt3__211char_traitsIwE4findEPKwjRS2_'],asm['__ZNSt3__211char_traitsIwE7compareEPKwS3_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwj']
,asm['__ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindERKS5_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwj'],asm['__ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofERKS5_j'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofENS_17basic_string_viewIwS2_EEj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwjj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareERKS5_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareENS_17basic_string_viewIwS2_EE'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjNS_17basic_string_viewIwS2_EE']
,asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKwj'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjRKS5_jj'],asm['__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEjjPKw'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12__invariantsEv'],asm['__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwjj'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE'],asm['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb0EEE'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji'],asm['__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji'],asm['__ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji'],asm['__ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIlNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji'],asm['__ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji'],asm['__ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerImNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji'],asm['__ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji']
,asm['__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji'],asm['__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji'],asm['__ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji'],asm['__ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_110as_integerIyNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pji'],asm['__ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPji'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj'],asm['__ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIfNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj'],asm['__ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj'],asm['__ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIdNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj'],asm['__ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj'],asm['__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEET_RKNS2_IcNS3_IcEENS5_IcEEEERKT0_Pj'],asm['__ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPj'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEjEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEj'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczElEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEl'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEmEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEm'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczExEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEx'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEyEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEy']
,asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEfEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEf'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEd'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEeEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__29to_stringEe'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEiEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEi'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEjEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEj'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzElEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEl'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEmEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEm'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzExEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEx'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEyEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEy'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEfEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEf'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEdEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEd'],asm['__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPFiPwjPKwzEeEET_T0_SD_PKNSD_10value_typeET1_'],asm['__ZNSt3__210to_wstringEe'],asm['__ZNSt3__212strstreambufC2Ei'],asm['__ZNSt3__212strstreambufC2EPFPvjEPFvS1_E'],asm['__ZNSt3__212strstreambuf6__initEPciS1_'],asm['__ZNSt3__212strstreambufC2EPciS1_'],asm['__ZNSt3__212strstreambufC2EPKci'],asm['__ZNSt3__212strstreambufC2EPaiS1_']
,asm['__ZNSt3__212strstreambufC2EPKai'],asm['__ZNSt3__212strstreambufC2EPhiS1_'],asm['__ZNSt3__212strstreambufC2EPKhi'],asm['__ZNSt3__212strstreambuf4swapERS0_'],asm['__ZNSt3__212strstreambuf6freezeEb'],asm['__ZNSt3__212strstreambuf3strEv'],asm['__ZNKSt3__212strstreambuf6pcountEv'],asm['__ZNKSt3__215error_condition7messageEv'],asm['__ZNSt3__212system_errorC2ENS_10error_codeE'],asm['__ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'],asm['__ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc'],asm['__ZNSt3__212system_errorC2EiRKNS_14error_categoryE'],asm['__ZNSt3__26threadD2Ev'],asm['__ZNSt3__26thread4joinEv'],asm['__ZNSt3__26thread6detachEv'],_sysconf,asm['__ZNSt3__26thread20hardware_concurrencyEv'],asm['__ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE'],asm['__ZNSt3__28valarrayIjEC2Ej'],asm['__ZNSt3__28valarrayIjE6resizeEjj'],asm['__ZNSt3__28valarrayIjED2Ev'],asm['__ZNSt3__26gslice6__initEj'],asm['_malloc'],asm['_calloc'],asm['_realloc'],asm['_realloc_in_place'],asm['_memalign'],asm['_posix_memalign'],asm['_valloc'],asm['_pvalloc']
,asm['_independent_calloc'],asm['_independent_comalloc'],asm['_bulk_free'],asm['_malloc_trim'],asm['_malloc_footprint'],asm['_malloc_max_footprint'],asm['_malloc_footprint_limit'],asm['_malloc_set_footprint_limit'],asm['_mallinfo'],asm['_malloc_stats'],asm['_mallopt'],asm['_malloc_usable_size'],asm['_dummy_737'],asm['___syscall_ret'],asm['___errno_location'],asm['_aligned_alloc'],asm['_strlwr'],asm['_tolower'],asm['_isupper'],asm['_strtoull_l'],asm['_strtoull'],asm['___shlim'],asm['___intscan'],asm['___shgetc'],asm['_isspace'],asm['___uflow'],asm['___toread'],asm['_strtoll_l'],asm['_strtoll'],asm['_strtoul_l']
,asm['_strtoul'],asm['_strtol_l'],asm['_strtol'],asm['_strupr'],asm['_toupper'],asm['_islower'],asm['___synccall'],asm['_cabs'],asm['_hypot'],asm['_cabsf'],asm['_hypotf'],asm['_cabsl'],asm['_cacos'],asm['_casin'],asm['_csqrt'],asm['_clog'],asm['_carg'],asm['_copysign'],asm['_cacosf'],asm['_casinf'],asm['_csqrtf'],asm['_clogf'],asm['_cargf'],asm['_copysignf'],asm['_cacosh'],asm['_cacoshf'],asm['_cacoshl'],asm['_cacosl'],asm['_cargl'],asm['_casinh']
,asm['_casinhf'],asm['_casinhl'],asm['_casinl'],asm['_catan'],asm['_catanf'],asm['_catanh'],asm['_catanhf'],asm['_catanhl'],asm['_catanl'],asm['_ccos'],asm['_ccosh'],asm['_cosh'],asm['_sinh'],asm['___ldexp_cexp'],asm['_expm1'],asm['___expo2'],asm['_ccosf'],asm['_ccoshf'],asm['_coshf'],asm['_sinhf'],asm['___ldexp_cexpf'],asm['_expm1f'],asm['___expo2f'],asm['_ccoshl'],asm['_ccosl'],asm['_cexp'],asm['_cexpf'],asm['_cexpl'],asm['_cimag'],asm['_cimagf']
,asm['_cimagl'],asm['_clogl'],asm['_conj'],asm['_conjf'],asm['_conjl'],asm['_cpow'],asm['_cpowf'],asm['_cpowl'],asm['_cproj'],asm['_cprojf'],asm['_cprojl'],asm['_creal'],asm['_crealf'],asm['_creall'],asm['_csin'],asm['_csinh'],asm['_csinf'],asm['_csinhf'],asm['_csinhl'],asm['_csinl'],asm['_csqrtl'],asm['_ctan'],asm['_ctanh'],asm['_ctanf'],asm['_ctanhf'],asm['_ctanhl'],asm['_ctanl'],asm['_crypt'],asm['___crypt_r'],asm['___crypt_md5']
,asm['___crypt_blowfish'],asm['___crypt_sha256'],asm['___crypt_sha512'],asm['___crypt_des'],asm['_strcmp'],asm['___des_setkey'],asm['___do_des'],asm['_memcmp'],asm['_strncmp'],asm['_isdigit'],asm['_sprintf'],asm['_vsprintf'],asm['_vsnprintf'],asm['_vfprintf'],asm['___lockfile'],asm['___unlockfile'],asm['_strerror'],asm['_memchr'],asm['_wctomb'],asm['_frexpl'],asm['_frexp'],asm['_wcrtomb'],asm['___strerror_l'],asm['___lctrans'],asm['___lctrans_impl'],asm['___mo_lookup'],asm['___fwritex'],asm['___towrite'],asm['_strnlen'],asm['_setkey']
,asm['_encrypt'],asm['_isalnum'],asm['_isalpha'],asm['___isalnum_l'],asm['___isalpha_l'],asm['_isascii'],asm['_isblank'],asm['___isblank_l'],asm['_iscntrl'],asm['___iscntrl_l'],asm['___isdigit_l'],asm['_isgraph'],asm['___isgraph_l'],asm['___islower_l'],asm['_isprint'],asm['___isprint_l'],asm['_ispunct'],asm['___ispunct_l'],asm['___isspace_l'],asm['___isupper_l'],asm['_iswalnum'],asm['_iswdigit'],asm['_iswalpha'],asm['___iswalnum_l'],asm['___iswalpha_l'],asm['_iswblank'],asm['___iswblank_l'],asm['_iswcntrl'],asm['___iswcntrl_l'],asm['_iswctype']
,asm['_iswgraph'],asm['_iswlower'],asm['_iswprint'],asm['_iswpunct'],asm['_iswspace'],asm['_iswupper'],asm['_iswxdigit'],asm['_towlower'],asm['_wcschr'],asm['_wcslen'],asm['_towupper'],asm['_wctype'],asm['___iswctype_l'],asm['___wctype_l'],asm['___iswdigit_l'],asm['___iswgraph_l'],asm['___iswlower_l'],asm['___iswprint_l'],asm['___iswpunct_l'],asm['___iswspace_l'],asm['___iswupper_l'],asm['___iswxdigit_l'],asm['_isxdigit'],asm['___isxdigit_l'],asm['_toascii'],asm['___tolower_l'],asm['___toupper_l'],asm['___towupper_l'],asm['___towlower_l'],asm['_wcswidth']
,asm['_wcwidth'],asm['_wctrans'],asm['_towctrans'],asm['___wctrans_l'],asm['___towctrans_l'],asm['___ctype_b_loc'],asm['___ctype_get_mb_cur_max'],asm['___ctype_tolower_loc'],asm['___ctype_toupper_loc'],asm['_alphasort'],asm['_strcoll'],asm['_closedir'],asm['_close'],asm['_dirfd'],asm['_fdopendir'],asm['_fstat'],asm['_fcntl'],asm['___procfdname'],asm['_opendir'],asm['_open'],asm['_readdir'],asm['_readdir_r'],asm['_rewinddir'],asm['_lseek'],asm['_scandir'],asm['_qsort'],asm['_seekdir'],asm['_telldir'],asm['_versionsort'],asm['_strverscmp']
,asm['___getdents'],asm['_creat'],asm['_openat'],asm['_posix_fadvise'],asm['_posix_fallocate'],asm['_fegetexceptflag'],asm['_fetestexcept'],asm['_feholdexcept'],asm['_fegetenv'],asm['_feclearexcept'],asm['_feraiseexcept'],asm['_fegetround'],asm['___fesetround'],asm['_fesetenv'],asm['_fesetexceptflag'],asm['_fesetround'],asm['_feupdateenv'],asm['___flt_rounds'],asm['___floatscan'],asm['_scalbn'],asm['_copysignl'],asm['_fmodl'],asm['_scalbnl'],asm['_fmod'],asm['___libc_get_version'],asm['_bind_textdomain_codeset'],asm['_strcasecmp'],asm['_catclose'],asm['_catgets'],asm['_catopen']
,asm['_bindtextdomain'],asm['_strlen'],asm['_dcngettext'],asm['___gettextdomain'],asm['_dummy'],asm['___munmap'],asm['_strchr'],asm['___pleval'],asm['___strchrnul'],asm['_dcgettext'],asm['_dngettext'],asm['_dgettext'],asm['___duplocale'],asm['_freelocale'],asm['___loc_is_allocated'],asm['_iconv_open'],asm['_iconv_close'],asm['_iconv'],asm['_mbrtowc'],asm['_isalnum_l'],asm['_isalpha_l'],asm['_isblank_l'],asm['_iscntrl_l'],asm['_isdigit_l'],asm['_isgraph_l'],asm['_islower_l'],asm['_isprint_l'],asm['_ispunct_l'],asm['_isspace_l'],asm['_isupper_l']
,asm['_iswalnum_l'],asm['_iswalpha_l'],asm['_iswblank_l'],asm['_iswcntrl_l'],asm['_iswctype_l'],asm['_iswdigit_l'],asm['_iswgraph_l'],asm['_iswlower_l'],asm['_iswprint_l'],asm['_iswpunct_l'],asm['_iswspace_l'],asm['_iswupper_l'],asm['_iswxdigit_l'],asm['_isxdigit_l'],asm['___nl_langinfo_l'],asm['___nl_langinfo'],asm['_localeconv'],asm['___get_locale'],asm['_setlocale'],asm['_strcasecmp_l'],asm['_strerror_l'],asm['_strfmon_l'],asm['_snprintf'],asm['_strfmon'],asm['_strncasecmp_l'],asm['_strncasecmp'],asm['_strcpy'],asm['___stpcpy'],asm['_strxfrm'],asm['_textdomain']
,asm['_gettext'],asm['_ngettext'],asm['_tolower_l'],asm['_toupper_l'],asm['_towctrans_l'],asm['_towlower_l'],asm['_towupper_l'],asm['_wcscmp'],asm['_wcscoll'],asm['_wmemcpy'],asm['_wcsxfrm'],asm['_wctrans_l'],asm['_wctype_l'],asm['___lctrans_cur'],asm['_acosh'],asm['_log1p'],asm['_acoshf'],asm['_log1pf'],asm['_acoshl'],asm['_asinh'],asm['_asinhf'],asm['_asinhl'],asm['_atanh'],asm['_atanhf'],asm['_atanhl'],asm['_cbrt'],asm['_cbrtf'],asm['_cbrtl'],asm['_coshl'],asm['_erf']
,asm['_erfc'],asm['_erff'],asm['_erfcf'],asm['_erfl'],asm['_erfcl'],asm['_exp10'],asm['_modf'],asm['_exp2'],asm['_exp10f'],asm['_modff'],asm['_exp2f'],asm['_exp10l'],asm['_exp2l'],asm['_expm1l'],asm['_fdim'],asm['_fdimf'],asm['_fdiml'],asm['_finite'],asm['_finitef'],asm['_fma'],asm['_nextafter'],asm['_ilogb'],asm['_fmaf'],asm['_fmal'],asm['_fmax'],asm['_fmaxf'],asm['_fmaxl'],asm['_fmin'],asm['_fminf'],asm['_fminl']
,asm['_fmodf'],asm['_frexpf'],asm['_hypotl'],asm['_ilogbf'],asm['_ilogbl'],asm['_j0'],asm['_y0'],asm['_j0f'],asm['_y0f'],asm['_j1'],asm['_y1'],asm['_j1f'],asm['_y1f'],asm['_jn'],asm['_yn'],asm['_jnf'],asm['_ynf'],asm['_ldexp'],asm['_ldexpf'],asm['_scalbnf'],asm['_ldexpl'],asm['_lgamma'],asm['___lgamma_r'],asm['___sin'],asm['___cos'],asm['_lgammaf'],asm['___lgammaf_r'],asm['___sindf'],asm['___cosdf'],asm['___lgammal_r']
,asm['_lgammal'],asm['_llrint'],asm['_rint'],asm['_llrintf'],asm['_llrintl'],asm['_llround'],asm['_llroundf'],asm['_llroundl'],asm['_roundl'],asm['_log10'],asm['_log10f'],asm['_log10l'],asm['_log1pl'],asm['_log2'],asm['_log2f'],asm['_log2l'],asm['_logb'],asm['_logbf'],asm['_logbl'],asm['_lrint'],asm['_lrintf'],asm['_lrintl'],asm['_lround'],asm['_lroundf'],asm['_lroundl'],asm['_modfl'],asm['_nan'],asm['_nanf'],asm['_nanl'],asm['_nearbyint']
,asm['_nearbyintf'],asm['_nearbyintl'],asm['_nextafterf'],asm['_nextafterl'],asm['_nexttoward'],asm['_nexttowardf'],asm['_nexttowardl'],asm['_remainder'],asm['_remquo'],asm['_remainderf'],asm['_remquof'],asm['_remainderl'],asm['_remquol'],asm['_rintl'],asm['_scalb'],asm['_scalbf'],asm['_scalbln'],asm['_scalblnf'],asm['_scalblnl'],asm['_significand'],asm['_significandf'],asm['_sincos'],asm['___rem_pio2'],asm['___rem_pio2_large'],asm['_sincosf'],asm['___rem_pio2f'],asm['_sincosl'],asm['_sinhl'],asm['_tanh'],asm['_tanhf']
,asm['_tanhl'],asm['_tgamma'],asm['_tgammaf'],asm['_tgammal'],asm['_trunc'],asm['_truncf'],asm['_truncl'],asm['___fpclassify'],asm['___fpclassifyf'],asm['___fpclassifyl'],asm['___signbit'],asm['___signbitf'],asm['___signbitl'],asm['___tan'],asm['___tandf'],asm['_a64l'],asm['_l64a'],asm['_basename'],asm['_dirname'],asm['___emscripten_pthread_data_constructor'],asm['_ffs'],asm['_ffsl'],asm['_ffsll'],asm['_fmtmsg'],asm['_dprintf'],asm['_wrap_write'],asm['_vdprintf'],asm['_forkpty'],asm['_openpty'],asm['_pipe2']
,asm['_login_tty'],asm['_write'],asm['_read'],asm['_setsid'],asm['_ioctl'],asm['_dup2'],asm['_pipe'],asm['_tcsetattr'],asm['_getauxval'],asm['_getdomainname'],asm['_uname'],asm['_getgrouplist'],asm['_gethostid'],asm['___getopt_msg'],asm['_flockfile'],asm['_fputs'],asm['_fwrite'],asm['_putc'],asm['_funlockfile'],asm['___unlist_locked_file'],asm['___overflow'],asm['_ftrylockfile'],asm['_getopt'],asm['_mbtowc'],asm['_getopt_long'],asm['_getopt_long_only'],asm['_getpriority'],asm['_getresgid'],asm['_getresuid'],asm['_getrlimit']
,asm['_getrusage'],asm['_getsubopt'],asm['___strdup'],asm['_get_current_dir_name'],asm['_stat'],asm['_getcwd'],asm['_initgroups'],asm['_issetugid'],asm['_lockf'],asm['_getpid'],asm['_setmntent'],asm['_fopen'],asm['___fmodeflags'],asm['___fdopen'],asm['___ofl_add'],asm['___ofl_lock'],asm['___ofl_unlock'],asm['_endmntent'],asm['_fclose'],asm['_fflush'],asm['_getmntent_r'],asm['_fgets'],asm['_feof'],asm['_ferror'],asm['_fscanf'],asm['_sscanf'],asm['_do_read'],asm['_vsscanf'],asm['_vfscanf'],asm['_mbsinit']
,asm['___string_read'],asm['_getmntent'],asm['_addmntent'],asm['_fseek'],asm['_fprintf'],asm['___fseeko'],asm['___fseeko_unlocked'],asm['_hasmntopt'],asm['_strstr'],asm['_nftw'],asm['_lstat'],asm['_access'],asm['_strrchr'],asm['___memrchr'],asm['_ptsname'],asm['___ptsname_r'],asm['_posix_openpt'],asm['_grantpt'],asm['_unlockpt'],asm['_realpath'],asm['_readlink'],asm['_setdomainname'],asm['_setpriority'],asm['___setrlimit'],asm['_do_setrlimit'],asm['_setrlimit'],asm['_setlogmask'],asm['_closelog'],asm['_openlog'],asm['_socket']
,asm['_connect'],asm['___vsyslog'],asm['_send'],asm['_sendto'],asm['_syslog'],asm['_wordexp'],asm['_wordfree'],asm['_getdelim'],asm['___madvise'],asm['_mincore'],asm['_mlock'],asm['_mlockall'],asm['___mmap'],asm['___mprotect'],asm['___mremap'],asm['_msync'],asm['_munlock'],asm['_munlockall'],asm['_posix_madvise'],asm['___shm_mapname'],asm['_shm_open'],asm['_shm_unlink'],asm['_unlink'],asm['_btowc'],asm['_c16rtomb'],asm['_c32rtomb'],asm['_mblen'],asm['_mbrlen'],asm['_mbrtoc16'],asm['_mbrtoc32']
,asm['_mbsnrtowcs'],asm['_mbsrtowcs'],asm['_mbstowcs'],asm['_wcsnrtombs'],asm['_wcsrtombs'],asm['_wcstombs'],asm['_wctob'],asm['_accept'],asm['_accept4'],asm['_bind'],asm['___dns_parse'],asm['___dn_comp'],asm['___dn_expand'],asm['_dn_skipname'],asm['_sethostent'],asm['_gethostent'],asm['_endhostent'],asm['_ether_aton_r'],asm['_ether_aton'],asm['_ether_ntoa_r'],asm['_ether_ntoa'],asm['_ether_line'],asm['_ether_ntohost'],asm['_ether_hostton'],asm['_freeaddrinfo'],asm['_freeifaddrs'],asm['_netlink_msg_to_ifaddr'],asm['_getifaddrs'],asm['___rtnetlink_enumerate'],asm['_recv']
,asm['_recvfrom'],asm['_getpeername'],asm['_getservbyname'],asm['_getservbyname_r'],asm['___lookup_serv'],asm['_htons'],asm['___fopen_rb_ca'],asm['___fclose_ca'],asm['_getservbyport'],asm['_getservbyport_r'],asm['_getsockname'],asm['_getsockopt'],asm['_herror'],asm['___h_errno_location'],asm['_hstrerror'],asm['_htonl'],asm['_if_freenameindex'],asm['_if_indextoname'],asm['_strncpy'],asm['___stpncpy'],asm['_netlink_msg_to_nameindex'],asm['_if_nameindex'],asm['_if_nametoindex'],asm['___inet_aton'],asm['_inet_network'],asm['_ntohl'],asm['_inet_makeaddr'],asm['_inet_lnaof'],asm['_inet_netof'],asm['_inet_ntoa']
,asm['_inet_ntop'],asm['_strspn'],asm['_inet_pton'],asm['_listen'],asm['___lookup_ipliteral'],asm['_addrcmp'],asm['___lookup_name'],asm['___get_resolv_conf'],asm['_dns_parse_callback'],asm['___res_mkquery'],asm['_cleanup'],asm['___res_msend_rc'],asm['_setsockopt'],asm['_poll'],asm['_getc'],asm['_getnetbyaddr'],asm['_getnetbyname'],asm['_ns_get16'],asm['_ns_get32'],asm['_ns_put16'],asm['_ns_put32'],asm['_ns_skiprr'],asm['_ns_initparse'],asm['_ns_name_uncompress'],asm['_ns_parserr'],asm['_ntohs'],asm['_recvmmsg'],asm['_recvmsg'],asm['_res_init'],asm['___res_msend']
,asm['_res_querydomain'],asm['___res_send'],asm['___res_state'],asm['_sendmmsg'],asm['_sendmsg'],asm['_endservent'],asm['_setservent'],asm['_getservent'],asm['_shutdown'],asm['_sockatmark'],asm['_socketpair'],asm['_cleanup_525'],asm['___dns_doqueries'],asm['___ipparse'],asm['___dns_query'],asm['___dns_get_rr'],asm['___dns_count_addrs'],asm['_erand48'],asm['___rand48_step'],asm['_drand48'],asm['_lcong48'],asm['_nrand48'],asm['_lrand48'],asm['_jrand48'],asm['_mrand48'],asm['_srand'],asm['_rand'],asm['_srandom'],asm['_initstate'],asm['_setstate']
,asm['_random'],asm['_rand_r'],asm['_seed48'],asm['_srand48'],asm['_fnmatch'],asm['_ignore_err'],asm['_sort'],asm['_glob'],asm['_strcat'],asm['_globfree'],asm['_regcomp'],asm['___tre_mem_new_impl'],asm['___tre_mem_destroy'],asm['_regfree'],asm['___tre_mem_alloc_impl'],asm['_tre_compare_lit'],asm['_regerror'],asm['_regexec'],asm['_pselect'],asm['_select'],asm['_chmod'],asm['_fchmod'],asm['_fchmodat'],asm['_fstatat'],asm['_futimens'],asm['_utimensat'],asm['___futimesat'],asm['_lchmod'],asm['_mkdir'],asm['_mkdirat']
,asm['_mkfifo'],asm['_mknod'],asm['_mkfifoat'],asm['_mknodat'],asm['___statfs'],asm['___fstatfs'],asm['_statvfs'],asm['_fstatvfs'],asm['_umask'],asm['___fxstat'],asm['___fxstatat'],asm['___lxstat'],asm['___xstat'],asm['___xmknod'],asm['___xmknodat'],asm['_asprintf'],asm['_vasprintf'],asm['_clearerr'],asm['__flushlbf'],asm['___fsetlocking'],asm['___fwriting'],asm['___freading'],asm['___freadable'],asm['___fwritable'],asm['___flbf'],asm['___fbufsize'],asm['___fpending'],asm['___fpurge'],asm['___freadahead'],asm['___freadptr']
,asm['___freadptrinc'],asm['___fseterr'],asm['_fgetc'],asm['_fgetln'],asm['_ungetc'],asm['_getline'],asm['_fgetpos'],asm['___ftello'],asm['___ftello_unlocked'],asm['___fgetwc_unlocked'],asm['_fwide'],asm['_fgetwc'],asm['_fgetws'],asm['_fileno'],asm['_mread'],asm['_mwrite'],asm['_mseek'],asm['_mclose'],asm['_fmemopen'],asm['_fputc'],asm['___fputwc_unlocked'],asm['_fputwc'],asm['_fputws'],asm['_fread'],asm['_freopen'],asm['___dup3'],asm['_fsetpos'],asm['_ftell'],asm['___do_orphaned_stdio_locks'],asm['_fwprintf']
,asm['_vfwprintf'],asm['_wcsspn'],asm['_wmemchr'],asm['_fwscanf'],asm['_vfwscanf'],asm['_getwc'],asm['_ungetwc'],asm['_getchar'],asm['_getchar_unlocked'],asm['_getc_unlocked'],asm['_gets'],asm['_getw'],asm['_getwchar'],asm['_ms_write'],asm['_ms_seek'],asm['_ms_close'],asm['_open_memstream'],asm['_wms_write'],asm['_wms_seek'],asm['_wms_close'],asm['_open_wmemstream'],asm['_pclose'],asm['_perror'],asm['_popen'],asm['_printf'],asm['_putchar'],asm['_putchar_unlocked'],asm['_putc_unlocked'],asm['_puts'],asm['_putw']
,asm['_putwc'],asm['_putwchar'],asm['_remove'],asm['_rename'],asm['_rewind'],asm['_scanf'],asm['_vscanf'],asm['_setbuf'],asm['_setvbuf'],asm['_setbuffer'],asm['_setlinebuf'],asm['_swprintf'],asm['_sw_write'],asm['_vswprintf'],asm['_swscanf'],asm['_wstring_read'],asm['_vswscanf'],asm['_tempnam'],asm['___randname'],asm['_tmpfile'],asm['_tmpnam'],asm['_vprintf'],asm['_vwprintf'],asm['_vwscanf'],asm['_wprintf'],asm['_wscanf'],asm['___stdio_exit'],asm['___toread_needs_stdio_exit'],asm['___towrite_needs_stdio_exit'],asm['_atof']
,asm['_strtod'],asm['_atoi'],asm['_atol'],asm['_atoll'],asm['_bsearch'],asm['_div'],asm['_ecvt'],asm['_fcvt'],asm['_strcspn'],asm['_gcvt'],asm['_imaxabs'],asm['_imaxdiv'],asm['_labs'],asm['_ldiv'],asm['_llabs'],asm['_lldiv'],asm['_strtof'],asm['_strtold'],asm['_strtof_l'],asm['_strtod_l'],asm['_strtold_l'],asm['_strtoimax'],asm['_strtoumax'],asm['_wcstof'],asm['_do_read_774'],asm['_wcstod'],asm['_wcstold'],asm['_wcstoull'],asm['_do_read_777'],asm['_wcstoll']
,asm['_wcstoul'],asm['_wcstol'],asm['_wcstoimax'],asm['_wcstoumax'],asm['_bcmp'],asm['_bcopy'],asm['_bzero'],asm['_index'],asm['_memccpy'],asm['_memmem'],asm['_mempcpy'],asm['_rindex'],asm['___strcasecmp_l'],asm['_strcasestr'],asm['_strerror_r'],asm['_strlcat'],asm['_strlcpy'],asm['___strncasecmp_l'],asm['_strncat'],asm['_strndup'],asm['_strpbrk'],asm['_strsep'],asm['_strsignal'],asm['_strtok'],asm['_strtok_r'],asm['_swab'],asm['_wcpcpy'],asm['_wcscpy'],asm['_wcpncpy'],asm['_wcsncpy']
,asm['_wcsnlen'],asm['_wmemset'],asm['_wcscasecmp'],asm['_wcsncasecmp'],asm['_wcscasecmp_l'],asm['_wcscat'],asm['_wcscspn'],asm['_wcsdup'],asm['_wcsncasecmp_l'],asm['_wcsncat'],asm['_wcsncmp'],asm['_wcspbrk'],asm['_wcsrchr'],asm['_wcsstr'],asm['_wmemcmp'],asm['_wcstok'],asm['_wcswcs'],asm['_wmemmove'],asm['_mkdtemp'],asm['_mkostemp'],asm['___mkostemps'],asm['_mkstemp'],asm['_mkstemps'],asm['_mktemp'],asm['_cfgetospeed'],asm['_cfgetispeed'],asm['_cfmakeraw'],asm['_cfsetospeed'],asm['_cfsetispeed'],asm['_tcdrain']
,asm['_tcflow'],asm['_tcflush'],asm['_tcgetattr'],asm['_tcgetsid'],asm['_tcsendbreak'],asm['_acct'],asm['_chdir'],asm['_chown'],asm['_ctermid'],asm['_dup'],asm['_checker'],asm['_faccessat'],asm['_getuid'],asm['_geteuid'],asm['_getgid'],asm['_getegid'],asm['_fchdir'],asm['_fchown'],asm['_fchownat'],asm['_fdatasync'],asm['_fsync'],asm['_ftruncate'],asm['_getgroups'],asm['_gethostname'],asm['_getlogin'],asm['_getlogin_r'],asm['_getpgid'],asm['_getpgrp'],asm['_getppid'],asm['_getsid']
,asm['_isatty'],asm['_lchown'],asm['_link'],asm['_linkat'],asm['_nice'],asm['_pause'],asm['_posix_close'],asm['_pread'],asm['_preadv'],asm['_pwrite'],asm['_pwritev'],asm['_readlinkat'],asm['_readv'],asm['_renameat'],asm['_rmdir'],asm['_setegid'],asm['_do_setxid'],asm['___setxid'],asm['_seteuid'],asm['_setgid'],asm['_setpgid'],asm['_setpgrp'],asm['_setregid'],asm['_setresgid'],asm['_setresuid'],asm['_setreuid'],asm['_setuid'],asm['_sleep'],asm['_symlink'],asm['_symlinkat']
,asm['_sync'],asm['_tcgetpgrp'],asm['_tcsetpgrp'],asm['_truncate'],asm['_ttyname'],asm['_ttyname_r'],asm['_ualarm'],asm['_unlinkat'],asm['_writev'],asm['__get_tzname'],asm['__get_daylight'],asm['__get_timezone'],asm['_cos'],asm['_cosf'],asm['_cosl'],asm['_sin'],asm['_sinf'],asm['_sinl'],asm['_tan'],asm['_tanf'],asm['_tanl'],asm['_acos'],asm['_acosf'],asm['_acosl'],asm['_asin'],asm['_asinf'],asm['_asinl'],asm['_atan'],asm['_atanf'],asm['_atanl']
,asm['_atan2'],asm['_atan2f'],asm['_atan2l'],asm['_exp'],asm['_expf'],asm['_expl'],asm['_log'],asm['_logf'],asm['_logl'],asm['_pow'],asm['_powf'],asm['_powl'],asm['__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev'],asm['___cxa_get_globals_fast'],asm['_abort_message'],asm['__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b'],asm['__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi'],asm['__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi'],asm['__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i'],asm['___dynamic_cast'],asm['__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv'],asm['__ZSt9terminatev'],asm['__ZSt11__terminatePFvvE'],asm['__ZSt13get_terminatev'],asm['__ZNKSt3__218__libcpp_refstring5c_strEv'],asm['__ZNSt3__218__libcpp_refstringD2Ev'],asm['__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi'],asm['__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib'],asm['__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib'],asm['___cxa_bad_cast']
,asm['__ZNSt8bad_castC2Ev'],asm['___cxa_bad_typeid'],asm['__ZNSt10bad_typeidC2Ev'],asm['__ZSt14set_unexpectedPFvvE'],asm['__ZSt13set_terminatePFvvE'],asm['__ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE'],asm['__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_'],asm['__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj'],asm['___cxa_demangle'],asm['__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc'],asm['__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc'],asm['__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_'],asm['__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj'],asm['__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_'],asm['__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_'],asm['__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_'],asm['__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj'],asm['__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj']
,asm['__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_'],asm['__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_'],asm['__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_'],asm['__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc'],asm['__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_'],asm['__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_'],asm['__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_'],asm['__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_'],asm['__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_'],asm['__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_'],asm['___cxa_get_globals'],asm['___cxa_guard_acquire'],asm['___cxa_guard_release'],asm['___cxa_guard_abort'],asm['__ZNSt9bad_allocC2Ev'],asm['__ZNSt20bad_array_new_lengthC2Ev'],asm['__ZNSt16bad_array_lengthC2Ev'],asm['__ZSt14get_unexpectedv'],asm['__ZSt12__unexpectedPFvvE'],asm['__ZSt10unexpectedv'],asm['__ZSt15set_new_handlerPFvvE'],asm['__ZSt15get_new_handlerv'],asm['___cxa_can_catch'],asm['___cxa_is_pointer_type'],b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];






























































Module["dynCall_X"] = dynCall_X
Module["dynCall_d"] = dynCall_d
Module["dynCall_dd"] = dynCall_dd
Module["dynCall_ddd"] = dynCall_ddd
Module["dynCall_dddd"] = dynCall_dddd
Module["dynCall_dddi"] = dynCall_dddi
Module["dynCall_ddi"] = dynCall_ddi
Module["dynCall_di"] = dynCall_di
Module["dynCall_did"] = dynCall_did
Module["dynCall_dii"] = dynCall_dii
Module["dynCall_diii"] = dynCall_diii
Module["dynCall_fd"] = dynCall_fd
Module["dynCall_fdi"] = dynCall_fdi
Module["dynCall_ff"] = dynCall_ff
Module["dynCall_ffd"] = dynCall_ffd
Module["dynCall_fff"] = dynCall_fff
Module["dynCall_ffff"] = dynCall_ffff
Module["dynCall_fffi"] = dynCall_fffi
Module["dynCall_ffi"] = dynCall_ffi
Module["dynCall_fi"] = dynCall_fi
Module["dynCall_fif"] = dynCall_fif
Module["dynCall_fii"] = dynCall_fii
Module["dynCall_fiii"] = dynCall_fiii
Module["dynCall_i"] = dynCall_i
Module["dynCall_id"] = dynCall_id
Module["dynCall_idi"] = dynCall_idi
Module["dynCall_idii"] = dynCall_idii
Module["dynCall_idiii"] = dynCall_idiii
Module["dynCall_if"] = dynCall_if
Module["dynCall_ifi"] = dynCall_ifi
Module["dynCall_ii"] = dynCall_ii
Module["dynCall_iid"] = dynCall_iid
Module["dynCall_iif"] = dynCall_iif
Module["dynCall_iii"] = dynCall_iii
Module["dynCall_iiii"] = dynCall_iiii
Module["dynCall_iiiii"] = dynCall_iiiii
Module["dynCall_iiiiid"] = dynCall_iiiiid
Module["dynCall_iiiiii"] = dynCall_iiiiii
Module["dynCall_iiiiiid"] = dynCall_iiiiiid
Module["dynCall_iiiiiii"] = dynCall_iiiiiii
Module["dynCall_iiiiiiii"] = dynCall_iiiiiiii
Module["dynCall_iiiiiiiii"] = dynCall_iiiiiiiii
Module["dynCall_iiiiiiiiii"] = dynCall_iiiiiiiiii
Module["dynCall_iiiiiiiiiii"] = dynCall_iiiiiiiiiii
Module["dynCall_iiiiiiiiiiii"] = dynCall_iiiiiiiiiiii
Module["dynCall_iiiiiiiiiiiii"] = dynCall_iiiiiiiiiiiii
Module["dynCall_v"] = dynCall_v
Module["dynCall_vdii"] = dynCall_vdii
Module["dynCall_vfii"] = dynCall_vfii
Module["dynCall_vi"] = dynCall_vi
Module["dynCall_vid"] = dynCall_vid
Module["dynCall_vif"] = dynCall_vif
Module["dynCall_vii"] = dynCall_vii
Module["dynCall_viid"] = dynCall_viid
Module["dynCall_viif"] = dynCall_viif
Module["dynCall_viii"] = dynCall_viii
Module["dynCall_viiii"] = dynCall_viiii
Module["dynCall_viiiii"] = dynCall_viiiii
Module["dynCall_viiiiii"] = dynCall_viiiiii
Module["dynCall_viiiiiii"] = dynCall_viiiiiii
Module["dynCall_viiiiiiii"] = dynCall_viiiiiiii
Module["dynCall_viiiiiiiiii"] = dynCall_viiiiiiiiii
Module["dynCall_viiiiiiiiiiiiiii"] = dynCall_viiiiiiiiiiiiiii

var NAMED_GLOBALS = { "_ZNSt3__210adopt_lockE": 201375, "_ZNSt3__210ctype_base5alnumE": 37112, "_ZNSt3__210ctype_base5alphaE": 37102, "_ZNSt3__210ctype_base5blankE": 37110, "_ZNSt3__210ctype_base5cntrlE": 37096, "_ZNSt3__210ctype_base5digitE": 37104, "_ZNSt3__210ctype_base5graphE": 37114, "_ZNSt3__210ctype_base5lowerE": 37100, "_ZNSt3__210ctype_base5printE": 37094, "_ZNSt3__210ctype_base5punctE": 37106, "_ZNSt3__210ctype_base5spaceE": 37092, "_ZNSt3__210ctype_base5upperE": 37098, "_ZNSt3__210ctype_base6xdigitE": 37108, "_ZNSt3__210defer_lockE": 201373, "_ZNSt3__210moneypunctIcLb0EE2idE": 196592, "_ZNSt3__210moneypunctIcLb0EE4intlE": 201370, "_ZNSt3__210moneypunctIcLb1EE2idE": 196584, "_ZNSt3__210moneypunctIcLb1EE4intlE": 163841, "_ZNSt3__210moneypunctIwLb0EE2idE": 196568, "_ZNSt3__210moneypunctIwLb0EE4intlE": 201371, "_ZNSt3__210moneypunctIwLb1EE2idE": 196560, "_ZNSt3__210moneypunctIwLb1EE4intlE": 163842, "_ZNSt3__211try_to_lockE": 201374, "_ZNSt3__212__rs_default4__c_E": 193728, "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4nposE": 17048, "_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4nposE": 17052, "_ZNSt3__212placeholders2_1E": 201358, "_ZNSt3__212placeholders2_2E": 201359, "_ZNSt3__212placeholders2_3E": 201360, "_ZNSt3__212placeholders2_4E": 201361, "_ZNSt3__212placeholders2_5E": 201362, "_ZNSt3__212placeholders2_6E": 201363, "_ZNSt3__212placeholders2_7E": 201364, "_ZNSt3__212placeholders2_8E": 201365, "_ZNSt3__212placeholders2_9E": 201366, "_ZNSt3__212placeholders3_10E": 201367, "_ZNSt3__213allocator_argE": 201372, "_ZNSt3__214__num_get_base5__srcE": 162832, "_ZNSt3__219__start_std_streamsE": 201369, "_ZNSt3__219piecewise_constructE": 201377, "_ZNSt3__223__libcpp_debug_functionE": 11312, "_ZNSt3__23cinE": 193740, "_ZNSt3__24cerrE": 194084, "_ZNSt3__24clogE": 194252, "_ZNSt3__24coutE": 193916, "_ZNSt3__24wcinE": 193828, "_ZNSt3__25ctypeIcE2idE": 196544, "_ZNSt3__25ctypeIwE2idE": 195724, "_ZNSt3__25wcerrE": 194168, "_ZNSt3__25wclogE": 194336, "_ZNSt3__25wcoutE": 194000, "_ZNSt3__26chrono12steady_clock9is_steadyE": 159486, "_ZNSt3__26chrono12system_clock9is_steadyE": 201368, "_ZNSt3__26locale2id9__next_idE": 194856, "_ZNSt3__26locale3allE": 15980, "_ZNSt3__26locale4noneE": 196704, "_ZNSt3__26locale4timeE": 15972, "_ZNSt3__26locale5ctypeE": 15960, "_ZNSt3__26locale7collateE": 15956, "_ZNSt3__26locale7numericE": 15968, "_ZNSt3__26locale8messagesE": 15976, "_ZNSt3__26locale8monetaryE": 15964, "_ZNSt3__27codecvtIDic11__mbstate_tE2idE": 196664, "_ZNSt3__27codecvtIDsc11__mbstate_tE2idE": 196672, "_ZNSt3__27codecvtIcc11__mbstate_tE2idE": 196680, "_ZNSt3__27codecvtIwc11__mbstate_tE2idE": 194772, "_ZNSt3__27collateIcE2idE": 196696, "_ZNSt3__27collateIwE2idE": 196688, "_ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 196656, "_ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 196648, "_ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 196632, "_ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 196616, "_ZNSt3__28ios_base10floatfieldE": 12048, "_ZNSt3__28ios_base10scientificE": 12012, "_ZNSt3__28ios_base11adjustfieldE": 12040, "_ZNSt3__28ios_base2inE": 12076, "_ZNSt3__28ios_base3appE": 12064, "_ZNSt3__28ios_base3ateE": 12068, "_ZNSt3__28ios_base3decE": 11984, "_ZNSt3__28ios_base3hexE": 11992, "_ZNSt3__28ios_base3octE": 12004, "_ZNSt3__28ios_base3outE": 12080, "_ZNSt3__28ios_base4leftE": 12000, "_ZNSt3__28ios_base5fixedE": 11988, "_ZNSt3__28ios_base5rightE": 12008, "_ZNSt3__28ios_base5truncE": 12084, "_ZNSt3__28ios_base6badbitE": 12052, "_ZNSt3__28ios_base6binaryE": 12072, "_ZNSt3__28ios_base6eofbitE": 12056, "_ZNSt3__28ios_base6skipwsE": 12028, "_ZNSt3__28ios_base7failbitE": 12060, "_ZNSt3__28ios_base7goodbitE": 193732, "_ZNSt3__28ios_base7showposE": 12024, "_ZNSt3__28ios_base7unitbufE": 12032, "_ZNSt3__28ios_base8internalE": 11996, "_ZNSt3__28ios_base8showbaseE": 12016, "_ZNSt3__28ios_base9__xindex_E": 193736, "_ZNSt3__28ios_base9basefieldE": 12044, "_ZNSt3__28ios_base9boolalphaE": 11980, "_ZNSt3__28ios_base9showpointE": 12020, "_ZNSt3__28ios_base9uppercaseE": 12036, "_ZNSt3__28messagesIcE2idE": 194884, "_ZNSt3__28messagesIwE2idE": 194876, "_ZNSt3__28numpunctIcE2idE": 196640, "_ZNSt3__28numpunctIwE2idE": 196624, "_ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 195732, "_ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 194912, "_ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 194904, "_ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 194892, "_ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 196608, "_ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 196600, "_ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE": 196576, "_ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE": 196552, "_ZSt7nothrow": 201376, "_ZTCNSt3__210istrstreamE0_NS_13basic_istreamIcNS_11char_traitsIcEEEE": 2376, "_ZTCNSt3__210ostrstreamE0_NS_13basic_ostreamIcNS_11char_traitsIcEEEE": 2432, "_ZTCNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE0_NS_13basic_istreamIcS2_EE": 328, "_ZTCNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE8_NS_13basic_ostreamIcS2_EE": 368, "_ZTCNSt3__29strstreamE0_NS_13basic_istreamIcNS_11char_traitsIcEEEE": 2552, "_ZTCNSt3__29strstreamE0_NS_14basic_iostreamIcNS_11char_traitsIcEEEE": 2488, "_ZTCNSt3__29strstreamE8_NS_13basic_ostreamIcNS_11char_traitsIcEEEE": 2592, "_ZTIDh": 10912, "_ZTIDi": 11152, "_ZTIDn": 10256, "_ZTIDs": 11112, "_ZTIN10__cxxabiv116__enum_type_infoE": 11224, "_ZTIN10__cxxabiv116__shim_type_infoE": 9904, "_ZTIN10__cxxabiv117__array_type_infoE": 11192, "_ZTIN10__cxxabiv117__class_type_infoE": 9888, "_ZTIN10__cxxabiv117__pbase_type_infoE": 10184, "_ZTIN10__cxxabiv119__pointer_type_infoE": 10200, "_ZTIN10__cxxabiv120__function_type_infoE": 11208, "_ZTIN10__cxxabiv120__si_class_type_infoE": 9928, "_ZTIN10__cxxabiv121__vmi_class_type_infoE": 11240, "_ZTIN10__cxxabiv123__fundamental_type_infoE": 10216, "_ZTIN10__cxxabiv129__pointer_to_member_type_infoE": 11256, "_ZTINSt12experimental15fundamentals_v112bad_any_castE": 16, "_ZTINSt12experimental19bad_optional_accessE": 2296, "_ZTINSt3__210__stdinbufIcEE": 1624, "_ZTINSt3__210__stdinbufIwEE": 1608, "_ZTINSt3__210__time_getE": 1688, "_ZTINSt3__210__time_putE": 664, "_ZTINSt3__210ctype_baseE": 1504, "_ZTINSt3__210istrstreamE": 2360, "_ZTINSt3__210money_baseE": 1000, "_ZTINSt3__210moneypunctIcLb0EEE": 1072, "_ZTINSt3__210moneypunctIcLb1EEE": 1040, "_ZTINSt3__210moneypunctIwLb0EEE": 1008, "_ZTINSt3__210moneypunctIwLb1EEE": 968, "_ZTINSt3__210ostrstreamE": 2416, "_ZTINSt3__211__money_getIcEE": 960, "_ZTINSt3__211__money_getIwEE": 920, "_ZTINSt3__211__money_putIcEE": 880, "_ZTINSt3__211__money_putIwEE": 840, "_ZTINSt3__211__stdoutbufIcEE": 1592, "_ZTINSt3__211__stdoutbufIwEE": 456, "_ZTINSt3__211regex_errorE": 2328, "_ZTINSt3__212__do_messageE": 80, "_ZTINSt3__212bad_weak_ptrE": 2256, "_ZTINSt3__212codecvt_baseE": 568, "_ZTINSt3__212ctype_bynameIcEE": 1968, "_ZTINSt3__212ctype_bynameIwEE": 1984, "_ZTINSt3__212future_errorE": 104, "_ZTINSt3__212strstreambufE": 2344, "_ZTINSt3__212system_errorE": 440, "_ZTINSt3__213basic_istreamIcNS_11char_traitsIcEEEE": 200, "_ZTINSt3__213basic_istreamIwNS_11char_traitsIwEEEE": 224, "_ZTINSt3__213basic_ostreamIcNS_11char_traitsIcEEEE": 248, "_ZTINSt3__213basic_ostreamIwNS_11char_traitsIwEEEE": 272, "_ZTINSt3__213messages_baseE": 592, "_ZTINSt3__214__codecvt_utf8IDiEE": 2096, "_ZTINSt3__214__codecvt_utf8IDsEE": 2080, "_ZTINSt3__214__codecvt_utf8IwEE": 2064, "_ZTINSt3__214__num_get_baseE": 1280, "_ZTINSt3__214__num_put_baseE": 1160, "_ZTINSt3__214__shared_countE": 136, "_ZTINSt3__214basic_iostreamIcNS_11char_traitsIcEEEE": 296, "_ZTINSt3__214codecvt_bynameIDic11__mbstate_tEE": 1920, "_ZTINSt3__214codecvt_bynameIDsc11__mbstate_tEE": 1904, "_ZTINSt3__214codecvt_bynameIcc11__mbstate_tEE": 1872, "_ZTINSt3__214codecvt_bynameIwc11__mbstate_tEE": 1888, "_ZTINSt3__214collate_bynameIcEE": 1936, "_ZTINSt3__214collate_bynameIwEE": 1952, "_ZTINSt3__214error_categoryE": 96, "_ZTINSt3__215__codecvt_utf16IDiLb0EEE": 2176, "_ZTINSt3__215__codecvt_utf16IDiLb1EEE": 2192, "_ZTINSt3__215__codecvt_utf16IDsLb0EEE": 2144, "_ZTINSt3__215__codecvt_utf16IDsLb1EEE": 2160, "_ZTINSt3__215__codecvt_utf16IwLb0EEE": 2112, "_ZTINSt3__215__codecvt_utf16IwLb1EEE": 2128, "_ZTINSt3__215__time_get_tempIcEE": 2680, "_ZTINSt3__215__time_get_tempIwEE": 2696, "_ZTINSt3__215basic_streambufIcNS_11char_traitsIcEEEE": 184, "_ZTINSt3__215basic_streambufIwNS_11char_traitsIwEEEE": 192, "_ZTINSt3__215messages_bynameIcEE": 1840, "_ZTINSt3__215messages_bynameIwEE": 1856, "_ZTINSt3__215numpunct_bynameIcEE": 2000, "_ZTINSt3__215numpunct_bynameIwEE": 2016, "_ZTINSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 1640, "_ZTINSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 1696, "_ZTINSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 1744, "_ZTINSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 1760, "_ZTINSt3__216__narrow_to_utf8ILj16EEE": 2032, "_ZTINSt3__216__narrow_to_utf8ILj32EEE": 576, "_ZTINSt3__217__assoc_sub_stateE": 120, "_ZTINSt3__217__widen_from_utf8ILj16EEE": 2048, "_ZTINSt3__217__widen_from_utf8ILj32EEE": 504, "_ZTINSt3__217moneypunct_bynameIcLb0EEE": 1776, "_ZTINSt3__217moneypunct_bynameIcLb1EEE": 1792, "_ZTINSt3__217moneypunct_bynameIwLb0EEE": 1808, "_ZTINSt3__217moneypunct_bynameIwLb1EEE": 1824, "_ZTINSt3__218__time_get_storageIcEE": 1672, "_ZTINSt3__218__time_get_storageIwEE": 1728, "_ZTINSt3__219__iostream_categoryE": 408, "_ZTINSt3__219__shared_weak_countE": 2272, "_ZTINSt3__220__codecvt_utf8_utf16IDiEE": 2224, "_ZTINSt3__220__codecvt_utf8_utf16IDsEE": 2240, "_ZTINSt3__220__codecvt_utf8_utf16IwEE": 2208, "_ZTINSt3__220__time_get_c_storageIcEE": 800, "_ZTINSt3__220__time_get_c_storageIwEE": 752, "_ZTINSt3__223__future_error_categoryE": 64, "_ZTINSt3__223__system_error_categoryE": 2648, "_ZTINSt3__224__generic_error_categoryE": 2632, "_ZTINSt3__224__libcpp_debug_exceptionE": 32, "_ZTINSt3__25ctypeIcEE": 1512, "_ZTINSt3__25ctypeIwEE": 1472, "_ZTINSt3__26locale5__impE": 1576, "_ZTINSt3__26locale5facetE": 552, "_ZTINSt3__27codecvtIDic11__mbstate_tEE": 520, "_ZTINSt3__27codecvtIDsc11__mbstate_tEE": 1376, "_ZTINSt3__27codecvtIcc11__mbstate_tEE": 1440, "_ZTINSt3__27codecvtIwc11__mbstate_tEE": 1408, "_ZTINSt3__27collateIcEE": 1560, "_ZTINSt3__27collateIwEE": 1544, "_ZTINSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 1288, "_ZTINSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 1224, "_ZTINSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 1168, "_ZTINSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 1104, "_ZTINSt3__28__c_nodeE": 48, "_ZTINSt3__28ios_base7failureE": 424, "_ZTINSt3__28ios_baseE": 160, "_ZTINSt3__28messagesIcEE": 600, "_ZTINSt3__28messagesIwEE": 472, "_ZTINSt3__28numpunctIcEE": 1360, "_ZTINSt3__28numpunctIwEE": 1344, "_ZTINSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 760, "_ZTINSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 704, "_ZTINSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 672, "_ZTINSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 632, "_ZTINSt3__29__num_getIcEE": 1320, "_ZTINSt3__29__num_getIwEE": 1256, "_ZTINSt3__29__num_putIcEE": 1200, "_ZTINSt3__29__num_putIwEE": 1136, "_ZTINSt3__29basic_iosIcNS_11char_traitsIcEEEE": 144, "_ZTINSt3__29basic_iosIwNS_11char_traitsIwEEEE": 168, "_ZTINSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 928, "_ZTINSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 888, "_ZTINSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 848, "_ZTINSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 808, "_ZTINSt3__29strstreamE": 2472, "_ZTINSt3__29time_baseE": 744, "_ZTIPDh": 10920, "_ZTIPDi": 11160, "_ZTIPDn": 10280, "_ZTIPDs": 11120, "_ZTIPKDh": 10936, "_ZTIPKDi": 11176, "_ZTIPKDn": 10296, "_ZTIPKDs": 11136, "_ZTIPKa": 10496, "_ZTIPKb": 10336, "_ZTIPKc": 10416, "_ZTIPKd": 11016, "_ZTIPKe": 11056, "_ZTIPKf": 10976, "_ZTIPKg": 11096, "_ZTIPKh": 10456, "_ZTIPKi": 10616, "_ZTIPKj": 10656, "_ZTIPKl": 10696, "_ZTIPKm": 10736, "_ZTIPKn": 10856, "_ZTIPKo": 10896, "_ZTIPKs": 10536, "_ZTIPKt": 10576, "_ZTIPKv": 10264, "_ZTIPKw": 10376, "_ZTIPKx": 10776, "_ZTIPKy": 10816, "_ZTIPa": 10480, "_ZTIPb": 10320, "_ZTIPc": 10400, "_ZTIPd": 11000, "_ZTIPe": 11040, "_ZTIPf": 10960, "_ZTIPg": 11080, "_ZTIPh": 10440, "_ZTIPi": 10600, "_ZTIPj": 10640, "_ZTIPl": 10680, "_ZTIPm": 10720, "_ZTIPn": 10840, "_ZTIPo": 10880, "_ZTIPs": 10520, "_ZTIPt": 10560, "_ZTIPv": 10240, "_ZTIPw": 10360, "_ZTIPx": 10760, "_ZTIPy": 10800, "_ZTISt10bad_typeid": 10168, "_ZTISt11logic_error": 10008, "_ZTISt11range_error": 10104, "_ZTISt12bad_any_cast": 0, "_ZTISt12domain_error": 10040, "_ZTISt12length_error": 10072, "_ZTISt12out_of_range": 10088, "_ZTISt13bad_exception": 9992, "_ZTISt13runtime_error": 10024, "_ZTISt14overflow_error": 10120, "_ZTISt15underflow_error": 10136, "_ZTISt16bad_array_length": 9976, "_ZTISt16invalid_argument": 10056, "_ZTISt16nested_exception": 56, "_ZTISt18bad_variant_access": 2664, "_ZTISt19bad_optional_access": 2312, "_ZTISt20bad_array_new_length": 9960, "_ZTISt8bad_cast": 10152, "_ZTISt9bad_alloc": 9944, "_ZTISt9exception": 9880, "_ZTISt9type_info": 9920, "_ZTIa": 10472, "_ZTIb": 10312, "_ZTIc": 10392, "_ZTId": 10992, "_ZTIe": 11032, "_ZTIf": 10952, "_ZTIg": 11072, "_ZTIh": 10432, "_ZTIi": 10592, "_ZTIj": 10632, "_ZTIl": 10672, "_ZTIm": 10712, "_ZTIn": 10832, "_ZTIo": 10872, "_ZTIs": 10512, "_ZTIt": 10552, "_ZTIv": 10232, "_ZTIw": 10352, "_ZTIx": 10752, "_ZTIy": 10792, "_ZTSDh": 190678, "_ZTSDi": 190738, "_ZTSDn": 190527, "_ZTSDs": 190726, "_ZTSN10__cxxabiv116__enum_type_infoE": 190821, "_ZTSN10__cxxabiv116__shim_type_infoE": 189660, "_ZTSN10__cxxabiv117__array_type_infoE": 190750, "_ZTSN10__cxxabiv117__class_type_infoE": 189743, "_ZTSN10__cxxabiv117__pbase_type_infoE": 190448, "_ZTSN10__cxxabiv119__pointer_type_infoE": 190412, "_ZTSN10__cxxabiv120__function_type_infoE": 190784, "_ZTSN10__cxxabiv120__si_class_type_infoE": 189706, "_ZTSN10__cxxabiv121__vmi_class_type_infoE": 190854, "_ZTSN10__cxxabiv123__fundamental_type_infoE": 190482, "_ZTSN10__cxxabiv129__pointer_to_member_type_infoE": 190892, "_ZTSNSt12experimental15fundamentals_v112bad_any_castE": 159436, "_ZTSNSt12experimental19bad_optional_accessE": 164904, "_ZTSNSt3__210__stdinbufIcEE": 163424, "_ZTSNSt3__210__stdinbufIwEE": 163400, "_ZTSNSt3__210__time_getE": 163557, "_ZTSNSt3__210__time_putE": 161143, "_ZTSNSt3__210ctype_baseE": 163236, "_ZTSNSt3__210istrstreamE": 165033, "_ZTSNSt3__210money_baseE": 162510, "_ZTSNSt3__210moneypunctIcLb0EEE": 162587, "_ZTSNSt3__210moneypunctIcLb1EEE": 162559, "_ZTSNSt3__210moneypunctIwLb0EEE": 162531, "_ZTSNSt3__210moneypunctIwLb1EEE": 162482, "_ZTSNSt3__210ostrstreamE": 165054, "_ZTSNSt3__211__money_getIcEE": 162457, "_ZTSNSt3__211__money_getIwEE": 162351, "_ZTSNSt3__211__money_putIcEE": 162229, "_ZTSNSt3__211__money_putIwEE": 162134, "_ZTSNSt3__211__stdoutbufIcEE": 163337, "_ZTSNSt3__211__stdoutbufIwEE": 160806, "_ZTSNSt3__211regex_errorE": 164988, "_ZTSNSt3__212__do_messageE": 159972, "_ZTSNSt3__212bad_weak_ptrE": 164851, "_ZTSNSt3__212codecvt_baseE": 160929, "_ZTSNSt3__212ctype_bynameIcEE": 164267, "_ZTSNSt3__212ctype_bynameIwEE": 164293, "_ZTSNSt3__212future_errorE": 160020, "_ZTSNSt3__212strstreambufE": 165010, "_ZTSNSt3__212system_errorE": 160767, "_ZTSNSt3__213basic_istreamIcNS_11char_traitsIcEEEE": 160296, "_ZTSNSt3__213basic_istreamIwNS_11char_traitsIwEEEE": 160343, "_ZTSNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE": 160390, "_ZTSNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE": 160437, "_ZTSNSt3__213messages_baseE": 161029, "_ZTSNSt3__214__codecvt_utf8IDiEE": 164503, "_ZTSNSt3__214__codecvt_utf8IDsEE": 164474, "_ZTSNSt3__214__codecvt_utf8IwEE": 164446, "_ZTSNSt3__214__num_get_baseE": 162958, "_ZTSNSt3__214__num_put_baseE": 162717, "_ZTSNSt3__214__shared_countE": 160071, "_ZTSNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE": 160484, "_ZTSNSt3__214codecvt_bynameIDic11__mbstate_tEE": 164168, "_ZTSNSt3__214codecvt_bynameIDsc11__mbstate_tEE": 164125, "_ZTSNSt3__214codecvt_bynameIcc11__mbstate_tEE": 164041, "_ZTSNSt3__214codecvt_bynameIwc11__mbstate_tEE": 164083, "_ZTSNSt3__214collate_bynameIcEE": 164211, "_ZTSNSt3__214collate_bynameIwEE": 164239, "_ZTSNSt3__214error_categoryE": 159995, "_ZTSNSt3__215__codecvt_utf16IDiLb0EEE": 164666, "_ZTSNSt3__215__codecvt_utf16IDiLb1EEE": 164700, "_ZTSNSt3__215__codecvt_utf16IDsLb0EEE": 164598, "_ZTSNSt3__215__codecvt_utf16IDsLb1EEE": 164632, "_ZTSNSt3__215__codecvt_utf16IwLb0EEE": 164532, "_ZTSNSt3__215__codecvt_utf16IwLb1EEE": 164565, "_ZTSNSt3__215__time_get_tempIcEE": 166031, "_ZTSNSt3__215__time_get_tempIwEE": 166159, "_ZTSNSt3__215basic_streambufIcNS_11char_traitsIcEEEE": 160198, "_ZTSNSt3__215basic_streambufIwNS_11char_traitsIwEEEE": 160247, "_ZTSNSt3__215messages_bynameIcEE": 163983, "_ZTSNSt3__215messages_bynameIwEE": 164012, "_ZTSNSt3__215numpunct_bynameIcEE": 164319, "_ZTSNSt3__215numpunct_bynameIwEE": 164348, "_ZTSNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 163448, "_ZTSNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 163578, "_ZTSNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 163687, "_ZTSNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 163764, "_ZTSNSt3__216__narrow_to_utf8ILj16EEE": 164377, "_ZTSNSt3__216__narrow_to_utf8ILj32EEE": 160974, "_ZTSNSt3__217__assoc_sub_stateE": 160043, "_ZTSNSt3__217__widen_from_utf8ILj16EEE": 164411, "_ZTSNSt3__217__widen_from_utf8ILj32EEE": 160859, "_ZTSNSt3__217moneypunct_bynameIcLb0EEE": 163843, "_ZTSNSt3__217moneypunct_bynameIcLb1EEE": 163878, "_ZTSNSt3__217moneypunct_bynameIwLb0EEE": 163913, "_ZTSNSt3__217moneypunct_bynameIwLb1EEE": 163948, "_ZTSNSt3__218__time_get_storageIcEE": 163525, "_ZTSNSt3__218__time_get_storageIwEE": 163655, "_ZTSNSt3__219__iostream_categoryE": 160711, "_ZTSNSt3__219__shared_weak_countE": 164874, "_ZTSNSt3__220__codecvt_utf8_utf16IDiEE": 164768, "_ZTSNSt3__220__codecvt_utf8_utf16IDsEE": 164803, "_ZTSNSt3__220__codecvt_utf8_utf16IwEE": 164734, "_ZTSNSt3__220__time_get_c_storageIcEE": 161812, "_ZTSNSt3__220__time_get_c_storageIwEE": 161370, "_ZTSNSt3__223__future_error_categoryE": 159938, "_ZTSNSt3__223__system_error_categoryE": 165213, "_ZTSNSt3__224__generic_error_categoryE": 165137, "_ZTSNSt3__224__libcpp_debug_exceptionE": 159526, "_ZTSNSt3__25ctypeIcEE": 163257, "_ZTSNSt3__25ctypeIwEE": 163218, "_ZTSNSt3__26locale5__impE": 163315, "_ZTSNSt3__26locale5facetE": 160952, "_ZTSNSt3__27codecvtIDic11__mbstate_tEE": 160894, "_ZTSNSt3__27codecvtIDsc11__mbstate_tEE": 163115, "_ZTSNSt3__27codecvtIcc11__mbstate_tEE": 163184, "_ZTSNSt3__27codecvtIwc11__mbstate_tEE": 163150, "_ZTSNSt3__27collateIcEE": 163295, "_ZTSNSt3__27collateIwEE": 163275, "_ZTSNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 162983, "_ZTSNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 162868, "_ZTSNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 162742, "_ZTSNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 162627, "_ZTSNSt3__28__c_nodeE": 159586, "_ZTSNSt3__28ios_base7failureE": 160741, "_ZTSNSt3__28ios_baseE": 160096, "_ZTSNSt3__28messagesIcEE": 161053, "_ZTSNSt3__28messagesIwEE": 161008, "_ZTSNSt3__28numpunctIcEE": 163094, "_ZTSNSt3__28numpunctIwEE": 163073, "_ZTSNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 161743, "_ZTSNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 161301, "_ZTSNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 161164, "_ZTSNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 161074, "_ZTSNSt3__29__num_getIcEE": 163051, "_ZTSNSt3__29__num_getIwEE": 162936, "_ZTSNSt3__29__num_putIcEE": 162810, "_ZTSNSt3__29__num_putIwEE": 162695, "_ZTSNSt3__29basic_iosIcNS_11char_traitsIcEEEE": 160114, "_ZTSNSt3__29basic_iosIwNS_11char_traitsIwEEEE": 160156, "_ZTSNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 162387, "_ZTSNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 162281, "_ZTSNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 162159, "_ZTSNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 162064, "_ZTSNSt3__29strstreamE": 165075, "_ZTSNSt3__29time_baseE": 161404, "_ZTSPDh": 190681, "_ZTSPDi": 190741, "_ZTSPDn": 190534, "_ZTSPDs": 190729, "_ZTSPKDh": 190685, "_ZTSPKDi": 190745, "_ZTSPKDn": 190538, "_ZTSPKDs": 190733, "_ZTSPKa": 190584, "_ZTSPKb": 190548, "_ZTSPKc": 190566, "_ZTSPKd": 190704, "_ZTSPKe": 190713, "_ZTSPKf": 190695, "_ZTSPKg": 190722, "_ZTSPKh": 190575, "_ZTSPKi": 190611, "_ZTSPKj": 190620, "_ZTSPKl": 190629, "_ZTSPKm": 190638, "_ZTSPKn": 190665, "_ZTSPKo": 190674, "_ZTSPKs": 190593, "_ZTSPKt": 190602, "_ZTSPKv": 190530, "_ZTSPKw": 190557, "_ZTSPKx": 190647, "_ZTSPKy": 190656, "_ZTSPa": 190581, "_ZTSPb": 190545, "_ZTSPc": 190563, "_ZTSPd": 190701, "_ZTSPe": 190710, "_ZTSPf": 190692, "_ZTSPg": 190719, "_ZTSPh": 190572, "_ZTSPi": 190608, "_ZTSPj": 190617, "_ZTSPl": 190626, "_ZTSPm": 190635, "_ZTSPn": 190662, "_ZTSPo": 190671, "_ZTSPs": 190590, "_ZTSPt": 190599, "_ZTSPv": 190524, "_ZTSPw": 190554, "_ZTSPx": 190644, "_ZTSPy": 190653, "_ZTSSt10bad_typeid": 190397, "_ZTSSt11logic_error": 190194, "_ZTSSt11range_error": 190300, "_ZTSSt12bad_any_cast": 159419, "_ZTSSt12domain_error": 190228, "_ZTSSt12length_error": 190266, "_ZTSSt12out_of_range": 190283, "_ZTSSt13bad_exception": 190176, "_ZTSSt13runtime_error": 190210, "_ZTSSt14overflow_error": 190316, "_ZTSSt15underflow_error": 190335, "_ZTSSt16bad_array_length": 190121, "_ZTSSt16invalid_argument": 190245, "_ZTSSt16nested_exception": 159604, "_ZTSSt18bad_variant_access": 165266, "_ZTSSt19bad_optional_access": 164964, "_ZTSSt20bad_array_new_length": 190079, "_ZTSSt8bad_cast": 190369, "_ZTSSt9bad_alloc": 190045, "_ZTSSt9exception": 189647, "_ZTSSt9type_info": 189693, "_ZTSa": 190579, "_ZTSb": 190543, "_ZTSc": 190561, "_ZTSd": 190699, "_ZTSe": 190708, "_ZTSf": 190690, "_ZTSg": 190717, "_ZTSh": 190570, "_ZTSi": 190606, "_ZTSj": 190615, "_ZTSl": 190624, "_ZTSm": 190633, "_ZTSn": 190660, "_ZTSo": 190669, "_ZTSs": 190588, "_ZTSt": 190597, "_ZTSv": 190522, "_ZTSw": 190552, "_ZTSx": 190642, "_ZTSy": 190651, "_ZTTNSt3__210istrstreamE": 17160, "_ZTTNSt3__210ostrstreamE": 17216, "_ZTTNSt3__213basic_istreamIcNS_11char_traitsIcEEEE": 11684, "_ZTTNSt3__213basic_istreamIwNS_11char_traitsIwEEEE": 11732, "_ZTTNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE": 11780, "_ZTTNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE": 11828, "_ZTTNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE": 11896, "_ZTTNSt3__29strstreamE": 17292, "_ZTVN10__cxxabiv116__enum_type_infoE": 36968, "_ZTVN10__cxxabiv116__shim_type_infoE": 36828, "_ZTVN10__cxxabiv117__array_type_infoE": 36912, "_ZTVN10__cxxabiv117__class_type_infoE": 36408, "_ZTVN10__cxxabiv117__pbase_type_infoE": 37036, "_ZTVN10__cxxabiv119__pointer_type_infoE": 36884, "_ZTVN10__cxxabiv120__function_type_infoE": 36940, "_ZTVN10__cxxabiv120__si_class_type_infoE": 36448, "_ZTVN10__cxxabiv121__vmi_class_type_infoE": 36996, "_ZTVN10__cxxabiv123__fundamental_type_infoE": 36856, "_ZTVN10__cxxabiv129__pointer_to_member_type_infoE": 37064, "_ZTVNSt12experimental15fundamentals_v112bad_any_castE": 11292, "_ZTVNSt12experimental19bad_optional_accessE": 16988, "_ZTVNSt3__210__stdinbufIcEE": 15140, "_ZTVNSt3__210__stdinbufIwEE": 15076, "_ZTVNSt3__210istrstreamE": 17120, "_ZTVNSt3__210moneypunctIcLb0EEE": 14224, "_ZTVNSt3__210moneypunctIcLb1EEE": 14168, "_ZTVNSt3__210moneypunctIwLb0EEE": 14112, "_ZTVNSt3__210moneypunctIwLb1EEE": 14056, "_ZTVNSt3__210ostrstreamE": 17176, "_ZTVNSt3__211__stdoutbufIcEE": 15012, "_ZTVNSt3__211__stdoutbufIwEE": 12112, "_ZTVNSt3__211regex_errorE": 17028, "_ZTVNSt3__212__do_messageE": 17448, "_ZTVNSt3__212bad_weak_ptrE": 16920, "_ZTVNSt3__212ctype_bynameIcEE": 16048, "_ZTVNSt3__212ctype_bynameIwEE": 16100, "_ZTVNSt3__212future_errorE": 11420, "_ZTVNSt3__212strstreambufE": 17056, "_ZTVNSt3__212system_errorE": 12092, "_ZTVNSt3__213basic_istreamIcNS_11char_traitsIcEEEE": 11644, "_ZTVNSt3__213basic_istreamIwNS_11char_traitsIwEEEE": 11692, "_ZTVNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE": 11740, "_ZTVNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE": 11788, "_ZTVNSt3__214__codecvt_utf8IDiEE": 16440, "_ZTVNSt3__214__codecvt_utf8IDsEE": 16392, "_ZTVNSt3__214__codecvt_utf8IwEE": 16344, "_ZTVNSt3__214__shared_countE": 16940, "_ZTVNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE": 11836, "_ZTVNSt3__214codecvt_bynameIDic11__mbstate_tEE": 15908, "_ZTVNSt3__214codecvt_bynameIDsc11__mbstate_tEE": 15860, "_ZTVNSt3__214codecvt_bynameIcc11__mbstate_tEE": 15764, "_ZTVNSt3__214codecvt_bynameIwc11__mbstate_tEE": 15812, "_ZTVNSt3__214collate_bynameIcEE": 15984, "_ZTVNSt3__214collate_bynameIwEE": 16016, "_ZTVNSt3__214error_categoryE": 17412, "_ZTVNSt3__215__codecvt_utf16IDiLb0EEE": 16680, "_ZTVNSt3__215__codecvt_utf16IDiLb1EEE": 16728, "_ZTVNSt3__215__codecvt_utf16IDsLb0EEE": 16584, "_ZTVNSt3__215__codecvt_utf16IDsLb1EEE": 16632, "_ZTVNSt3__215__codecvt_utf16IwLb0EEE": 16488, "_ZTVNSt3__215__codecvt_utf16IwLb1EEE": 16536, "_ZTVNSt3__215__time_get_tempIcEE": 17888, "_ZTVNSt3__215__time_get_tempIwEE": 17940, "_ZTVNSt3__215basic_streambufIcNS_11char_traitsIcEEEE": 11516, "_ZTVNSt3__215basic_streambufIwNS_11char_traitsIwEEEE": 11580, "_ZTVNSt3__215messages_bynameIcEE": 15700, "_ZTVNSt3__215messages_bynameIwEE": 15732, "_ZTVNSt3__215numpunct_bynameIcEE": 16168, "_ZTVNSt3__215numpunct_bynameIwEE": 16208, "_ZTVNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 15204, "_ZTVNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 15316, "_ZTVNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 15428, "_ZTVNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 15452, "_ZTVNSt3__216__narrow_to_utf8ILj16EEE": 16248, "_ZTVNSt3__216__narrow_to_utf8ILj32EEE": 12228, "_ZTVNSt3__217__assoc_sub_stateE": 11440, "_ZTVNSt3__217__widen_from_utf8ILj16EEE": 16296, "_ZTVNSt3__217__widen_from_utf8ILj32EEE": 12276, "_ZTVNSt3__217moneypunct_bynameIcLb0EEE": 15476, "_ZTVNSt3__217moneypunct_bynameIcLb1EEE": 15532, "_ZTVNSt3__217moneypunct_bynameIwLb0EEE": 15588, "_ZTVNSt3__217moneypunct_bynameIwLb1EEE": 15644, "_ZTVNSt3__219__iostream_categoryE": 11924, "_ZTVNSt3__219__shared_weak_countE": 16960, "_ZTVNSt3__220__codecvt_utf8_utf16IDiEE": 16824, "_ZTVNSt3__220__codecvt_utf8_utf16IDsEE": 16872, "_ZTVNSt3__220__codecvt_utf8_utf16IwEE": 16776, "_ZTVNSt3__220__time_get_c_storageIcEE": 13908, "_ZTVNSt3__220__time_get_c_storageIwEE": 13788, "_ZTVNSt3__223__future_error_categoryE": 11384, "_ZTVNSt3__223__system_error_categoryE": 17368, "_ZTVNSt3__224__generic_error_categoryE": 17332, "_ZTVNSt3__224__libcpp_debug_exceptionE": 11316, "_ZTVNSt3__25ctypeIcEE": 14896, "_ZTVNSt3__25ctypeIwEE": 14828, "_ZTVNSt3__26locale5__impE": 12176, "_ZTVNSt3__26locale5facetE": 12356, "_ZTVNSt3__27codecvtIDic11__mbstate_tEE": 14636, "_ZTVNSt3__27codecvtIDsc11__mbstate_tEE": 14684, "_ZTVNSt3__27codecvtIcc11__mbstate_tEE": 14780, "_ZTVNSt3__27codecvtIwc11__mbstate_tEE": 14732, "_ZTVNSt3__27collateIcEE": 14980, "_ZTVNSt3__27collateIwEE": 14948, "_ZTVNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 14448, "_ZTVNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 14384, "_ZTVNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 14332, "_ZTVNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 14280, "_ZTVNSt3__28__c_nodeE": 11336, "_ZTVNSt3__28ios_base7failureE": 11960, "_ZTVNSt3__28ios_baseE": 11484, "_ZTVNSt3__28messagesIcEE": 12324, "_ZTVNSt3__28messagesIwEE": 12196, "_ZTVNSt3__28numpunctIcEE": 14596, "_ZTVNSt3__28numpunctIwEE": 14512, "_ZTVNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 13824, "_ZTVNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 12424, "_ZTVNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 12400, "_ZTVNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 12376, "_ZTVNSt3__29basic_iosIcNS_11char_traitsIcEEEE": 11468, "_ZTVNSt3__29basic_iosIwNS_11char_traitsIwEEEE": 11500, "_ZTVNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 14028, "_ZTVNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 14000, "_ZTVNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE": 13972, "_ZTVNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE": 13944, "_ZTVNSt3__29strstreamE": 17232, "_ZTVSt10bad_typeid": 36792, "_ZTVSt11logic_error": 36592, "_ZTVSt11range_error": 36712, "_ZTVSt12bad_any_cast": 11272, "_ZTVSt12domain_error": 36632, "_ZTVSt12length_error": 36672, "_ZTVSt12out_of_range": 36692, "_ZTVSt13bad_exception": 36572, "_ZTVSt13runtime_error": 36612, "_ZTVSt14overflow_error": 36732, "_ZTVSt15underflow_error": 36752, "_ZTVSt16bad_array_length": 36532, "_ZTVSt16invalid_argument": 36652, "_ZTVSt16nested_exception": 11368, "_ZTVSt18bad_variant_access": 17484, "_ZTVSt19bad_optional_access": 17008, "_ZTVSt20bad_array_new_length": 36512, "_ZTVSt8bad_cast": 36772, "_ZTVSt9bad_alloc": 36492, "_ZTVSt9exception": 36552, "_ZTVSt9type_info": 36812, "_ZZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKvE5__fmt": 162615, "_ZZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwmE5__fmt": 162621, "__c_dot_utf8": 19152, "__c_dot_utf8_locale": 19200, "__c_locale": 200388, "__cxa_new_handler": 201348, "__cxa_terminate_handler": 36400, "__cxa_unexpected_handler": 36488, "__fsmu8": 19232, "__hwcap": 200380, "__libc": 200316, "__optpos": 200420, "__optreset": 200416, "__progname": 200308, "__progname_full": 200312, "__seed48": 37116, "__signgam": 200412, "__stderr_used": 19708, "__stdin_used": 19840, "__stdout_used": 19972, "__sysinfo": 200384, "_ns_flagdata": 19452, "daylight": 200464, "h_errno": 200432, "in6addr_any": 200436, "in6addr_loopback": 19436, "optarg": 200424, "opterr": 19228, "optind": 19224, "optopt": 200428, "stderr": 19580, "stdin": 19712, "stdout": 19844, "timezone": 200468, "tzname": 200456 };
for (var named in NAMED_GLOBALS) {
  Module['_' + named] = gb + NAMED_GLOBALS[named];
}
Module['NAMED_GLOBALS'] = NAMED_GLOBALS;

for (var named in NAMED_GLOBALS) {
  (function(named) {
    var func = Module['_' + named];
    Module['g$_' + named] = function() { return func };
  })(named);
}
Module['__IO_feof_unlocked'] = Module['_feof']
Module['__IO_ferror_unlocked'] = Module['_ferror']
Module['__IO_getc'] = Module['_getc']
Module['__IO_getc_unlocked'] = Module['_getc_unlocked']
Module['__IO_putc'] = Module['_putc']
Module['__IO_putc_unlocked'] = Module['_putc_unlocked']
Module['__ZN10__cxxabiv116__enum_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv116__enum_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv116__shim_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__array_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__array_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__class_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__class_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__pbase_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv117__pbase_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv119__pointer_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv119__pointer_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv120__function_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv120__function_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv120__si_class_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv120__si_class_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv121__vmi_class_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv121__vmi_class_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv123__fundamental_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv123__fundamental_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev'] = Module['__ZN10__cxxabiv116__shim_type_infoD2Ev']
Module['__ZNSt10bad_typeidC1Ev'] = Module['__ZNSt10bad_typeidC2Ev']
Module['__ZNSt10bad_typeidD1Ev'] = Module['__ZNSt10bad_typeidD2Ev']
Module['__ZNSt11logic_errorC1EPKc'] = Module['__ZNSt11logic_errorC2EPKc']
Module['__ZNSt11logic_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE'] = Module['__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE']
Module['__ZNSt11logic_errorC1ERKS_'] = Module['__ZNSt11logic_errorC2ERKS_']
Module['__ZNSt11logic_errorD1Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt11range_errorD1Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt11range_errorD2Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt12domain_errorD1Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt12domain_errorD2Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt12experimental19bad_optional_accessD1Ev'] = Module['__ZNSt12experimental19bad_optional_accessD2Ev']
Module['__ZNSt12length_errorD1Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt12length_errorD2Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt12out_of_rangeD1Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt12out_of_rangeD2Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt13bad_exceptionD1Ev'] = Module['__ZNSt9exceptionD2Ev']
Module['__ZNSt13bad_exceptionD2Ev'] = Module['__ZNSt9exceptionD2Ev']
Module['__ZNSt13exception_ptrC1ERKS_'] = Module['__ZNSt13exception_ptrC2ERKS_']
Module['__ZNSt13exception_ptrD1Ev'] = Module['__ZNSt13exception_ptrD2Ev']
Module['__ZNSt13runtime_errorC1EPKc'] = Module['__ZNSt13runtime_errorC2EPKc']
Module['__ZNSt13runtime_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE'] = Module['__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE']
Module['__ZNSt13runtime_errorC1ERKS_'] = Module['__ZNSt13runtime_errorC2ERKS_']
Module['__ZNSt13runtime_errorD1Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt14overflow_errorD1Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt14overflow_errorD2Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt15underflow_errorD1Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt15underflow_errorD2Ev'] = Module['__ZNSt13runtime_errorD2Ev']
Module['__ZNSt16bad_array_lengthC1Ev'] = Module['__ZNSt16bad_array_lengthC2Ev']
Module['__ZNSt16bad_array_lengthD1Ev'] = Module['__ZNSt9bad_allocD2Ev']
Module['__ZNSt16bad_array_lengthD2Ev'] = Module['__ZNSt9bad_allocD2Ev']
Module['__ZNSt16invalid_argumentD1Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt16invalid_argumentD2Ev'] = Module['__ZNSt11logic_errorD2Ev']
Module['__ZNSt16nested_exceptionC1Ev'] = Module['__ZNSt16nested_exceptionC2Ev']
Module['__ZNSt16nested_exceptionD1Ev'] = Module['__ZNSt16nested_exceptionD2Ev']
Module['__ZNSt19bad_optional_accessD1Ev'] = Module['__ZNSt19bad_optional_accessD2Ev']
Module['__ZNSt20bad_array_new_lengthC1Ev'] = Module['__ZNSt20bad_array_new_lengthC2Ev']
Module['__ZNSt20bad_array_new_lengthD1Ev'] = Module['__ZNSt9bad_allocD2Ev']
Module['__ZNSt20bad_array_new_lengthD2Ev'] = Module['__ZNSt9bad_allocD2Ev']
Module['__ZNSt3__210__time_getC1EPKc'] = Module['__ZNSt3__210__time_getC2EPKc']
Module['__ZNSt3__210__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__210__time_getD1Ev'] = Module['__ZNSt3__210__time_getD2Ev']
Module['__ZNSt3__210__time_putC1EPKc'] = Module['__ZNSt3__210__time_putC2EPKc']
Module['__ZNSt3__210__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__210__time_putD1Ev'] = Module['__ZNSt3__210__time_putD2Ev']
Module['__ZNSt3__210moneypunctIcLb0EEC1Ej'] = Module['__ZNSt3__210moneypunctIcLb0EEC2Ej']
Module['__ZNSt3__210moneypunctIcLb0EED1Ev'] = Module['__ZNSt3__210moneypunctIcLb0EED2Ev']
Module['__ZNSt3__210moneypunctIcLb1EEC1Ej'] = Module['__ZNSt3__210moneypunctIcLb1EEC2Ej']
Module['__ZNSt3__210moneypunctIcLb1EED1Ev'] = Module['__ZNSt3__210moneypunctIcLb1EED2Ev']
Module['__ZNSt3__210moneypunctIwLb0EEC1Ej'] = Module['__ZNSt3__210moneypunctIwLb0EEC2Ej']
Module['__ZNSt3__210moneypunctIwLb0EED1Ev'] = Module['__ZNSt3__210moneypunctIwLb0EED2Ev']
Module['__ZNSt3__210moneypunctIwLb1EEC1Ej'] = Module['__ZNSt3__210moneypunctIwLb1EEC2Ej']
Module['__ZNSt3__210moneypunctIwLb1EED1Ev'] = Module['__ZNSt3__210moneypunctIwLb1EED2Ev']
Module['__ZNSt3__211__libcpp_dbC1Ev'] = Module['__ZNSt3__211__libcpp_dbC2Ev']
Module['__ZNSt3__211__libcpp_dbD1Ev'] = Module['__ZNSt3__211__libcpp_dbD2Ev']
Module['__ZNSt3__211__money_getIcEC1Ev'] = Module['__ZNSt3__211__money_getIcEC2Ev']
Module['__ZNSt3__211__money_getIwEC1Ev'] = Module['__ZNSt3__211__money_getIwEC2Ev']
Module['__ZNSt3__211__money_putIcEC1Ev'] = Module['__ZNSt3__211__money_putIcEC2Ev']
Module['__ZNSt3__211__money_putIwEC1Ev'] = Module['__ZNSt3__211__money_putIwEC2Ev']
Module['__ZNSt3__211regex_errorC1ENS_15regex_constants10error_typeE'] = Module['__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE']
Module['__ZNSt3__211regex_errorD1Ev'] = Module['__ZNSt3__211regex_errorD2Ev']
Module['__ZNSt3__211timed_mutexC1Ev'] = Module['__ZNSt3__211timed_mutexC2Ev']
Module['__ZNSt3__211timed_mutexD1Ev'] = Module['__ZNSt3__211timed_mutexD2Ev']
Module['__ZNSt3__212__rs_defaultC1ERKS0_'] = Module['__ZNSt3__212__rs_defaultC2ERKS0_']
Module['__ZNSt3__212__rs_defaultC1Ev'] = Module['__ZNSt3__212__rs_defaultC2Ev']
Module['__ZNSt3__212__rs_defaultD1Ev'] = Module['__ZNSt3__212__rs_defaultD2Ev']
Module['__ZNSt3__212bad_weak_ptrD1Ev'] = Module['__ZNSt3__212bad_weak_ptrD2Ev']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ENS_17basic_string_viewIcS2_EE'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EE']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ENS_17basic_string_viewIcS2_EERKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ENS_17basic_string_viewIcS2_EERKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EOS5_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EOS5_RKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_RKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EPKc'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EPKcRKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcRKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EPKcj'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcj']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EPKcjRKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKcjRKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_RKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jRKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jRKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ESt16initializer_listIcE'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcE']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ESt16initializer_listIcERKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ESt16initializer_listIcERKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ejc'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ejc']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EjcRKS4_'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EjcRKS4_']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ev'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev']
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev'] = Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ENS_17basic_string_viewIwS2_EE'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EE']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ENS_17basic_string_viewIwS2_EERKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ENS_17basic_string_viewIwS2_EERKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EOS5_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EOS5_RKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_RKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EPKw'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKw']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EPKwRKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwRKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EPKwj'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwj']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EPKwjRKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EPKwjRKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_RKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_jRKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jRKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_jjRKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_jjRKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ESt16initializer_listIwE'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwE']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ESt16initializer_listIwERKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ESt16initializer_listIwERKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1Ejw'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ejw']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1EjwRKS4_'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EjwRKS4_']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1Ev'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev']
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev'] = Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev']
Module['__ZNSt3__212ctype_bynameIcEC1EPKcj'] = Module['__ZNSt3__212ctype_bynameIcEC2EPKcj']
Module['__ZNSt3__212ctype_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__212ctype_bynameIcED1Ev'] = Module['__ZNSt3__212ctype_bynameIcED2Ev']
Module['__ZNSt3__212ctype_bynameIwEC1EPKcj'] = Module['__ZNSt3__212ctype_bynameIwEC2EPKcj']
Module['__ZNSt3__212ctype_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__212ctype_bynameIwED1Ev'] = Module['__ZNSt3__212ctype_bynameIwED2Ev']
Module['__ZNSt3__212future_errorC1ENS_10error_codeE'] = Module['__ZNSt3__212future_errorC2ENS_10error_codeE']
Module['__ZNSt3__212future_errorD1Ev'] = Module['__ZNSt3__212future_errorD2Ev']
Module['__ZNSt3__212strstreambufC1EPFPvjEPFvS1_E'] = Module['__ZNSt3__212strstreambufC2EPFPvjEPFvS1_E']
Module['__ZNSt3__212strstreambufC1EPKai'] = Module['__ZNSt3__212strstreambufC2EPKai']
Module['__ZNSt3__212strstreambufC1EPKci'] = Module['__ZNSt3__212strstreambufC2EPKci']
Module['__ZNSt3__212strstreambufC1EPKhi'] = Module['__ZNSt3__212strstreambufC2EPKhi']
Module['__ZNSt3__212strstreambufC1EPaiS1_'] = Module['__ZNSt3__212strstreambufC2EPaiS1_']
Module['__ZNSt3__212strstreambufC1EPciS1_'] = Module['__ZNSt3__212strstreambufC2EPciS1_']
Module['__ZNSt3__212strstreambufC1EPhiS1_'] = Module['__ZNSt3__212strstreambufC2EPhiS1_']
Module['__ZNSt3__212strstreambufC1Ei'] = Module['__ZNSt3__212strstreambufC2Ei']
Module['__ZNSt3__212strstreambufD1Ev'] = Module['__ZNSt3__212strstreambufD2Ev']
Module['__ZNSt3__212system_errorC1ENS_10error_codeE'] = Module['__ZNSt3__212system_errorC2ENS_10error_codeE']
Module['__ZNSt3__212system_errorC1ENS_10error_codeEPKc'] = Module['__ZNSt3__212system_errorC2ENS_10error_codeEPKc']
Module['__ZNSt3__212system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__212system_errorC1EiRKNS_14error_categoryE'] = Module['__ZNSt3__212system_errorC2EiRKNS_14error_categoryE']
Module['__ZNSt3__212system_errorC1EiRKNS_14error_categoryEPKc'] = Module['__ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc']
Module['__ZNSt3__212system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__212system_errorD1Ev'] = Module['__ZNSt3__212system_errorD2Ev']
Module['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b'] = Module['__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b']
Module['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC1ERS3_b'] = Module['__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b']
Module['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_'] = Module['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_']
Module['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev'] = Module['__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev']
Module['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_'] = Module['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_']
Module['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev'] = Module['__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev']
Module['__ZNSt3__213random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__213random_deviceD1Ev'] = Module['__ZNSt3__213random_deviceD2Ev']
Module['__ZNSt3__213shared_futureIvED1Ev'] = Module['__ZNSt3__213shared_futureIvED2Ev']
Module['__ZNSt3__214__shared_countD1Ev'] = Module['__ZNSt3__214__shared_countD2Ev']
Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC1EPKcj'] = Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2EPKcj']
Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tED1Ev'] = Module['__ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev']
Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC1EPKcj'] = Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2EPKcj']
Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED1Ev'] = Module['__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev']
Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC1EPKcj'] = Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2EPKcj']
Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tED1Ev'] = Module['__ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev']
Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC1EPKcj'] = Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2EPKcj']
Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tED1Ev'] = Module['__ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev']
Module['__ZNSt3__214collate_bynameIcEC1EPKcj'] = Module['__ZNSt3__214collate_bynameIcEC2EPKcj']
Module['__ZNSt3__214collate_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214collate_bynameIcED1Ev'] = Module['__ZNSt3__214collate_bynameIcED2Ev']
Module['__ZNSt3__214collate_bynameIwEC1EPKcj'] = Module['__ZNSt3__214collate_bynameIwEC2EPKcj']
Module['__ZNSt3__214collate_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__214collate_bynameIwED1Ev'] = Module['__ZNSt3__214collate_bynameIwED2Ev']
Module['__ZNSt3__214error_categoryD1Ev'] = Module['__ZNSt3__214error_categoryD2Ev']
Module['__ZNSt3__215__thread_structC1Ev'] = Module['__ZNSt3__215__thread_structC2Ev']
Module['__ZNSt3__215__thread_structD1Ev'] = Module['__ZNSt3__215__thread_structD2Ev']
Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1ERKS3_'] = Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_']
Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1Ev'] = Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev']
Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED1Ev'] = Module['__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev']
Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1ERKS3_'] = Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_']
Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1Ev'] = Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev']
Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED1Ev'] = Module['__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev']
Module['__ZNSt3__215messages_bynameIcEC1EPKcj'] = Module['__ZNSt3__215messages_bynameIcEC2EPKcj']
Module['__ZNSt3__215messages_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215messages_bynameIcED1Ev'] = Module['__ZNSt3__215messages_bynameIcED2Ev']
Module['__ZNSt3__215messages_bynameIwEC1EPKcj'] = Module['__ZNSt3__215messages_bynameIwEC2EPKcj']
Module['__ZNSt3__215messages_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215messages_bynameIwED1Ev'] = Module['__ZNSt3__215messages_bynameIwED2Ev']
Module['__ZNSt3__215numpunct_bynameIcEC1EPKcj'] = Module['__ZNSt3__215numpunct_bynameIcEC2EPKcj']
Module['__ZNSt3__215numpunct_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215numpunct_bynameIcED1Ev'] = Module['__ZNSt3__28numpunctIcED2Ev']
Module['__ZNSt3__215numpunct_bynameIcED2Ev'] = Module['__ZNSt3__28numpunctIcED2Ev']
Module['__ZNSt3__215numpunct_bynameIwEC1EPKcj'] = Module['__ZNSt3__215numpunct_bynameIwEC2EPKcj']
Module['__ZNSt3__215numpunct_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215numpunct_bynameIwED1Ev'] = Module['__ZNSt3__28numpunctIwED2Ev']
Module['__ZNSt3__215numpunct_bynameIwED2Ev'] = Module['__ZNSt3__28numpunctIwED2Ev']
Module['__ZNSt3__215recursive_mutexC1Ev'] = Module['__ZNSt3__215recursive_mutexC2Ev']
Module['__ZNSt3__215recursive_mutexD1Ev'] = Module['__ZNSt3__215recursive_mutexD2Ev']
Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC1EPKcj'] = Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj']
Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC1ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'] = Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj']
Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC1EPKcj'] = Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj']
Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC1ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1EPKcj'] = Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj']
Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'] = Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj']
Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1EPKcj'] = Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj']
Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__216__narrow_to_utf8ILj16EED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__216__narrow_to_utf8ILj16EED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__216__narrow_to_utf8ILj32EED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__216__narrow_to_utf8ILj32EED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__217__widen_from_utf8ILj16EED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__217__widen_from_utf8ILj16EED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__217__widen_from_utf8ILj32EED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__217__widen_from_utf8ILj32EED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__217moneypunct_bynameIcLb0EEC1EPKcj'] = Module['__ZNSt3__217moneypunct_bynameIcLb0EEC2EPKcj']
Module['__ZNSt3__217moneypunct_bynameIcLb0EEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__217moneypunct_bynameIcLb0EED1Ev'] = Module['__ZNSt3__217moneypunct_bynameIcLb0EED2Ev']
Module['__ZNSt3__217moneypunct_bynameIcLb1EEC1EPKcj'] = Module['__ZNSt3__217moneypunct_bynameIcLb1EEC2EPKcj']
Module['__ZNSt3__217moneypunct_bynameIcLb1EEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__217moneypunct_bynameIcLb1EED1Ev'] = Module['__ZNSt3__217moneypunct_bynameIcLb1EED2Ev']
Module['__ZNSt3__217moneypunct_bynameIwLb0EEC1EPKcj'] = Module['__ZNSt3__217moneypunct_bynameIwLb0EEC2EPKcj']
Module['__ZNSt3__217moneypunct_bynameIwLb0EEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__217moneypunct_bynameIwLb0EED1Ev'] = Module['__ZNSt3__217moneypunct_bynameIwLb0EED2Ev']
Module['__ZNSt3__217moneypunct_bynameIwLb1EEC1EPKcj'] = Module['__ZNSt3__217moneypunct_bynameIwLb1EEC2EPKcj']
Module['__ZNSt3__217moneypunct_bynameIwLb1EEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__217moneypunct_bynameIwLb1EED1Ev'] = Module['__ZNSt3__217moneypunct_bynameIwLb1EED2Ev']
Module['__ZNSt3__218__time_get_storageIcEC1EPKc'] = Module['__ZNSt3__218__time_get_storageIcEC2EPKc']
Module['__ZNSt3__218__time_get_storageIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__218__time_get_storageIwEC1EPKc'] = Module['__ZNSt3__218__time_get_storageIwEC2EPKc']
Module['__ZNSt3__218__time_get_storageIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__218condition_variableD1Ev'] = Module['__ZNSt3__218condition_variableD2Ev']
Module['__ZNSt3__218shared_timed_mutexC1Ev'] = Module['__ZNSt3__218shared_timed_mutexC2Ev']
Module['__ZNSt3__219__shared_mutex_baseC1Ev'] = Module['__ZNSt3__219__shared_mutex_baseC2Ev']
Module['__ZNSt3__219__shared_weak_countD1Ev'] = Module['__ZNSt3__214__shared_countD2Ev']
Module['__ZNSt3__219__shared_weak_countD2Ev'] = Module['__ZNSt3__214__shared_countD2Ev']
Module['__ZNSt3__219__thread_struct_impD1Ev'] = Module['__ZNSt3__219__thread_struct_impD2Ev']
Module['__ZNSt3__220__vector_base_commonILb1EEC1Ev'] = Module['__ZNSt3__220__vector_base_commonILb1EEC2Ev']
Module['__ZNSt3__221recursive_timed_mutexC1Ev'] = Module['__ZNSt3__221recursive_timed_mutexC2Ev']
Module['__ZNSt3__221recursive_timed_mutexD1Ev'] = Module['__ZNSt3__221recursive_timed_mutexD2Ev']
Module['__ZNSt3__224__libcpp_debug_exceptionC1ERKNS_19__libcpp_debug_infoE'] = Module['__ZNSt3__224__libcpp_debug_exceptionC2ERKNS_19__libcpp_debug_infoE']
Module['__ZNSt3__224__libcpp_debug_exceptionC1ERKS0_'] = Module['__ZNSt3__224__libcpp_debug_exceptionC2ERKS0_']
Module['__ZNSt3__224__libcpp_debug_exceptionC1Ev'] = Module['__ZNSt3__224__libcpp_debug_exceptionC2Ev']
Module['__ZNSt3__224__libcpp_debug_exceptionD1Ev'] = Module['__ZNSt3__224__libcpp_debug_exceptionD2Ev']
Module['__ZNSt3__25ctypeIcEC1EPKtbj'] = Module['__ZNSt3__25ctypeIcEC2EPKtbj']
Module['__ZNSt3__25ctypeIcED1Ev'] = Module['__ZNSt3__25ctypeIcED2Ev']
Module['__ZNSt3__25ctypeIwED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__25ctypeIwED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__25mutexD1Ev'] = Module['__ZNSt3__25mutexD2Ev']
Module['__ZNSt3__26futureIvEC1EPNS_17__assoc_sub_stateE'] = Module['__ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE']
Module['__ZNSt3__26futureIvED1Ev'] = Module['__ZNSt3__26futureIvED2Ev']
Module['__ZNSt3__26locale5__impC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__26locale5__impC1ERKS1_'] = Module['__ZNSt3__26locale5__impC2ERKS1_']
Module['__ZNSt3__26locale5__impC1ERKS1_PNS0_5facetEl'] = Module['__ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl']
Module['__ZNSt3__26locale5__impC1ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi'] = Module['__ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi']
Module['__ZNSt3__26locale5__impC1ERKS1_S3_i'] = Module['__ZNSt3__26locale5__impC2ERKS1_S3_i']
Module['__ZNSt3__26locale5__impC1Ej'] = Module['__ZNSt3__26locale5__impC2Ej']
Module['__ZNSt3__26locale5__impD1Ev'] = Module['__ZNSt3__26locale5__impD2Ev']
Module['__ZNSt3__26locale5facetD1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__26localeC1EPKc'] = Module['__ZNSt3__26localeC2EPKc']
Module['__ZNSt3__26localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = Module['__ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE']
Module['__ZNSt3__26localeC1ERKS0_'] = Module['__ZNSt3__26localeC2ERKS0_']
Module['__ZNSt3__26localeC1ERKS0_PKci'] = Module['__ZNSt3__26localeC2ERKS0_PKci']
Module['__ZNSt3__26localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi'] = Module['__ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi']
Module['__ZNSt3__26localeC1ERKS0_S2_i'] = Module['__ZNSt3__26localeC2ERKS0_S2_i']
Module['__ZNSt3__26localeC1Ev'] = Module['__ZNSt3__26localeC2Ev']
Module['__ZNSt3__26localeD1Ev'] = Module['__ZNSt3__26localeD2Ev']
Module['__ZNSt3__26threadD1Ev'] = Module['__ZNSt3__26threadD2Ev']
Module['__ZNSt3__27codecvtIDic11__mbstate_tED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIDic11__mbstate_tED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIDsc11__mbstate_tED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIDsc11__mbstate_tED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIcc11__mbstate_tED1Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIcc11__mbstate_tED2Ev'] = Module['__ZNSt3__26locale5facetD2Ev']
Module['__ZNSt3__27codecvtIwc11__mbstate_tEC1EPKcj'] = Module['__ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcj']
Module['__ZNSt3__27codecvtIwc11__mbstate_tEC1Ej'] = Module['__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej']
Module['__ZNSt3__27codecvtIwc11__mbstate_tED1Ev'] = Module['__ZNSt3__27codecvtIwc11__mbstate_tED2Ev']
Module['__ZNSt3__27collateIcEC1Ej'] = Module['__ZNSt3__27collateIcEC2Ej']
Module['__ZNSt3__27collateIcED1Ev'] = Module['__ZNSt3__27collateIcED2Ev']
Module['__ZNSt3__27collateIwEC1Ej'] = Module['__ZNSt3__27collateIwEC2Ej']
Module['__ZNSt3__27collateIwED1Ev'] = Module['__ZNSt3__27collateIwED2Ev']
Module['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__27promiseIvEC1Ev'] = Module['__ZNSt3__27promiseIvEC2Ev']
Module['__ZNSt3__27promiseIvED1Ev'] = Module['__ZNSt3__27promiseIvED2Ev']
Module['__ZNSt3__28__c_nodeD1Ev'] = Module['__ZNSt3__28__c_nodeD2Ev']
Module['__ZNSt3__28__i_nodeD1Ev'] = Module['__ZNSt3__28__i_nodeD2Ev']
Module['__ZNSt3__28ios_base4InitC1Ev'] = Module['__ZNSt3__28ios_base4InitC2Ev']
Module['__ZNSt3__28ios_base4InitD1Ev'] = Module['__ZNSt3__28ios_base4InitD2Ev']
Module['__ZNSt3__28ios_base7failureC1EPKcRKNS_10error_codeE'] = Module['__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE']
Module['__ZNSt3__28ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE'] = Module['__ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE']
Module['__ZNSt3__28ios_base7failureD1Ev'] = Module['__ZNSt3__28ios_base7failureD2Ev']
Module['__ZNSt3__28ios_baseD1Ev'] = Module['__ZNSt3__28ios_baseD2Ev']
Module['__ZNSt3__28messagesIcEC1Ej'] = Module['__ZNSt3__28messagesIcEC2Ej']
Module['__ZNSt3__28messagesIcED1Ev'] = Module['__ZNSt3__28messagesIcED2Ev']
Module['__ZNSt3__28messagesIwEC1Ej'] = Module['__ZNSt3__28messagesIwEC2Ej']
Module['__ZNSt3__28messagesIwED1Ev'] = Module['__ZNSt3__28messagesIwED2Ev']
Module['__ZNSt3__28numpunctIcEC1Ej'] = Module['__ZNSt3__28numpunctIcEC2Ej']
Module['__ZNSt3__28numpunctIcED1Ev'] = Module['__ZNSt3__28numpunctIcED2Ev']
Module['__ZNSt3__28numpunctIwEC1Ej'] = Module['__ZNSt3__28numpunctIwEC2Ej']
Module['__ZNSt3__28numpunctIwED1Ev'] = Module['__ZNSt3__28numpunctIwED2Ev']
Module['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1EPKcj'] = Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2EPKcj']
Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj'] = Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEj']
Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1EPKcj'] = Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2EPKcj']
Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj'] = Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEj']
Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__28valarrayIjEC1Ej'] = Module['__ZNSt3__28valarrayIjEC2Ej']
Module['__ZNSt3__28valarrayIjED1Ev'] = Module['__ZNSt3__28valarrayIjED2Ev']
Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE'] = Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE']
Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC1Ev'] = Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev']
Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED1Ev'] = Module['__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev']
Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE'] = Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE']
Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC1Ev'] = Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev']
Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED1Ev'] = Module['__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev']
Module['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC1Ej'] = Module['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Ej']
Module['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev'] = Module['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev']
Module['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC1Ej'] = Module['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Ej']
Module['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev'] = Module['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev']
Module['__ZNSt8bad_castC1Ev'] = Module['__ZNSt8bad_castC2Ev']
Module['__ZNSt8bad_castD1Ev'] = Module['__ZNSt8bad_castD2Ev']
Module['__ZNSt9bad_allocC1Ev'] = Module['__ZNSt9bad_allocC2Ev']
Module['__ZNSt9bad_allocD1Ev'] = Module['__ZNSt9bad_allocD2Ev']
Module['__ZNSt9exceptionD1Ev'] = Module['__ZNSt9exceptionD2Ev']
Module['__ZNSt9type_infoD1Ev'] = Module['__ZNSt9type_infoD2Ev']
Module['___aio_close'] = Module['_dummy_737']
Module['___freelocale'] = Module['_freelocale']
Module['___fxstat64'] = Module['___fxstat']
Module['___fxstatat64'] = Module['___fxstatat']
Module['___getdelim'] = Module['_getdelim']
Module['___isoc99_fscanf'] = Module['_fscanf']
Module['___isoc99_fwscanf'] = Module['_fwscanf']
Module['___isoc99_scanf'] = Module['_scanf']
Module['___isoc99_sscanf'] = Module['_sscanf']
Module['___isoc99_swscanf'] = Module['_swscanf']
Module['___isoc99_vfscanf'] = Module['_vfscanf']
Module['___isoc99_vfwscanf'] = Module['_vfwscanf']
Module['___isoc99_vscanf'] = Module['_vscanf']
Module['___isoc99_vsscanf'] = Module['_vsscanf']
Module['___isoc99_vswscanf'] = Module['_vswscanf']
Module['___isoc99_vwscanf'] = Module['_vwscanf']
Module['___isoc99_wscanf'] = Module['_wscanf']
Module['___lxstat64'] = Module['___lxstat']
Module['___posix_getopt'] = Module['_getopt']
Module['___stdio_exit_needed'] = Module['___stdio_exit']
Module['___strtoimax_internal'] = Module['_strtoimax']
Module['___strtol_internal'] = Module['_strtol']
Module['___strtoll_internal'] = Module['_strtoll']
Module['___strtoul_internal'] = Module['_strtoul']
Module['___strtoull_internal'] = Module['_strtoull']
Module['___strtoumax_internal'] = Module['_strtoumax']
Module['___vm_wait'] = Module['_dummy']
Module['___xpg_basename'] = Module['_basename']
Module['___xpg_strerror_r'] = Module['_strerror_r']
Module['___xstat64'] = Module['___xstat']
Module['_alphasort64'] = Module['_alphasort']
Module['_cfsetspeed'] = Module['_cfsetospeed']
Module['_clearerr_unlocked'] = Module['_clearerr']
Module['_creat64'] = Module['_creat']
Module['_crypt_r'] = Module['___crypt_r']
Module['_dn_comp'] = Module['___dn_comp']
Module['_dn_expand'] = Module['___dn_expand']
Module['_drem'] = Module['_remainder']
Module['_dremf'] = Module['_remainderf']
Module['_dup3'] = Module['___dup3']
Module['_duplocale'] = Module['___duplocale']
Module['_emscripten_builtin_free'] = Module['_free']
Module['_emscripten_builtin_malloc'] = Module['_malloc']
Module['_endnetent'] = Module['_endhostent']
Module['_fdopen'] = Module['___fdopen']
Module['_feof_unlocked'] = Module['_feof']
Module['_ferror_unlocked'] = Module['_ferror']
Module['_fflush_unlocked'] = Module['___fflush_unlocked']
Module['_fgetc_unlocked'] = Module['_getc_unlocked']
Module['_fgetpos64'] = Module['_fgetpos']
Module['_fgets_unlocked'] = Module['_fgets']
Module['_fgetwc_unlocked'] = Module['___fgetwc_unlocked']
Module['_fgetws_unlocked'] = Module['_fgetws']
Module['_fileno_unlocked'] = Module['_fileno']
Module['_fopen64'] = Module['_fopen']
Module['_fpurge'] = Module['___fpurge']
Module['_fputc_unlocked'] = Module['_putc_unlocked']
Module['_fputs_unlocked'] = Module['_fputs']
Module['_fputwc_unlocked'] = Module['___fputwc_unlocked']
Module['_fputws_unlocked'] = Module['_fputws']
Module['_fread_unlocked'] = Module['_fread']
Module['_freopen64'] = Module['_freopen']
Module['_fseeko'] = Module['___fseeko']
Module['_fseeko64'] = Module['___fseeko']
Module['_fsetpos64'] = Module['_fsetpos']
Module['_fstat64'] = Module['_fstat']
Module['_fstatat64'] = Module['_fstatat']
Module['_fstatfs'] = Module['___fstatfs']
Module['_fstatfs64'] = Module['___fstatfs']
Module['_fstatvfs64'] = Module['_fstatvfs']
Module['_ftello'] = Module['___ftello']
Module['_ftello64'] = Module['___ftello']
Module['_ftruncate64'] = Module['_ftruncate']
Module['_futimesat'] = Module['___futimesat']
Module['_fwrite_unlocked'] = Module['_fwrite']
Module['_getdents'] = Module['___getdents']
Module['_getdents64'] = Module['___getdents']
Module['_getnetent'] = Module['_gethostent']
Module['_getrlimit64'] = Module['_getrlimit']
Module['_getwc_unlocked'] = Module['___fgetwc_unlocked']
Module['_getwchar_unlocked'] = Module['_getwchar']
Module['_glob64'] = Module['_glob']
Module['_globfree64'] = Module['_globfree']
Module['_inet_aton'] = Module['___inet_aton']
Module['_lgamma_r'] = Module['___lgamma_r']
Module['_lgammaf_r'] = Module['___lgammaf_r']
Module['_lgammal_r'] = Module['___lgammal_r']
Module['_lockf64'] = Module['_lockf']
Module['_lseek64'] = Module['_lseek']
Module['_lstat64'] = Module['_lstat']
Module['_madvise'] = Module['___madvise']
Module['_memrchr'] = Module['___memrchr']
Module['_mkostemp64'] = Module['_mkostemp']
Module['_mkostemps'] = Module['___mkostemps']
Module['_mkostemps64'] = Module['___mkostemps']
Module['_mkstemp64'] = Module['_mkstemp']
Module['_mkstemps64'] = Module['_mkstemps']
Module['_mmap'] = Module['___mmap']
Module['_mmap64'] = Module['___mmap']
Module['_mprotect'] = Module['___mprotect']
Module['_mremap'] = Module['___mremap']
Module['_munmap'] = Module['___munmap']
Module['_newlocale'] = Module['___newlocale']
Module['_nftw64'] = Module['_nftw']
Module['_nl_langinfo'] = Module['___nl_langinfo']
Module['_nl_langinfo_l'] = Module['___nl_langinfo_l']
Module['_open64'] = Module['_open']
Module['_openat64'] = Module['_openat']
Module['_optreset'] = Module['___optreset']
Module['_posix_fadvise64'] = Module['_posix_fadvise']
Module['_posix_fallocate64'] = Module['_posix_fallocate']
Module['_pow10'] = Module['_exp10']
Module['_pow10f'] = Module['_exp10f']
Module['_pow10l'] = Module['_exp10l']
Module['_pread64'] = Module['_pread']
Module['_preadv64'] = Module['_preadv']
Module['_program_invocation_name'] = Module['___progname_full']
Module['_program_invocation_short_name'] = Module['___progname']
Module['_ptsname_r'] = Module['___ptsname_r']
Module['_putwc_unlocked'] = Module['___fputwc_unlocked']
Module['_putwchar_unlocked'] = Module['_putwchar']
Module['_pwrite64'] = Module['_pwrite']
Module['_pwritev64'] = Module['_pwritev']
Module['_readdir64'] = Module['_readdir']
Module['_readdir64_r'] = Module['_readdir_r']
Module['_res_mkquery'] = Module['___res_mkquery']
Module['_res_send'] = Module['___res_send']
Module['_scandir64'] = Module['_scandir']
Module['_setnetent'] = Module['_sethostent']
Module['_setrlimit64'] = Module['_setrlimit']
Module['_signgam'] = Module['___signgam']
Module['_stat64'] = Module['_stat']
Module['_statfs'] = Module['___statfs']
Module['_statfs64'] = Module['___statfs']
Module['_statvfs64'] = Module['_statvfs']
Module['_stpcpy'] = Module['___stpcpy']
Module['_stpncpy'] = Module['___stpncpy']
Module['_strchrnul'] = Module['___strchrnul']
Module['_strcoll_l'] = Module['___strcoll_l']
Module['_strdup'] = Module['___strdup']
Module['_strxfrm_l'] = Module['___strxfrm_l']
Module['_tmpfile64'] = Module['_tmpfile']
Module['_truncate64'] = Module['_truncate']
Module['_uselocale'] = Module['___uselocale']
Module['_versionsort64'] = Module['_versionsort']
Module['_vsyslog'] = Module['___vsyslog']
Module['_wcscoll_l'] = Module['___wcscoll_l']
Module['_wcsxfrm_l'] = Module['___wcsxfrm_l']
;


if (ENVIRONMENT_IS_WORKER) {

// WebGLWorker worker code

function WebGLBuffer(id) {
  this.what = 'buffer';
  this.id = id;
}
function WebGLProgram(id) {
  this.what = 'program';
  this.id = id;
  this.shaders = [];
  this.attributes = {};
  this.attributeVec = [];
  this.nextAttributes = {};
  this.nextAttributeVec = [];
}
function WebGLFramebuffer(id) {
  this.what = 'frameBuffer';
  this.id = id;
}
function WebGLRenderbuffer(id) {
  this.what = 'renderBuffer';
  this.id = id;
}
function WebGLTexture(id) {
  this.what = 'texture';
  this.id = id;
  this.binding = 0;
}

function WebGLWorker() {
  //===========
  // Constants
  //===========

  /* ClearBufferMask */
  this.DEPTH_BUFFER_BIT               = 0x00000100;
  this.STENCIL_BUFFER_BIT             = 0x00000400;
  this.COLOR_BUFFER_BIT               = 0x00004000;
  
  /* BeginMode */
  this.POINTS                         = 0x0000;
  this.LINES                          = 0x0001;
  this.LINE_LOOP                      = 0x0002;
  this.LINE_STRIP                     = 0x0003;
  this.TRIANGLES                      = 0x0004;
  this.TRIANGLE_STRIP                 = 0x0005;
  this.TRIANGLE_FAN                   = 0x0006;
  
  /* AlphaFunction (not supported in ES20) */
  /*      NEVER */
  /*      LESS */
  /*      EQUAL */
  /*      LEQUAL */
  /*      GREATER */
  /*      NOTEQUAL */
  /*      GEQUAL */
  /*      ALWAYS */
  
  /* BlendingFactorDest */
  this.ZERO                           = 0;
  this.ONE                            = 1;
  this.SRC_COLOR                      = 0x0300;
  this.ONE_MINUS_SRC_COLOR            = 0x0301;
  this.SRC_ALPHA                      = 0x0302;
  this.ONE_MINUS_SRC_ALPHA            = 0x0303;
  this.DST_ALPHA                      = 0x0304;
  this.ONE_MINUS_DST_ALPHA            = 0x0305;
  
  /* BlendingFactorSrc */
  /*      ZERO */
  /*      ONE */
  this.DST_COLOR                      = 0x0306;
  this.ONE_MINUS_DST_COLOR            = 0x0307;
  this.SRC_ALPHA_SATURATE             = 0x0308;
  /*      SRC_ALPHA */
  /*      ONE_MINUS_SRC_ALPHA */
  /*      DST_ALPHA */
  /*      ONE_MINUS_DST_ALPHA */
  
  /* BlendEquationSeparate */
  this.FUNC_ADD                       = 0x8006;
  this.BLEND_EQUATION                 = 0x8009;
  this.BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */
  this.BLEND_EQUATION_ALPHA           = 0x883D;
  
  /* BlendSubtract */
  this.FUNC_SUBTRACT                  = 0x800A;
  this.FUNC_REVERSE_SUBTRACT          = 0x800B;
  
  /* Separate Blend Functions */
  this.BLEND_DST_RGB                  = 0x80C8;
  this.BLEND_SRC_RGB                  = 0x80C9;
  this.BLEND_DST_ALPHA                = 0x80CA;
  this.BLEND_SRC_ALPHA                = 0x80CB;
  this.CONSTANT_COLOR                 = 0x8001;
  this.ONE_MINUS_CONSTANT_COLOR       = 0x8002;
  this.CONSTANT_ALPHA                 = 0x8003;
  this.ONE_MINUS_CONSTANT_ALPHA       = 0x8004;
  this.BLEND_COLOR                    = 0x8005;
  
  /* Buffer Objects */
  this.ARRAY_BUFFER                   = 0x8892;
  this.ELEMENT_ARRAY_BUFFER           = 0x8893;
  this.ARRAY_BUFFER_BINDING           = 0x8894;
  this.ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;
  
  this.STREAM_DRAW                    = 0x88E0;
  this.STATIC_DRAW                    = 0x88E4;
  this.DYNAMIC_DRAW                   = 0x88E8;
  
  this.BUFFER_SIZE                    = 0x8764;
  this.BUFFER_USAGE                   = 0x8765;
  
  this.CURRENT_VERTEX_ATTRIB          = 0x8626;
  
  /* CullFaceMode */
  this.FRONT                          = 0x0404;
  this.BACK                           = 0x0405;
  this.FRONT_AND_BACK                 = 0x0408;
  
  /* DepthFunction */
  /*      NEVER */
  /*      LESS */
  /*      EQUAL */
  /*      LEQUAL */
  /*      GREATER */
  /*      NOTEQUAL */
  /*      GEQUAL */
  /*      ALWAYS */
  
  /* EnableCap */
  /* TEXTURE_2D */
  this.CULL_FACE                      = 0x0B44;
  this.BLEND                          = 0x0BE2;
  this.DITHER                         = 0x0BD0;
  this.STENCIL_TEST                   = 0x0B90;
  this.DEPTH_TEST                     = 0x0B71;
  this.SCISSOR_TEST                   = 0x0C11;
  this.POLYGON_OFFSET_FILL            = 0x8037;
  this.SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;
  this.SAMPLE_COVERAGE                = 0x80A0;
  
  /* ErrorCode */
  this.NO_ERROR                       = 0;
  this.INVALID_ENUM                   = 0x0500;
  this.INVALID_VALUE                  = 0x0501;
  this.INVALID_OPERATION              = 0x0502;
  this.OUT_OF_MEMORY                  = 0x0505;
  
  /* FrontFaceDirection */
  this.CW                             = 0x0900;
  this.CCW                            = 0x0901;
  
  /* GetPName */
  this.LINE_WIDTH                     = 0x0B21;
  this.ALIASED_POINT_SIZE_RANGE       = 0x846D;
  this.ALIASED_LINE_WIDTH_RANGE       = 0x846E;
  this.CULL_FACE_MODE                 = 0x0B45;
  this.FRONT_FACE                     = 0x0B46;
  this.DEPTH_RANGE                    = 0x0B70;
  this.DEPTH_WRITEMASK                = 0x0B72;
  this.DEPTH_CLEAR_VALUE              = 0x0B73;
  this.DEPTH_FUNC                     = 0x0B74;
  this.STENCIL_CLEAR_VALUE            = 0x0B91;
  this.STENCIL_FUNC                   = 0x0B92;
  this.STENCIL_FAIL                   = 0x0B94;
  this.STENCIL_PASS_DEPTH_FAIL        = 0x0B95;
  this.STENCIL_PASS_DEPTH_PASS        = 0x0B96;
  this.STENCIL_REF                    = 0x0B97;
  this.STENCIL_VALUE_MASK             = 0x0B93;
  this.STENCIL_WRITEMASK              = 0x0B98;
  this.STENCIL_BACK_FUNC              = 0x8800;
  this.STENCIL_BACK_FAIL              = 0x8801;
  this.STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;
  this.STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;
  this.STENCIL_BACK_REF               = 0x8CA3;
  this.STENCIL_BACK_VALUE_MASK        = 0x8CA4;
  this.STENCIL_BACK_WRITEMASK         = 0x8CA5;
  this.VIEWPORT                       = 0x0BA2;
  this.SCISSOR_BOX                    = 0x0C10;
  /*      SCISSOR_TEST */
  this.COLOR_CLEAR_VALUE              = 0x0C22;
  this.COLOR_WRITEMASK                = 0x0C23;
  this.UNPACK_ALIGNMENT               = 0x0CF5;
  this.PACK_ALIGNMENT                 = 0x0D05;
  this.MAX_TEXTURE_SIZE               = 0x0D33;
  this.MAX_VIEWPORT_DIMS              = 0x0D3A;
  this.SUBPIXEL_BITS                  = 0x0D50;
  this.RED_BITS                       = 0x0D52;
  this.GREEN_BITS                     = 0x0D53;
  this.BLUE_BITS                      = 0x0D54;
  this.ALPHA_BITS                     = 0x0D55;
  this.DEPTH_BITS                     = 0x0D56;
  this.STENCIL_BITS                   = 0x0D57;
  this.POLYGON_OFFSET_UNITS           = 0x2A00;
  /*      POLYGON_OFFSET_FILL */
  this.POLYGON_OFFSET_FACTOR          = 0x8038;
  this.TEXTURE_BINDING_2D             = 0x8069;
  this.SAMPLE_BUFFERS                 = 0x80A8;
  this.SAMPLES                        = 0x80A9;
  this.SAMPLE_COVERAGE_VALUE          = 0x80AA;
  this.SAMPLE_COVERAGE_INVERT         = 0x80AB;
  
  /* GetTextureParameter */
  /*      TEXTURE_MAG_FILTER */
  /*      TEXTURE_MIN_FILTER */
  /*      TEXTURE_WRAP_S */
  /*      TEXTURE_WRAP_T */
  
  this.COMPRESSED_TEXTURE_FORMATS     = 0x86A3;
  
  /* HintMode */
  this.DONT_CARE                      = 0x1100;
  this.FASTEST                        = 0x1101;
  this.NICEST                         = 0x1102;
  
  /* HintTarget */
  this.GENERATE_MIPMAP_HINT            = 0x8192;
  
  /* DataType */
  this.BYTE                           = 0x1400;
  this.UNSIGNED_BYTE                  = 0x1401;
  this.SHORT                          = 0x1402;
  this.UNSIGNED_SHORT                 = 0x1403;
  this.INT                            = 0x1404;
  this.UNSIGNED_INT                   = 0x1405;
  this.FLOAT                          = 0x1406;
  
  /* PixelFormat */
  this.DEPTH_COMPONENT                = 0x1902;
  this.ALPHA                          = 0x1906;
  this.RGB                            = 0x1907;
  this.RGBA                           = 0x1908;
  this.LUMINANCE                      = 0x1909;
  this.LUMINANCE_ALPHA                = 0x190A;
  
  /* PixelType */
  /*      UNSIGNED_BYTE */
  this.UNSIGNED_SHORT_4_4_4_4         = 0x8033;
  this.UNSIGNED_SHORT_5_5_5_1         = 0x8034;
  this.UNSIGNED_SHORT_5_6_5           = 0x8363;
  
  /* Shaders */
  this.FRAGMENT_SHADER                  = 0x8B30;
  this.VERTEX_SHADER                    = 0x8B31;
  this.MAX_VERTEX_ATTRIBS               = 0x8869;
  this.MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;
  this.MAX_VARYING_VECTORS              = 0x8DFC;
  this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  this.MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;
  this.MAX_TEXTURE_IMAGE_UNITS          = 0x8872;
  this.MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;
  this.SHADER_TYPE                      = 0x8B4F;
  this.DELETE_STATUS                    = 0x8B80;
  this.LINK_STATUS                      = 0x8B82;
  this.VALIDATE_STATUS                  = 0x8B83;
  this.ATTACHED_SHADERS                 = 0x8B85;
  this.ACTIVE_UNIFORMS                  = 0x8B86;
  this.ACTIVE_ATTRIBUTES                = 0x8B89;
  this.SHADING_LANGUAGE_VERSION         = 0x8B8C;
  this.CURRENT_PROGRAM                  = 0x8B8D;
  
  /* StencilFunction */
  this.NEVER                          = 0x0200;
  this.LESS                           = 0x0201;
  this.EQUAL                          = 0x0202;
  this.LEQUAL                         = 0x0203;
  this.GREATER                        = 0x0204;
  this.NOTEQUAL                       = 0x0205;
  this.GEQUAL                         = 0x0206;
  this.ALWAYS                         = 0x0207;
  
  /* StencilOp */
  /*      ZERO */
  this.KEEP                           = 0x1E00;
  this.REPLACE                        = 0x1E01;
  this.INCR                           = 0x1E02;
  this.DECR                           = 0x1E03;
  this.INVERT                         = 0x150A;
  this.INCR_WRAP                      = 0x8507;
  this.DECR_WRAP                      = 0x8508;
  
  /* StringName */
  this.VENDOR                         = 0x1F00;
  this.RENDERER                       = 0x1F01;
  this.VERSION                        = 0x1F02;
  
  /* TextureMagFilter */
  this.NEAREST                        = 0x2600;
  this.LINEAR                         = 0x2601;
  
  /* TextureMinFilter */
  /*      NEAREST */
  /*      LINEAR */
  this.NEAREST_MIPMAP_NEAREST         = 0x2700;
  this.LINEAR_MIPMAP_NEAREST          = 0x2701;
  this.NEAREST_MIPMAP_LINEAR          = 0x2702;
  this.LINEAR_MIPMAP_LINEAR           = 0x2703;
  
  /* TextureParameterName */
  this.TEXTURE_MAG_FILTER             = 0x2800;
  this.TEXTURE_MIN_FILTER             = 0x2801;
  this.TEXTURE_WRAP_S                 = 0x2802;
  this.TEXTURE_WRAP_T                 = 0x2803;
  
  /* TextureTarget */
  this.TEXTURE_2D                     = 0x0DE1;
  this.TEXTURE                        = 0x1702;
  
  this.TEXTURE_CUBE_MAP               = 0x8513;
  this.TEXTURE_BINDING_CUBE_MAP       = 0x8514;
  this.TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
  this.TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
  this.TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
  this.TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
  this.TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
  this.TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;
  this.MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;
  
  /* TextureUnit */
  this.TEXTURE0                       = 0x84C0;
  this.TEXTURE1                       = 0x84C1;
  this.TEXTURE2                       = 0x84C2;
  this.TEXTURE3                       = 0x84C3;
  this.TEXTURE4                       = 0x84C4;
  this.TEXTURE5                       = 0x84C5;
  this.TEXTURE6                       = 0x84C6;
  this.TEXTURE7                       = 0x84C7;
  this.TEXTURE8                       = 0x84C8;
  this.TEXTURE9                       = 0x84C9;
  this.TEXTURE10                      = 0x84CA;
  this.TEXTURE11                      = 0x84CB;
  this.TEXTURE12                      = 0x84CC;
  this.TEXTURE13                      = 0x84CD;
  this.TEXTURE14                      = 0x84CE;
  this.TEXTURE15                      = 0x84CF;
  this.TEXTURE16                      = 0x84D0;
  this.TEXTURE17                      = 0x84D1;
  this.TEXTURE18                      = 0x84D2;
  this.TEXTURE19                      = 0x84D3;
  this.TEXTURE20                      = 0x84D4;
  this.TEXTURE21                      = 0x84D5;
  this.TEXTURE22                      = 0x84D6;
  this.TEXTURE23                      = 0x84D7;
  this.TEXTURE24                      = 0x84D8;
  this.TEXTURE25                      = 0x84D9;
  this.TEXTURE26                      = 0x84DA;
  this.TEXTURE27                      = 0x84DB;
  this.TEXTURE28                      = 0x84DC;
  this.TEXTURE29                      = 0x84DD;
  this.TEXTURE30                      = 0x84DE;
  this.TEXTURE31                      = 0x84DF;
  this.ACTIVE_TEXTURE                 = 0x84E0;
  
  /* TextureWrapMode */
  this.REPEAT                         = 0x2901;
  this.CLAMP_TO_EDGE                  = 0x812F;
  this.MIRRORED_REPEAT                = 0x8370;
  
  /* Uniform Types */
  this.FLOAT_VEC2                     = 0x8B50;
  this.FLOAT_VEC3                     = 0x8B51;
  this.FLOAT_VEC4                     = 0x8B52;
  this.INT_VEC2                       = 0x8B53;
  this.INT_VEC3                       = 0x8B54;
  this.INT_VEC4                       = 0x8B55;
  this.BOOL                           = 0x8B56;
  this.BOOL_VEC2                      = 0x8B57;
  this.BOOL_VEC3                      = 0x8B58;
  this.BOOL_VEC4                      = 0x8B59;
  this.FLOAT_MAT2                     = 0x8B5A;
  this.FLOAT_MAT3                     = 0x8B5B;
  this.FLOAT_MAT4                     = 0x8B5C;
  this.SAMPLER_2D                     = 0x8B5E;
  this.SAMPLER_3D                     = 0x8B5F;
  this.SAMPLER_CUBE                   = 0x8B60;
  
  /* Vertex Arrays */
  this.VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;
  this.VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;
  this.VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;
  this.VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;
  this.VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;
  this.VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;
  this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  
  /* Read Format */
  this.IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A;
  this.IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;

  /* Shader Source */
  this.COMPILE_STATUS                 = 0x8B81;
  
  /* Shader Precision-Specified Types */
  this.LOW_FLOAT                      = 0x8DF0;
  this.MEDIUM_FLOAT                   = 0x8DF1;
  this.HIGH_FLOAT                     = 0x8DF2;
  this.LOW_INT                        = 0x8DF3;
  this.MEDIUM_INT                     = 0x8DF4;
  this.HIGH_INT                       = 0x8DF5;
  
  /* Framebuffer Object. */
  this.FRAMEBUFFER                    = 0x8D40;
  this.RENDERBUFFER                   = 0x8D41;
  
  this.RGBA4                          = 0x8056;
  this.RGB5_A1                        = 0x8057;
  this.RGB565                         = 0x8D62;
  this.DEPTH_COMPONENT16              = 0x81A5;
  this.STENCIL_INDEX                  = 0x1901;
  this.STENCIL_INDEX8                 = 0x8D48;
  this.DEPTH_STENCIL                  = 0x84F9;
  
  this.RENDERBUFFER_WIDTH             = 0x8D42;
  this.RENDERBUFFER_HEIGHT            = 0x8D43;
  this.RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;
  this.RENDERBUFFER_RED_SIZE          = 0x8D50;
  this.RENDERBUFFER_GREEN_SIZE        = 0x8D51;
  this.RENDERBUFFER_BLUE_SIZE         = 0x8D52;
  this.RENDERBUFFER_ALPHA_SIZE        = 0x8D53;
  this.RENDERBUFFER_DEPTH_SIZE        = 0x8D54;
  this.RENDERBUFFER_STENCIL_SIZE      = 0x8D55;
  
  this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;
  this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;
  this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;
  this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
  
  this.COLOR_ATTACHMENT0              = 0x8CE0;
  this.DEPTH_ATTACHMENT               = 0x8D00;
  this.STENCIL_ATTACHMENT             = 0x8D20;
  this.DEPTH_STENCIL_ATTACHMENT       = 0x821A;
  
  this.NONE                           = 0;
  
  this.FRAMEBUFFER_COMPLETE                      = 0x8CD5;
  this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;
  this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
  this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;
  this.FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;
  
  this.ACTIVE_TEXTURE                 = 0x84E0;
  this.FRAMEBUFFER_BINDING            = 0x8CA6;
  this.RENDERBUFFER_BINDING           = 0x8CA7;
  this.MAX_RENDERBUFFER_SIZE          = 0x84E8;
  
  this.INVALID_FRAMEBUFFER_OPERATION  = 0x0506;
  
  /* WebGL-specific enums */
  this.UNPACK_FLIP_Y_WEBGL            = 0x9240;
  this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
  this.CONTEXT_LOST_WEBGL             = 0x9242;
  this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
  this.BROWSER_DEFAULT_WEBGL          = 0x9244;

  //=======
  // State
  //=======

  var commandBuffer = [];

  var nextId = 1; // valid ids are > 0

  var bindings = {
    texture2D: null,
    arrayBuffer: null,
    elementArrayBuffer: null,
    program: null,
    framebuffer: null,
    activeTexture: this.TEXTURE0,
    generateMipmapHint: this.DONT_CARE,
    blendSrcRGB: this.ONE,
    blendSrcAlpha: this.ONE,
    blendDstRGB: this.ZERO,
    blendDstAlpha: this.ZERO,
    blendEquationRGB: this.FUNC_ADD,
    blendEquationAlpha: this.FUNC_ADD,
    enabledState: {} // Stores whether various GL state via glEnable/glDisable/glIsEnabled/getParameter are enabled.
  };
  var stateDisabledByDefault = [this.BLEND, this.CULL_FACE, this.DEPTH_TEST, this.DITHER, this.POLYGON_OFFSET_FILL, this.SAMPLE_ALPHA_TO_COVERAGE, this.SAMPLE_COVERAGE, this.SCISSOR_TEST, this.STENCIL_TEST];
  for(var i in stateDisabledByDefault) {
    bindings.enabledState[stateDisabledByDefault[i]] = false; // It will be important to distinguish between false and undefined (undefined meaning the state cap enum is unknown/unsupported).
  }

  //==========
  // Functions
  //==========

  var that = this;

  // Helpers

  this.onmessage = function(msg) {
    //dump('worker GL got ' + JSON.stringify(msg) + '\n');
    switch(msg.op) {
      case 'setPrefetched': {
        WebGLWorker.prototype.prefetchedParameters = msg.parameters;
        WebGLWorker.prototype.prefetchedExtensions = msg.extensions;
        WebGLWorker.prototype.prefetchedPrecisions = msg.precisions;
        removeRunDependency('gl-prefetch');
        break;
      }
      default: throw 'weird gl onmessage ' + JSON.stringify(msg);
    }
  };

  function revname(name) {
    for (var x in that) if (that[x] === name) return x;
    return null;
  }

  // GL

  this.getParameter = function(name) {
    assert(name);
    if (name in this.prefetchedParameters) return this.prefetchedParameters[name];
    switch (name) {
      case this.TEXTURE_BINDING_2D: {
        return bindings.texture2D;
      }
      case this.ARRAY_BUFFER_BINDING: {
        return bindings.arrayBuffer;
      }
      case this.ELEMENT_ARRAY_BUFFER_BINDING: {
        return bindings.elementArrayBuffer;
      }
      case this.CURRENT_PROGRAM: {
        return bindings.program;
      }
      case this.FRAMEBUFFER_BINDING: {
        return bindings.framebuffer;
      }
      case this.ACTIVE_TEXTURE: {
        return bindings.activeTexture;
      }
      case this.GENERATE_MIPMAP_HINT: {
        return bindings.generateMipmapHint;
      }
      case this.BLEND_SRC_RGB: {
        return bindings.blendSrcRGB;
      }
      case this.BLEND_SRC_ALPHA: {
        return bindings.blendSrcAlpha;
      }
      case this.BLEND_DST_RGB: {
        return bindings.blendDstRGB;
      }
      case this.BLEND_DST_ALPHA: {
        return bindings.blendDstAlpha;
      }
      case this.BLEND_EQUATION_RGB: {
        return bindings.blendEquationRGB;
      }
      case this.BLEND_EQUATION_ALPHA: {
        return bindings.blendEquationAlpha;
      }
      default: {
        if (bindings.enabledState[name] !== undefined) return bindings.enabledState[name];
        throw 'TODO: get parameter ' + name + ' : ' + revname(name);
      }
    }
  };
  this.getExtension = function(name) {
    var i = this.prefetchedExtensions.indexOf(name);
    if (i < 0) return null;
    commandBuffer.push(1, name);
    switch (name) {
      case 'EXT_texture_filter_anisotropic': {
        return {
          TEXTURE_MAX_ANISOTROPY_EXT:     0x84FE,
          MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84FF
        };
      }
      case 'WEBGL_draw_buffers': {
        return {
          COLOR_ATTACHMENT0_WEBGL     : 0x8CE0,
          COLOR_ATTACHMENT1_WEBGL     : 0x8CE1,
          COLOR_ATTACHMENT2_WEBGL     : 0x8CE2,
          COLOR_ATTACHMENT3_WEBGL     : 0x8CE3,
          COLOR_ATTACHMENT4_WEBGL     : 0x8CE4,
          COLOR_ATTACHMENT5_WEBGL     : 0x8CE5,
          COLOR_ATTACHMENT6_WEBGL     : 0x8CE6,
          COLOR_ATTACHMENT7_WEBGL     : 0x8CE7,
          COLOR_ATTACHMENT8_WEBGL     : 0x8CE8,
          COLOR_ATTACHMENT9_WEBGL     : 0x8CE9,
          COLOR_ATTACHMENT10_WEBGL    : 0x8CEA,
          COLOR_ATTACHMENT11_WEBGL    : 0x8CEB,
          COLOR_ATTACHMENT12_WEBGL    : 0x8CEC,
          COLOR_ATTACHMENT13_WEBGL    : 0x8CED,
          COLOR_ATTACHMENT14_WEBGL    : 0x8CEE,
          COLOR_ATTACHMENT15_WEBGL    : 0x8CEF,

          DRAW_BUFFER0_WEBGL          : 0x8825,
          DRAW_BUFFER1_WEBGL          : 0x8826,
          DRAW_BUFFER2_WEBGL          : 0x8827,
          DRAW_BUFFER3_WEBGL          : 0x8828,
          DRAW_BUFFER4_WEBGL          : 0x8829,
          DRAW_BUFFER5_WEBGL          : 0x882A,
          DRAW_BUFFER6_WEBGL          : 0x882B,
          DRAW_BUFFER7_WEBGL          : 0x882C,
          DRAW_BUFFER8_WEBGL          : 0x882D,
          DRAW_BUFFER9_WEBGL          : 0x882E,
          DRAW_BUFFER10_WEBGL         : 0x882F,
          DRAW_BUFFER11_WEBGL         : 0x8830,
          DRAW_BUFFER12_WEBGL         : 0x8831,
          DRAW_BUFFER13_WEBGL         : 0x8832,
          DRAW_BUFFER14_WEBGL         : 0x8833,
          DRAW_BUFFER15_WEBGL         : 0x8834,

          MAX_COLOR_ATTACHMENTS_WEBGL : 0x8CDF,
          MAX_DRAW_BUFFERS_WEBGL      : 0x8824,

          drawBuffersWEBGL: function(buffers) {
            that.drawBuffersWEBGL(buffers);
          }
        };
      }
      case 'OES_standard_derivatives': {
        return { FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8B8B };
      }
    };
    return true; // TODO: return an object here
  };
  this.getSupportedExtensions = function() {
    return this.prefetchedExtensions;
  };
  this.getShaderPrecisionFormat = function(shaderType, precisionType) {
    return this.prefetchedPrecisions[shaderType][precisionType];
  };
  this.enable = function(cap) {
    commandBuffer.push(2, cap);
    bindings.enabledState[cap] = true;
  };
  this.isEnabled = function(cap) {
    return bindings.enabledState[cap];
  };
  this.disable = function(cap) {
    commandBuffer.push(3, cap);
    bindings.enabledState[cap] = false;
  };
  this.clear = function(mask) {
    commandBuffer.push(4, mask);
  };
  this.clearColor = function(r, g, b, a) {
    commandBuffer.push(5, r, g, b, a);
  };
  this.createShader = function(type) {
    var id = nextId++;
    commandBuffer.push(6, type, id);
    return { id: id, what: 'shader', type: type };
  };
  this.deleteShader = function(shader) {
    if (!shader) return;
    commandBuffer.push(7, shader.id);
  };
  this.shaderSource = function(shader, source) {
    shader.source = source;
    commandBuffer.push(8, shader.id, source);
  };
  this.compileShader = function(shader) {
    commandBuffer.push(9, shader.id);
  };
  this.getShaderInfoLog = function(shader) {
    return ''; // optimistic assumption of success; no proxying
  };
  this.createProgram = function() {
    var id = nextId++;
    commandBuffer.push(10, id);
    return new WebGLProgram(id);
  };
  this.deleteProgram = function(program) {
    if (!program) return;
    commandBuffer.push(11, program.id);
  };
  this.attachShader = function(program, shader) {
    program.shaders.push(shader);
    commandBuffer.push(12, program.id, shader.id);
  };
  this.bindAttribLocation = function(program, index, name) {
    program.nextAttributes[name] = { what: 'attribute', name: name, size: -1, location: index, type: '?' }; // fill in size, type later
    program.nextAttributeVec[index] = name;
    commandBuffer.push(13, program.id, index, name);
  };
  this.getAttribLocation = function(program, name) {
    // all existing attribs are cached locally
    if (name in program.attributes) return program.attributes[name].location;
    return -1;
  };
  this.linkProgram = function(program) {
    // parse shader sources
    function getTypeId(text) {
      switch (text) {
        case 'bool': return that.BOOL;
        case 'int': return that.INT;
        case 'uint': return that.UNSIGNED_INT;
        case 'float': return that.FLOAT;
        case 'vec2': return that.FLOAT_VEC2;
        case 'vec3': return that.FLOAT_VEC3;
        case 'vec4': return that.FLOAT_VEC4;
        case 'ivec2': return that.INT_VEC2;
        case 'ivec3': return that.INT_VEC3;
        case 'ivec4': return that.INT_VEC4;
        case 'bvec2': return that.BOOL_VEC2;
        case 'bvec3': return that.BOOL_VEC3;
        case 'bvec4': return that.BOOL_VEC4;
        case 'mat2': return that.FLOAT_MAT2;
        case 'mat3': return that.FLOAT_MAT3;
        case 'mat4': return that.FLOAT_MAT4;
        case 'sampler2D': return that.SAMPLER_2D;
        case 'sampler3D': return that.SAMPLER_3D;
        case 'samplerCube': return that.SAMPLER_CUBE;
        default: throw 'not yet recognized type text: ' + text;
      }
    }
    function parseElementType(shader, type, obj, vec) {
      var source = shader.source;
      source = source.replace(/\n/g, '|\n'); // barrier between lines, to make regexing easier
      var newItems = source.match(new RegExp(type + '\\s+\\w+\\s+[\\w,\\s\[\\]]+;', 'g'));
      if (!newItems) return;
      newItems.forEach(function(item) {
        var m = new RegExp(type + '\\s+(\\w+)\\s+([\\w,\\s\[\\]]+);').exec(item);
        assert(m);
        m[2].split(',').map(function(name) { name = name.trim(); return name.search(/\s/) >= 0 ? '' : name }).filter(function(name) { return !!name }).forEach(function(name) {
          var size = 1;
          var open = name.indexOf('[');
          var fullname = name;
          if (open >= 0) {
            var close = name.indexOf(']');
            size = parseInt(name.substring(open+1, close));
            name = name.substr(0, open);
            fullname = name + '[0]';
          }
          if (!obj[name]) {
            obj[name] = { what: type, name: fullname, size: size, location: -1, type: getTypeId(m[1]) };
            if (vec) vec.push(name);
          }
        });
      });
    }

    program.uniforms = {};
    program.uniformVec = [];

    program.attributes = program.nextAttributes;
    program.attributeVec = program.nextAttributeVec;
    program.nextAttributes = {};
    program.nextAttributeVec = [];

    var existingAttributes = {};

    program.shaders.forEach(function(shader) {
      parseElementType(shader, 'uniform', program.uniforms, program.uniformVec);
      parseElementType(shader, 'attribute', existingAttributes, null);
    });

    // bind not-yet bound attributes
    for (var attr in existingAttributes) {
      if (!(attr in program.attributes)) {
        var index = program.attributeVec.length;
        program.attributes[attr] = { what: 'attribute', name: attr, size: -1, location: index, type: '?' }; // fill in size, type later
        program.attributeVec[index] = attr;
        commandBuffer.push(13, program.id, index, attr); // do a bindAttribLocation as well, so this takes effect in the link we are about to do
      }
      program.attributes[attr].size = existingAttributes[attr].size;
      program.attributes[attr].type = existingAttributes[attr].type;
    }

    commandBuffer.push(14, program.id);
  };
  this.getProgramParameter = function(program, name) {
    switch (name) {
      case this.ACTIVE_UNIFORMS: return program.uniformVec.length;
      case this.ACTIVE_ATTRIBUTES: return program.attributeVec.length;
      case this.LINK_STATUS: {
        // optimisticaly return success; client will abort on an actual error. we assume an error-free async workflow
        commandBuffer.push(15, program.id, name);
        return true;
      }
      default: throw 'bad getProgramParameter ' + revname(name);
    }
  };
  this.getActiveAttrib = function(program, index) {
    var name = program.attributeVec[index];
    if (!name) return null;
    return program.attributes[name];
  };
  this.getActiveUniform = function(program, index) {
    var name = program.uniformVec[index];
    if (!name) return null;
    return program.uniforms[name];
  };
  this.getUniformLocation = function(program, name) {
    var fullname = name;
    var index = -1;
    var open = name.indexOf('[');
    if (open >= 0) {
      var close = name.indexOf(']');
      index = parseInt(name.substring(open+1, close));
      name = name.substr(0, open);
    }
    if (!(name in program.uniforms)) return null;
    var id = nextId++;
    commandBuffer.push(16, program.id, fullname, id);
    return { what: 'location', uniform: program.uniforms[name], id: id, index: index };
  };
  this.getProgramInfoLog = function(shader) {
    return ''; // optimistic assumption of success; no proxying
  };
  this.useProgram = function(program) {
    commandBuffer.push(17, program ? program.id : 0);
    bindings.program = program;
  };
  this.uniform1i = function(location, data) {
    if (!location) return;
    commandBuffer.push(18, location.id, data);
  };
  this.uniform1f = function(location, data) {
    if (!location) return;
    commandBuffer.push(19, location.id, data);
  };
  this.uniform3fv = function(location, data) {
    if (!location) return;
    commandBuffer.push(20, location.id, new Float32Array(data));
  };
  this.uniform4f = function(location, x, y, z, w) {
    if (!location) return;
    commandBuffer.push(21, location.id, new Float32Array([x, y, z, w]));
  };
  this.uniform4fv = function(location, data) {
    if (!location) return;
    commandBuffer.push(21, location.id, new Float32Array(data));
  };
  this.uniformMatrix4fv = function(location, transpose, data) {
    if (!location) return;
    commandBuffer.push(22, location.id, transpose, new Float32Array(data));
  };
  this.vertexAttrib4fv = function(index, values) {
    commandBuffer.push(23, index, new Float32Array(values));
  };
  this.createBuffer = function() {
    var id = nextId++;
    commandBuffer.push(24, id);
    return new WebGLBuffer(id);
  };
  this.deleteBuffer = function(buffer) {
    if (!buffer) return;
    commandBuffer.push(25, buffer.id);
  };
  this.bindBuffer = function(target, buffer) {
    commandBuffer.push(26, target, buffer ? buffer.id : 0);
    switch (target) {
      case this.ARRAY_BUFFER_BINDING: {
        bindings.arrayBuffer = buffer;
        break;
      }
      case this.ELEMENT_ARRAY_BUFFER_BINDING: {
        bindings.elementArrayBuffer = buffer;
        break;
      }
    }
  };
  function duplicate(something) {
    // clone data properly: handles numbers, null, typed arrays, js arrays and array buffers
    if (!something || typeof something === 'number') return something;
    if (something.slice) return something.slice(0); // ArrayBuffer or js array
    return new something.constructor(something); // typed array
  }
  this.bufferData = function(target, something, usage) {
    commandBuffer.push(27, target, duplicate(something), usage);
  };
  this.bufferSubData = function(target, offset, something) {
    commandBuffer.push(28, target, offset, duplicate(something));
  };
  this.viewport = function(x, y, w, h) {
    commandBuffer.push(29, x, y, w, h);
  };
  this.vertexAttribPointer = function(index, size, type, normalized, stride, offset) {
    commandBuffer.push(30, index, size, type, normalized, stride, offset);
  };
  this.enableVertexAttribArray = function(index) {
    commandBuffer.push(31, index);
  };
  this.disableVertexAttribArray = function(index) {
    commandBuffer.push(32, index);
  };
  this.drawArrays = function(mode, first, count) {
    commandBuffer.push(33, mode, first, count);
  };
  this.drawElements = function(mode, count, type, offset) {
    commandBuffer.push(34, mode, count, type, offset);
  };
  this.getError = function() {
    // optimisticaly return success; client will abort on an actual error. we assume an error-free async workflow
    commandBuffer.push(35);
    return this.NO_ERROR;
  };
  this.createTexture = function() {
    var id = nextId++;
    commandBuffer.push(36, id);
    return new WebGLTexture(id);
  };
  this.deleteTexture = function(texture) {
    if (!texture) return;
    commandBuffer.push(37, texture.id);
    texture.id = 0;
  };
  this.isTexture = function(texture) {
    return texture && texture.what === 'texture' && texture.id > 0 && texture.binding;
  };
  this.bindTexture = function(target, texture) {
    switch (target) {
      case that.TEXTURE_2D: {
        bindings.texture2D = texture;
        break;
      }
    }
    if (texture) texture.binding = target;
    commandBuffer.push(38, target, texture ? texture.id : 0);
  };
  this.texParameteri = function(target, pname, param) {
    commandBuffer.push(39, target, pname, param);
  };
  this.texImage2D = function(target, level, internalformat, width, height, border, format, type, pixels) {
    if (pixels === undefined) {
      format = width; // width, height, border do not exist in the shorter overload
      type = height;
      pixels = border;
      assert(pixels instanceof Image);
      assert(internalformat === format && format === this.RGBA); // HTML Images are RGBA, 8-bit
      assert(type === this.UNSIGNED_BYTE);
      var data = pixels.data;
      width = data.width;
      height = data.height;
      border = 0;
      pixels = new Uint8Array(data.data); // XXX transform from clamped to normal, could have been done in duplicate
    }
    commandBuffer.push(40, target, level, internalformat, width, height, border, format, type, duplicate(pixels));
  };
  this.compressedTexImage2D = function(target, level, internalformat, width, height, border, pixels) {
    commandBuffer.push(41, target, level, internalformat, width, height, border, duplicate(pixels));
  };
  this.activeTexture = function(texture) {
    commandBuffer.push(42, texture);
    bindings.activeTexture = texture;
  };
  this.getShaderParameter = function(shader, pname) {
    switch (pname) {
      case this.SHADER_TYPE: return shader.type;
      case this.COMPILE_STATUS: {
        // optimisticaly return success; client will abort on an actual error. we assume an error-free async workflow
        commandBuffer.push(43, shader.id, pname);
        return true;
      }
      default: throw 'unsupported getShaderParameter ' + pname;
    }
  };
  this.clearDepth = function(depth) {
    commandBuffer.push(44, depth);
  };
  this.depthFunc = function(depth) {
    commandBuffer.push(45, depth);
  };
  this.frontFace = function(depth) {
    commandBuffer.push(46, depth);
  };
  this.cullFace = function(depth) {
    commandBuffer.push(47, depth);
  };
  this.readPixels = function(depth) {
    abort('readPixels is impossible, we are async GL');
  };
  this.pixelStorei = function(pname, param) {
    commandBuffer.push(48, pname, param);
  };
  this.depthMask = function(flag) {
    commandBuffer.push(49, flag);
  };
  this.depthRange = function(near, far) {
    commandBuffer.push(50, near, far);
  };
  this.blendFunc = function(sfactor, dfactor) {
    commandBuffer.push(51, sfactor, dfactor);
    bindings.blendSrcRGB = bindings.blendSrcAlpha = sfactor;
    bindings.blendDstRGB = bindings.blendDstAlpha = dfactor;
  };
  this.scissor = function(x, y, width, height) {
    commandBuffer.push(52, x, y, width, height);
  };
  this.colorMask = function(red, green, blue, alpha) {
    commandBuffer.push(53, red, green, blue, alpha);
  };
  this.lineWidth = function(width) {
    commandBuffer.push(54, width);
  };
  this.createFramebuffer = function() {
    var id = nextId++;
    commandBuffer.push(55, id);
    return new WebGLFramebuffer(id);
  };
  this.deleteFramebuffer = function(framebuffer) {
    if (!framebuffer) return;
    commandBuffer.push(56, framebuffer.id);
  };
  this.bindFramebuffer = function(target, framebuffer) {
    commandBuffer.push(57, target, framebuffer ? framebuffer.id : 0);
    bindings.framebuffer = framebuffer;
  };
  this.framebufferTexture2D = function(target, attachment, textarget, texture, level) {
    commandBuffer.push(58, target, attachment, textarget, texture ? texture.id : 0, level);
  };
  this.checkFramebufferStatus = function(target) {
    return this.FRAMEBUFFER_COMPLETE; // XXX totally wrong
  };
  this.createRenderbuffer = function() {
    var id = nextId++;
    commandBuffer.push(59, id);
    return new WebGLRenderbuffer(id);
  };
  this.deleteRenderbuffer = function(renderbuffer) {
    if (!renderbuffer) return;
    commandBuffer.push(60, renderbuffer.id);
  };
  this.bindRenderbuffer = function(target, renderbuffer) {
    commandBuffer.push(61, target, renderbuffer ? renderbuffer.id : 0);
  };
  this.renderbufferStorage = function(target, internalformat, width, height) {
    commandBuffer.push(62, target, internalformat, width, height);
  };
  this.framebufferRenderbuffer = function(target, attachment, renderbuffertarget, renderbuffer) {
    commandBuffer.push(63, target, attachment, renderbuffertarget, renderbuffer ? renderbuffer.id : 0);
  };
  this.debugPrint = function(text) { // useful to interleave debug output properly with client GL commands
    commandBuffer.push(64, text);
  };
  this.hint = function(target, mode) {
    commandBuffer.push(65, target, mode);
    if (target == this.GENERATE_MIPMAP_HINT) bindings.generateMipmapHint = mode;
  };
  this.blendEquation = function(mode) {
    commandBuffer.push(66, mode);
    bindings.blendEquationRGB = bindings.blendEquationAlpha = mode;
  };
  this.generateMipmap = function(target) {
    commandBuffer.push(67, target);
  };
  this.uniformMatrix3fv = function(location, transpose, data) {
    if (!location) return;
    commandBuffer.push(68, location.id, transpose, new Float32Array(data));
  };
  this.stencilMask = function(mask) {
    commandBuffer.push(69, mask);
  };
  this.clearStencil = function(s) {
    commandBuffer.push(70, s);
  };
  this.texSubImage2D = function(target, level, xoffset, yoffset, width, height, format, type, pixels) {
    if (pixels === undefined) {
      // shorter overload:      target, level, xoffset, yoffset, format,  type, pixels
      var formatTemp = format;
      format = width;
      type = height;
      pixels = formatTemp;
      assert(pixels instanceof Image);
      assert(format === this.RGBA); // HTML Images are RGBA, 8-bit
      assert(type === this.UNSIGNED_BYTE);
      var data = pixels.data;
      width = data.width;
      height = data.height;
      pixels = new Uint8Array(data.data); // XXX transform from clamped to normal, could have been done in duplicate
    }
    commandBuffer.push(71, target, level, xoffset, yoffset, width, height, format, type, duplicate(pixels));
  };
  this.uniform3f = function(location, x, y, z) {
    if (!location) return;
    commandBuffer.push(72, location.id, x, y, z);
  };
  this.blendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
    commandBuffer.push(73, srcRGB, dstRGB, srcAlpha, dstAlpha);
    bindings.blendSrcRGB = srcRGB;
    bindings.blendSrcAlpha = srcAlpha;
    bindings.blendDstRGB = dstRGB;
    bindings.blendDstAlpha = dstAlpha;
  }
  this.uniform2fv = function(location, data) {
    if (!location) return;
    commandBuffer.push(74, location.id, new Float32Array(data));
  };
  this.texParameterf = function(target, pname, param) {
    commandBuffer.push(75, target, pname, param);
  };
  this.isContextLost = function() {
    // optimisticaly return that everything is ok; client will abort on an actual context loss. we assume an error-free async workflow
    commandBuffer.push(76);
    return false;
  };
  this.isProgram = function(program) {
    return program && program.what === 'program';
  };
  this.blendEquationSeparate = function(rgb, alpha) {
    commandBuffer.push(77, rgb, alpha);
    bindings.blendEquationRGB = rgb;
    bindings.blendEquationAlpha = alpha;
  };
  this.stencilFuncSeparate = function(face, func, ref, mask) {
    commandBuffer.push(78, face, func, ref, mask);
  };
  this.stencilOpSeparate = function(face, fail, zfail, zpass) {
    commandBuffer.push(79, face, fail, zfail, zpass);
  };
  this.drawBuffersWEBGL = function(buffers) {
    commandBuffer.push(80, buffers);
  };
  this.uniform1iv = function(location, data) {
    if (!location) return;
    commandBuffer.push(81, location.id, new Int32Array(data));
  };
  this.uniform1fv = function(location, data) {
    if (!location) return;
    commandBuffer.push(82, location.id, new Float32Array(data));
  };

  // Setup

  var theoreticalTracker = new FPSTracker('server (theoretical)');
  var throttledTracker = new FPSTracker('server (client-throttled)');

  function preRAF() {
    //theoreticalTracker.tick();
    // if too many frames in queue, skip a main loop iter
    if (Math.abs(frameId - clientFrameId) >= 4) {
      return false;
    }
    //throttledTracker.tick();
  }

  var postRAFed = false;

  function postRAF() {
    if (commandBuffer.length > 0) {
      postMessage({ target: 'gl', op: 'render', commandBuffer: commandBuffer });
      commandBuffer = [];
    }
    postRAFed = true;
  }

  assert(!Browser.doSwapBuffers);
  Browser.doSwapBuffers = postRAF;

  var trueRAF = window.requestAnimationFrame;
  window.requestAnimationFrame = function(func) {
    trueRAF(function() {
      if (preRAF() === false) {
        window.requestAnimationFrame(func); // skip this frame, do it later
        return;
      }
      postRAFed = false;
      func();
      if (!postRAFed) { // if we already posted this frame (e.g. from doSwapBuffers) do not post again
        postRAF();
      }
    });
  }

}

// share prefetched data among all instances

WebGLWorker.prototype.prefetchedParameters = {};
WebGLWorker.prototype.prefetchedExtensions = {};
WebGLWorker.prototype.prefetchedPrecisions = {};



if (typeof console === 'undefined') {
  // we can't call Module.printErr because that might be circular
  var console = {
    log: function(x) {
      if (typeof dump === 'function') dump('log: ' + x + '\n');
    },
    debug: function(x) {
      if (typeof dump === 'function') dump('debug: ' + x + '\n');
    },
    info: function(x) {
      if (typeof dump === 'function') dump('info: ' + x + '\n');
    },
    warn: function(x) {
      if (typeof dump === 'function') dump('warn: ' + x + '\n');
    },
    error: function(x) {
      if (typeof dump === 'function') dump('error: ' + x + '\n');
    },
  };
}

/*
function proxify(object, nick) {
  return new Proxy(object, {
    get: function(target, name) {
      var ret = target[name];
      if (ret === undefined) console.log('PROXY ' + [nick, target, name, ret, typeof ret]);
      return ret;
    }
  });
}
*/

function FPSTracker(text) {
  var last = 0;
  var mean = 0;
  var counter = 0;
  this.tick = function() {
    var now = Date.now();
    if (last > 0) {
      var diff = now - last;
      mean = 0.99*mean + 0.01*diff;
      if (counter++ === 60) {
        counter = 0;
        dump(text + ' fps: ' + (1000/mean).toFixed(2) + '\n');
      }
    }
    last = now;
  }
}

function Element() { throw 'TODO: Element' }
function HTMLCanvasElement() { throw 'TODO: HTMLCanvasElement' }
function HTMLVideoElement() { throw 'TODO: HTMLVideoElement' }

var KeyboardEvent = {
  'DOM_KEY_LOCATION_RIGHT': 2,
};

function PropertyBag() {
  this.addProperty = function(){};
  this.removeProperty = function(){};
  this.setProperty = function(){};
};

var IndexedObjects = {
  nextId: 1,
  cache: {},
  add: function(object) {
    object.id = this.nextId++;
    this.cache[object.id] = object;
  }
};

function EventListener() {
  this.listeners = {};

  this.addEventListener = function addEventListener(event, func) {
    if (!this.listeners[event]) this.listeners[event] = [];
    this.listeners[event].push(func);
  };

  this.removeEventListener = function(event, func) {
    var list = this.listeners[event];
    if (!list) return;
    var me = list.indexOf(func);
    if (me < 0) return;
    list.splice(me, 1);
  };

  this.fireEvent = function fireEvent(event) {
    event.preventDefault = function(){};

    if (event.type in this.listeners) {
      this.listeners[event.type].forEach(function(listener) {
        listener(event);
      });
    }
  };
}

function Image() {
  IndexedObjects.add(this);
  EventListener.call(this);
  var src = '';
  Object.defineProperty(this, 'src', {
    set: function(value) {
      src = value;
      assert(this.id);
      postMessage({ target: 'Image', method: 'src', src: src, id: this.id });
    },
    get: function() {
      return src;
    }
  });
}
Image.prototype.onload = function(){};
Image.prototype.onerror = function(){};

var HTMLImageElement = Image;

var window = this;
var windowExtra = new EventListener();
for (var x in windowExtra) window[x] = windowExtra[x];

window.close = function window_close() {
  postMessage({ target: 'window', method: 'close' });
};

window.alert = function(text) {
  Module.printErr('alert forever: ' + text);
  while (1){};
};

window.scrollX = window.scrollY = 0; // TODO: proxy these

window.WebGLRenderingContext = WebGLWorker;

window.requestAnimationFrame = (function() {
  // similar to Browser.requestAnimationFrame
  var nextRAF = 0;
  return function(func) {
    // try to keep 60fps between calls to here
    var now = Date.now();
    if (nextRAF === 0) {
      nextRAF = now + 1000/60;
    } else {
      while (now + 2 >= nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
        nextRAF += 1000/60;
      }
    }
    var delay = Math.max(nextRAF - now, 0);
    setTimeout(func, delay);
  };
})();

var webGLWorker = new WebGLWorker();

var document = new EventListener();

document.createElement = function document_createElement(what) {
  switch(what) {
    case 'canvas': {
      var canvas = new EventListener();
      canvas.ensureData = function canvas_ensureData() {
        if (!canvas.data || canvas.data.width !== canvas.width || canvas.data.height !== canvas.height) {
          canvas.data = {
            width: canvas.width,
            height: canvas.height,
            data: new Uint8Array(canvas.width*canvas.height*4)
          };
          if (canvas === Module['canvas']) {
            postMessage({ target: 'canvas', op: 'resize', width: canvas.width, height: canvas.height });
          }
        }
      };
      canvas.getContext = function canvas_getContext(type, attributes) {
        if (canvas === Module['canvas']) {
          postMessage({ target: 'canvas', op: 'getContext', type: type, attributes: attributes });
        }
        if (type === '2d') {
          return {
            getImageData: function(x, y, w, h) {
              assert(x == 0 && y == 0 && w == canvas.width && h == canvas.height);
              canvas.ensureData();
              return {
                width: canvas.data.width,
                height: canvas.data.height,
                data: new Uint8Array(canvas.data.data) // TODO: can we avoid this copy?
              };
            },
            putImageData: function(image, x, y) {
              canvas.ensureData();
              assert(x == 0 && y == 0 && image.width == canvas.width && image.height == canvas.height);
              canvas.data.data.set(image.data); // TODO: can we avoid this copy?
              if (canvas === Module['canvas']) {
                postMessage({ target: 'canvas', op: 'render', image: canvas.data });
              }
            },
            drawImage: function(image, x, y, w, h, ox, oy, ow, oh) {
              assert (!x && !y && !ox && !oy);
              assert(w === ow && h === oh);
              assert(canvas.width === w || w === undefined);
              assert(canvas.height === h || h === undefined);
              assert(image.width === canvas.width && image.height === canvas.height);
              canvas.ensureData();
              canvas.data.data.set(image.data.data); // TODO: can we avoid this copy?
              if (canvas === Module['canvas']) {
                postMessage({ target: 'canvas', op: 'render', image: canvas.data });
              }
            }
          };
        } else {
          return webGLWorker;
        }
      };
      canvas.boundingClientRect = {};
      canvas.getBoundingClientRect = function canvas_getBoundingClientRect() {
        return {
          width: canvas.boundingClientRect.width,
          height: canvas.boundingClientRect.height,
          top: canvas.boundingClientRect.top,
          left: canvas.boundingClientRect.left,
          bottom: canvas.boundingClientRect.bottom,
          right: canvas.boundingClientRect.right
        };
      };
      canvas.style = new PropertyBag();
      canvas.exitPointerLock = function(){};

      canvas.width_ = canvas.width_ || 0;
      canvas.height_ = canvas.height_ || 0;
      Object.defineProperty(canvas, 'width', {
        set: function(value) {
          canvas.width_ = value;
          if (canvas === Module['canvas']) {
            postMessage({ target: 'canvas', op: 'resize', width: canvas.width_, height: canvas.height_ });
          }
        },
        get: function() {
          return canvas.width_;
        }
      });
      Object.defineProperty(canvas, 'height', {
        set: function(value) {
          canvas.height_ = value;
          if (canvas === Module['canvas']) {
            postMessage({ target: 'canvas', op: 'resize', width: canvas.width_, height: canvas.height_ });
          }
        },
        get: function() {
          return canvas.height_;
        }
      });

      var style = {
        parentCanvas: canvas,
        removeProperty: function(){},
        setProperty:  function(){},
      };

      Object.defineProperty(style, 'cursor', {
        set: function(value) {
          if (!style.cursor_ || style.cursor_ !== value) {
            style.cursor_ = value;
            if (style.parentCanvas === Module['canvas']) {
              postMessage({ target: 'canvas', op: 'setObjectProperty', object: 'style', property: 'cursor', value: style.cursor_ });
            }
          }
        },
        get: function() {
          return style.cursor_;
        }
      });

      canvas.style = style;

      return canvas;
    }
    default: throw 'document.createElement ' + what;
  }
};

document.getElementById = function(id) {
  if (id === 'canvas' || id === 'application-canvas') {
    return Module.canvas;
  }
  throw 'document.getElementById failed on ' + id;
};

document.documentElement = {};

document.styleSheets = [{
  cssRules: [], // TODO: forward to client
  insertRule: function(rule, i) {
    this.cssRules.splice(i, 0, rule);
  }
}];

document.URL = 'http://worker.not.yet.ready.wait.for.window.onload?fake';

function Audio() {
  warnOnce('faking Audio elements, no actual sound will play');
}
Audio.prototype = new EventListener();
Object.defineProperty(Audio.prototype, 'src', {
  set: function(value) {
    if (value[0] === 'd') return; // ignore data urls
    this.onerror();
  },
});

Audio.prototype.play = function(){};
Audio.prototype.pause = function(){};

Audio.prototype.cloneNode = function() {
  return new Audio;
}

function AudioContext() {
  warnOnce('faking WebAudio elements, no actual sound will play');
  function makeNode() {
    return {
      connect: function(){},
      disconnect: function(){},
    }
  }
  this.listener = {
    setPosition: function() {},
    setOrientation: function() {},
  };
  this.decodeAudioData = function() {}; // ignore callbacks
  this.createBuffer = makeNode;
  this.createBufferSource = makeNode;
  this.createGain = makeNode;
  this.createPanner = makeNode;
}

var screen = {
  width: 0,
  height: 0
};

Module.canvas = document.createElement('canvas');

Module.setStatus = function(){};

Module.print = function Module_print(x) {
  //dump('OUT: ' + x + '\n');
  postMessage({ target: 'stdout', content: x });
};
Module.printErr = function Module_printErr(x) {
  //dump('ERR: ' + x + '\n');
  postMessage({ target: 'stderr', content: x });
};

// Frame throttling

var frameId = 0;
var clientFrameId = 0;

var postMainLoop = Module['postMainLoop'];
Module['postMainLoop'] = function() {
  if (postMainLoop) postMainLoop();
  // frame complete, send a frame id
  postMessage({ target: 'tick', id: frameId++ });
  commandBuffer = [];
};

// Wait to start running until we receive some info from the client

  addRunDependency('gl-prefetch');
  addRunDependency('worker-init');

// buffer messages until the program starts to run

var messageBuffer = null;
var messageResenderTimeout = null;

function messageResender() {
  if (calledMain) {
    assert(messageBuffer && messageBuffer.length > 0);
    messageResenderTimeout = null;
    messageBuffer.forEach(function(message) {
      onmessage(message);
    });
    messageBuffer = null;
  } else {
    messageResenderTimeout = setTimeout(messageResender, 100);
  }
}

function onMessageFromMainEmscriptenThread(message) {
  if (!calledMain && !message.data.preMain) {
    if (!messageBuffer) {
      messageBuffer = [];
      messageResenderTimeout = setTimeout(messageResender, 100);
    }
    messageBuffer.push(message);
    return;
  }
  if (calledMain && messageResenderTimeout) {
    clearTimeout(messageResenderTimeout);
    messageResender();
  }
  //dump('worker got ' + JSON.stringify(message.data).substr(0, 150) + '\n');
  switch (message.data.target) {
    case 'document': {
      document.fireEvent(message.data.event);
      break;
    }
    case 'window': {
      window.fireEvent(message.data.event);
      break;
    }
    case 'canvas': {
      if (message.data.event) {
        Module.canvas.fireEvent(message.data.event);
      } else if (message.data.boundingClientRect) {
        Module.canvas.boundingClientRect = message.data.boundingClientRect;
      } else throw 'ey?';
      break;
    }
    case 'gl': {
      webGLWorker.onmessage(message.data);
      break;
    }
    case 'tock': {
      clientFrameId = message.data.id;
      break;
    }
    case 'Image': {
      var img = IndexedObjects.cache[message.data.id];
      switch (message.data.method) {
        case 'onload': {
          img.width = message.data.width;
          img.height = message.data.height;
          img.data = { width: img.width, height: img.height, data: message.data.data };
          img.complete = true;
          img.onload();
          break;
        }
        case 'onerror': {
          img.onerror({ srcElement: img });
          break;
        }
      }
      break;
    }
    case 'IDBStore': {
      assert(message.data.method === 'response');
      assert(IDBStore.pending);
      IDBStore.pending(message.data);
      break;
    }
    case 'worker-init': {
      Module.canvas = document.createElement('canvas');
      screen.width = Module.canvas.width_ = message.data.width;
      screen.height = Module.canvas.height_ = message.data.height;
      Module.canvas.boundingClientRect = message.data.boundingClientRect;
      document.URL = message.data.URL;
      window.fireEvent({ type: 'load' });
      removeRunDependency('worker-init');
      break;
    }
    case 'custom': {
      if (Module['onCustomMessage']) {
        Module['onCustomMessage'](message);
      } else {
        throw 'Custom message received but worker Module.onCustomMessage not implemented.';
      }
      break;
    }
    case 'setimmediate': {
      if (Module['setImmediates']) Module['setImmediates'].shift()();
      break;
    }
    default: throw 'wha? ' + message.data.target;
  }
};

  onmessage = onMessageFromMainEmscriptenThread;

function postCustomMessage(data) {
  postMessage({ target: 'custom', userData: data });
}


}

// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







Module["allocate"] = allocate;
Module["getMemory"] = getMemory;































































/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



